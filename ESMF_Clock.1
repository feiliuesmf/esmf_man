          + [151]45 Clock Class
               o [152]45.1 Description
               o [153]45.2 Constants
                    # [154]45.2.1 ESMF_DIRECTION
               o [155]45.3 Use and Examples
                    # [156]45.3.1 Clock creation
                    # [157]45.3.2 Clock advance
                    # [158]45.3.3 Clock examination
                    # [159]45.3.4 Clock reversal
                    # [160]45.3.5 Clock destruction
               o [161]45.4 Restrictions and Future Work
               o [162]45.5 Class API
                    # [163]45.5.1 ESMF_ClockAssignment(=)
                    # [164]45.5.2 ESMF_ClockOperator(==)
                    # [165]45.5.3 ESMF_ClockOperator(/=)
                    # [166]45.5.4 ESMF_ClockAdvance
                    # [167]45.5.5 ESMF_ClockCreate
                    # [168]45.5.6 ESMF_ClockCreate
                    # [169]45.5.7 ESMF_ClockDestroy
                    # [170]45.5.8 ESMF_ClockGet
                    # [171]45.5.9 ESMF_ClockGetAlarm
                    # [172]45.5.10 ESMF_ClockGetAlarmList
                    # [173]45.5.11 ESMF_ClockGetNextTime
                    # [174]45.5.12 ESMF_ClockIsCreated
                    # [175]45.5.13 ESMF_ClockIsDone
                    # [176]45.5.14 ESMF_ClockIsReverse
                    # [177]45.5.15 ESMF_ClockIsStopTime
                    # [178]45.5.16 ESMF_ClockIsStopTimeEnabled
                    # [179]45.5.17 ESMF_ClockPrint
                    # [180]45.5.18 ESMF_ClockSet
                    # [181]45.5.19 ESMF_ClockStopTimeDisable
                    # [182]45.5.20 ESMF_ClockStopTimeEnable
                    # [183]45.5.21 ESMF_ClockSyncToRealTime
                    # [184]45.5.22 ESMF_ClockValidate
                                 45 Clock Class

45.1 Description

   The Clock class advances model time and tracks its associated date on a
   specified Calendar. It stores start time, stop time, current time,
   previous time, and a time step. It can also store a reference time,
   typically the time instant at which a simulation originally began. For
   a restart run, the reference time can be different than the start time,
   when the application execution resumes.

   A user can call the ESMF_ClockSet method and reset the time step as
   desired.

   A Clock also stores a list of Alarms, which can be set to flag events
   that occur at a specified time instant or at a specified time interval.
   See Section [587]46.1 for details on how to use Alarms.

   There are methods for setting and getting the Times and Alarms
   associated with a Clock. Methods are defined for advancing the Clock's
   current time, checking if the stop time has been reached, reversing
   direction, and synchronizing with a real clock.

45.2 Constants

  45.2.1 ESMF_DIRECTION

   DESCRIPTION:
   Specifies the time-stepping direction of a clock. Use with "direction"
   argument to methods ESMF_ClockSet() and ESMF_ClockGet(). Cannot be used
   with method ESMF_ClockCreate(), since it only initializes a clock in
   the default forward mode; a clock must be advanced (timestepped) at
   least once before reversing direction via ESMF_ClockSet(). This also
   holds true for negative timestep clocks which are initialized (created)
   with stopTime < startTime, since "forward" means timestepping from
   startTime towards stopTime (see ESMF_DIRECTION_FORWARD below).

   "Forward" and "reverse" directions are distinct from positive and
   negative timesteps. "Forward" means timestepping in the direction
   established at ESMF_ClockCreate(), from startTime towards stopTime,
   regardless of the timestep sign. "Reverse" means timestepping in the
   opposite direction, back towards the clock's startTime, regardless of
   the timestep sign.

   Clocks and alarms run in reverse in such a way that the state of a
   clock and its alarms after each time step is precisely replicated as it
   was in forward time-stepping mode. All methods which query clock and
   alarm state will return the same result for a given timeStep,
   regardless of the direction of arrival.

   The type of this flag is:

   type(ESMF_Direction_Flag)

   The valid values are:

   ESMF_DIRECTION_FORWARD
          Upon calling ESMF_ClockAdvance(), the clock will timestep from
          its startTime toward its stopTime. This is the default
          direction. A user can use either ESMF_ClockIsStopTime() or
          ESMF_ClockIsDone() methods to determine when stopTime is
          reached. This forward behavior also holds for negative timestep
          clocks which are initialized (created) with stopTime <
          startTime.

   ESMF_DIRECTION_REVERSE
          Upon calling ESMF_ClockAdvance(), the clock will timestep
          backwards toward its startTime. Use method ESMF_ClockIsDone() to
          determine when startTime is reached. This reverse behavior also
          holds for negative timestep clocks which are initialized
          (created) with stopTime < startTime.

45.3 Use and Examples

   The following is a typical sequence for using a Clock in a geophysical
   model.

   At initialize:
     * Set a Calendar.
     * Set start time, stop time and time step as Times and Time
       Intervals.
     * Create and Initialize a Clock using the start time, stop time and
       time step.
     * Define Times and Time Intervals associated with special events, and
       use these to set Alarms.

   At run:
     * Advance the Clock, checking for ringing alarms as needed.
     * Check if it is time to stop.

   At finalize:
     * Since Clocks and Alarms are deep classes, they need to be
       explicitly destroyed at finalization. Times and TimeIntervals are
       lightweight classes, so they don't need explicit destruction.

   The following code example illustrates Clock usage.

! !PROGRAM: ESMF_ClockEx - Clock initialization and time-stepping
!
! !DESCRIPTION:
!
! This program shows an example of how to create, initialize, advance, and
! examine a basic clock
!-----------------------------------------------------------------------------
#include "ESMF.h"

      ! ESMF Framework module
      use ESMF
      use ESMF_TestMod
      implicit none

      ! instantiate a clock
      type(ESMF_Clock) :: clock

      ! instantiate time_step, start and stop times
      type(ESMF_TimeInterval) :: timeStep
      type(ESMF_Time) :: startTime
      type(ESMF_Time) :: stopTime

      ! local variables for Get methods
      type(ESMF_Time) :: currTime
      integer(ESMF_KIND_I8) :: advanceCount
      integer :: YY, MM, DD, H, M, S

      ! return code
      integer :: rc

      ! initialize ESMF framework
      call ESMF_Initialize(defaultCalKind=ESMF_CALKIND_GREGORIAN, &
        defaultlogfilename="ClockEx.Log", &
                    logkindflag=ESMF_LOGKIND_MULTI, rc=rc)

  45.3.1 Clock creation

   This example shows how to create and initialize an ESMF_Clock.

      ! initialize time interval to 2 days, 4 hours (6 timesteps in 13 days)
      call ESMF_TimeIntervalSet(timeStep, d=2, h=4, rc=rc)

      ! initialize start time to 4/1/2003 2:24:00 ( 1/10 of a day )
      call ESMF_TimeSet(startTime, yy=2003, mm=4, dd=1, h=2, m=24, rc=rc)

      ! initialize stop time to 4/14/2003 2:24:00 ( 1/10 of a day )
      call ESMF_TimeSet(stopTime, yy=2003, mm=4, dd=14, h=2, m=24, rc=rc)

      ! initialize the clock with the above values
      clock = ESMF_ClockCreate(timeStep, startTime, stopTime=stopTime, &
                               name="Clock 1", rc=rc)

  45.3.2 Clock advance

   This example shows how to time-step an ESMF_Clock.

      ! time step clock from start time to stop time
      do while (.not.ESMF_ClockIsStopTime(clock, rc=rc))

        call ESMF_ClockPrint(clock, options="currTime string", rc=rc)

        call ESMF_ClockAdvance(clock, rc=rc)

      end do

  45.3.3 Clock examination

   This example shows how to examine an ESMF_Clock.

      ! get the clock's final current time
      call ESMF_ClockGet(clock, currTime=currTime, rc=rc)

      call ESMF_TimeGet(currTime, yy=YY, mm=MM, dd=DD, h=H, m=M, s=S, rc=rc)
      print *, "The clock's final current time is ", YY, "/", MM, "/", DD, &
               " ", H, ":", M, ":", S

      ! get the number of times the clock was advanced
      call ESMF_ClockGet(clock, advanceCount=advanceCount, rc=rc)
      print *, "The clock was advanced ", advanceCount, " times."

  45.3.4 Clock reversal

   This example shows how to time-step an ESMF_Clock in reverse mode.

      call ESMF_ClockSet(clock, direction=ESMF_DIRECTION_REVERSE, rc=rc)

      ! time step clock in reverse from stop time back to start time;
      !  note use of ESMF_ClockIsDone() rather than ESMF_ClockIsStopTime()
      do while (.not.ESMF_ClockIsDone(clock, rc=rc))

        call ESMF_ClockPrint(clock, options="currTime string", rc=rc)

        call ESMF_ClockAdvance(clock, rc=rc)

      end do

  45.3.5 Clock destruction

   This example shows how to destroy an ESMF_Clock.

      ! destroy clock
      call ESMF_ClockDestroy(clock, rc=rc)

      ! finalize ESMF framework
      call ESMF_Finalize(rc=rc)

      end program ESMF_ClockEx

45.4 Restrictions and Future Work

    1. Alarm list allocation factor The alarm list within a clock is
       dynamically allocated automatically, 200 alarm references at a
       time. This constant is defined in both Fortran and C++ with a
       #define for ease of modification.
    2. Clock variable timesteps in reverse In order for a clock with
       variable timesteps to be run in ESMF_DIRECTION_REVERSE, the user
       must supply those timesteps to ESMF_ClockAdvance(). Essentially,
       the user must save the timesteps while in forward mode. In a future
       release, the Time Manager will assume this responsibility by saving
       the clock state (including the timeStep) at every timestep while in
       forward mode.

45.5 Class API

  45.5.1 ESMF_ClockAssignment(=) - Assign a Clock to another Clock

   INTERFACE:
       interface assignment(=)
       clock1 = clock2

   ARGUMENTS:
       type(ESMF_Clock) :: clock1
       type(ESMF_Clock) :: clock2

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Assign clock1 as an alias to the same ESMF_Clock object in memory as
   clock2. If clock2 is invalid, then clock1 will be equally invalid after
   the assignment.

   The arguments are:

   clock1
          The ESMF_Clock object on the left hand side of the assignment.

   clock2
          The ESMF_Clock object on the right hand side of the assignment.

  45.5.2 ESMF_ClockOperator(==) - Test if Clock 1 is equal to Clock 2

   INTERFACE:
       interface operator(==)
       if (clock1 == clock2) then ... endif
                    OR
       result = (clock1 == clock2)

   RETURN VALUE:
       logical :: result

   ARGUMENTS:
       type(ESMF_Clock), intent(in) :: clock1
       type(ESMF_Clock), intent(in) :: clock2

   DESCRIPTION:

   Overloads the (==) operator for the ESMF_Clock class. Compare two
   clocks for equality; return .true. if equal, .false. otherwise.
   Comparison is based on IDs, which are distinct for newly created clocks
   and identical for clocks created as copies.

   If either side of the equality test is not in the ESMF_INIT_CREATED
   status an error will be logged. However, this does not affect the
   return value, which is .true. when both sides are in the same status,
   and .false. otherwise.

   The arguments are:

   clock1
          The ESMF_Clock object on the left hand side of the equality
          operation.

   clock2
          The ESMF_Clock object on the right hand side of the equality
          operation.

  45.5.3 ESMF_ClockOperator(/=) - Test if Clock 1 is not equal to Clock 2

   INTERFACE:
       interface operator(/=)
       if (clock1 /= clock2) then ... endif
                    OR
       result = (clock1 /= clock2)

   RETURN VALUE:
       logical :: result

   ARGUMENTS:
       type(ESMF_Clock), intent(in) :: clock1
       type(ESMF_Clock), intent(in) :: clock2

   DESCRIPTION:

   Overloads the (/=) operator for the ESMF_Clock class. Compare two
   clocks for inequality; return .true. if not equal, .false. otherwise.
   Comparison is based on IDs, which are distinct for newly created clocks
   and identical for clocks created as copies.

   If either side of the equality test is not in the ESMF_INIT_CREATED
   status an error will be logged. However, this does not affect the
   return value, which is .true. when both sides are not in the same
   status, and .false. otherwise.

   The arguments are:

   clock1
          The ESMF_Clock object on the left hand side of the non-equality
          operation.

   clock2
          The ESMF_Clock object on the right hand side of the non-equality
          operation.

