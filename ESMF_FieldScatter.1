  26.6.70 ESMF_FieldScatter - Scatter a Fortran array across the ESMF_Field

   INTERFACE:
   subroutine ESMF_FieldScatter<rank><type><kind>(field, farray, &
   rootPet, tile, vm, rc)

   ARGUMENTS:
   type(ESMF_Field), intent(inout) :: field
   mtype (ESMF_KIND_mtypekind),intent(in), target :: farray(mdim)
   integer, intent(in) :: rootPet
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   integer, intent(in), optional :: tile
   type(ESMF_VM), intent(in), optional :: vm
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Scatter the data of farray located on rootPET across an ESMF_Field
   object. A single farray must be scattered across a single DistGrid tile
   in Field. The optional tile argument allows selection of the tile. For
   Fields defined on a single tile DistGrid the default selection (tile 1)
   will be correct. The shape of farray must match the shape of the tile
   in Field.

   If the Field contains replicating DistGrid dimensions data will be
   scattered across all of the replicated pieces.

   The implementation of Scatter and Gather is not sequence index based.
   If the Field is built on arbitrarily distributed Grid, Mesh, LocStream
   or XGrid, Scatter will not scatter data from rootPet to the destination
   data points corresponding to the sequence index on the rootPet. Instead
   Scatter will scatter a contiguous memory range from rootPet to
   destination PET. The size of the memory range is equal to the number of
   data elements on the destination PET. Vice versa for the Gather
   operation. In this case, the user should use ESMF_FieldRedist to
   achieve the same data operation result. For examples how to use
   ESMF_FieldRedist to perform Gather and Scatter, please refer to
   [1001]26.3.32 and [1002]26.3.31.

   This version of the interface implements the PET-based blocking
   paradigm: Each PET of the VM must issue this call exactly once for all
   of its DEs. The call will block until all PET-local data objects are
   accessible.

   For examples and associated documentation regarding this method see
   Section [1003]26.3.29.

   The arguments are:

   field
          The ESMF_Field object across which data will be scattered.

   {farray}
          The Fortran array that is to be scattered. Only root must
          provide a valid farray, the other PETs may treat farray as an
          optional argument.

   rootPet
          PET that holds the valid data in farray.

   [tile]
          The DistGrid tile in field into which to scatter farray. By
          default farray will be scattered into tile 1.

   [vm]
          Optional ESMF_VM object of the current context. Providing the VM
          of the current context will lower the method's overhead.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

