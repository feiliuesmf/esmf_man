  31.6.24 ESMF_GridCreate1PeriDimUfrm - Create a uniform Grid with one periodic
  dim and a regular distribution

   INTERFACE:
   ! Private name; call using ESMF_GridCreate1PeriDimUfrm()
       function ESMF_GridCreate1PeriDimUfrmR(minIndex, maxIndex, &
            minCornerCoord, maxCornerCoord, &
            regDecomp, decompFlag, &
            polekindflag, coordSys, staggerLocList, &
            ignoreNonPeriCoord, petMap, name, rc)

   RETURN VALUE:
        type(ESMF_Grid) :: ESMF_GridCreate1PeriDimUfrmR

   ARGUMENTS:
        integer,                   intent(in),  optional :: minIndex(:)
        integer,                   intent(in)            :: maxIndex(:)
        real(ESMF_KIND_R8),        intent(in)            :: minCornerCoord(:)
        real(ESMF_KIND_R8),        intent(in)            :: maxCornerCoord(:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
        integer,                   intent(in),  optional :: regDecomp(:)
        type(ESMF_Decomp_Flag),    intent(in),  optional :: decompflag(:)
        type(ESMF_PoleKind_Flag),  intent(in),  optional :: polekindflag(2)
        type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
        type(ESMF_StaggerLoc),     intent(in),  optional :: staggerLocList(:)
        logical,                   intent(in),  optional :: ignoreNonPeriCoord
        integer,                   intent(in),  optional :: petMap(:,:,:)
        character (len=*),         intent(in),  optional :: name
        integer,                   intent(out), optional :: rc

   DESCRIPTION:

   This method creates a single tile, regularly distributed grid (see
   Figure [1317]13) with one periodic dimension. The periodic dimension in
   the resulting grid will be dimension 1. The dimension with the poles at
   either end (i.e. the pole dimension) will be dimension 2.

   The grid will have its coordinates uniformly spread between the ranges
   specified by the user. The coordinates are ESMF_TYPEKIND_R8. Currently,
   this method only fills the center stagger with coordinates, and the
   minCornerCoord and maxCornerCoord arguments give the boundaries of the
   center stagger.

   To specify the distribution, the user passes in an array (regDecomp)
   specifying the number of DEs to divide each dimension into. The array
   decompFlag indicates how the division into DEs is to occur. The default
   is to divide the range as evenly as possible. Currently this call only
   supports creating a 2D or 3D Grid, and thus, for example, maxIndex must
   be of size 2 or 3.

   The following arguments have been set to non-typical values and so
   there is a reasonable possibility that they may change in the future to
   be inconsistent with other Grid create interfaces:

   The arguments coordDep1, coordDep2, and coordDep3 have internally been
   set to 1, 2, and 3 respectively. This was done because this call
   creates a uniform grid and so only 1D arrays are needed to hold the
   coordinates. This means the coordinate arrays will be 1D.

   The argument indexFlag has internally been set to ESMF_INDEX_GLOBAL.
   This means that the grid created from this function will have a global
   index space.

   The arguments are:

   [minIndex]
          The bottom extent of the grid array. If not given then the value
          defaults to /1,1,1,.../.

   maxIndex
          The upper extent of the grid array.

   minCornerCoord
          The coordinates of the corner of the grid that corresponds to
          minIndex. size(minCornerCoord) must be equal to size(maxIndex).

   maxCornerCoord
          The coordinates of the corner of the grid that corresponds to
          maxIndex. size(maxCornerCoord) must be equal to size(maxIndex).

   [regDecomp]
          A ndims-element array specifying how the grid is decomposed.
          Each entry is the number of decounts for that dimension.

   [decompflag]
          List of decomposition flags indicating how each dimension of the
          tile is to be divided between the DEs. The default setting is
          ESMF_DECOMP_BALANCED in all dimensions. Please see
          Section [1318]54.13 for a full description of the possible
          options. Note that currently the option ESMF_DECOMP_CYCLIC isn't
          supported in Grid creation.

   [polekindflag]
          Two item array which specifies the type of connection which
          occurs at the pole. The value in polekindflag(1) specifies the
          connection that occurs at the minimum end of the pole dimension.
          The value in polekindflag(2) specifies the connection that
          occurs at the maximum end of the pole dimension. Please see
          Section [1319]31.2.5 for a full list of options. If not
          specified, the default is ESMF_POLEKIND_MONOPOLE for both.

   [coordSys]
          The coordinate system of the grid coordinate data. For a full
          list of options, please see Section [1320]54.11. If not
          specified then defaults to ESMF_COORDSYS_SPH_DEG.

   [staggerLocList]
          The list of stagger locations to fill with coordinates. Please
          see Section [1321]31.2.6 for a description of the available
          stagger locations. If not present, then no staggers are added or
          filled.

   [ignoreNonPeriCoord]
          If .true., do not check if the coordinates for the periodic
          dimension (i.e. dim=1) specify a full periodic range (e.g. 0 to
          360 degrees). If not specified, defaults to .false. .

   [petMap]
          Sets the mapping of pets to the created DEs. This 3D should be
          of size regDecomp(1) x regDecomp(2) x regDecomp(3) If the Grid
          is 2D, then the last dimension is of size 1.

   [name]
          ESMF_Grid name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  31.6.25 ESMF_GridCreate1PeriDimUfrm - Create a uniform Grid with one periodic
  dim and a block distribution

   INTERFACE:
   ! Private name; call using ESMF_GridCreate1PeriDimUfrm()
   function ESMF_GridCreate1PeriDimUfrmB(minIndex, maxIndex, &
             minCornerCoord, maxCornerCoord, &
             deBlockList, deLabelList, &
             polekindflag, coordSys, staggerLocList, &
             ignoreNonPeriCoord, petMap, name, rc)

   RETURN VALUE:
     type(ESMF_Grid) :: ESMF_GridCreate1PeriDimUfrmB

   ARGUMENTS:
     integer,                   intent(in),  optional :: minIndex(:)
     integer,                   intent(in)            :: maxIndex(:)
     real(ESMF_KIND_R8),        intent(in)            :: minCornerCoord(:)
     real(ESMF_KIND_R8),        intent(in)            :: maxCornerCoord(:)
     integer,                   intent(in)            :: deBlockList(:,:,:)
     integer,                   intent(in),  optional :: deLabelList(:)
     type(ESMF_PoleKind_Flag),  intent(in),  optional :: polekindflag(2)
     type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
     type(ESMF_StaggerLoc),     intent(in),  optional :: staggerLocList(:)
     logical,                   intent(in),  optional :: ignoreNonPeriCoord
     integer,                   intent(in),  optional :: petMap(:,:,:)
     character (len=*),         intent(in),  optional :: name
     integer,                   intent(out), optional :: rc

   DESCRIPTION:

   This method creates a single tile, regularly distributed grid (see
   Figure [1322]13) with one periodic dimension. The periodic dimension in
   the resulting grid will be dimension 1. The dimension with the poles at
   either end (i.e. the pole dimension) will be dimension 2.

   The grid will have its coordinates uniformly spread between the ranges
   specified by the user. The coordinates are ESMF_TYPEKIND_R8. Currently,
   this method only fills the center stagger with coordinates, and the
   minCornerCoord and maxCornerCoord arguments give the boundaries of the
   center stagger.

   To specify the distribution, the user passes in an array (deBlockList)
   specifying index space blocks for each DE.

   The following arguments have been set to non-typical values and so
   there is a reasonable possibility that they may change in the future to
   be inconsistent with other Grid create interfaces:

   The arguements coordDep1, coordDep2, and coordDep3 have internally been
   set to 1, 2, and 3 respectively. This was done because this call
   creates a uniform grid and so only 1D arrays are needed to hold the
   coordinates. This means the coordinate arrays will be 1D.

   The argument indexFlag has internally been set to ESMF_INDEX_GLOBAL.
   This means that the grid created from this function will have a global
   index space.

   The arguments are:

   [minIndex]
          The bottom extent of the grid array. If not given then the value
          defaults to /1,1,1,.../.

   maxIndex
          The upper extent of the grid array.

   minCornerCoord
          The coordinates of the corner of the grid that corresponds to
          minIndex. size(minCornerCoord) must be equal to size(maxIndex).

   maxCornerCoord
          The coordinates of the corner of the grid that corresponds to
          maxIndex. size(maxCornerCoord) must be equal to size(maxIndex).

   deBlockList
          List of DE-local LR blocks. The third index of deBlockList steps
          through the deBlock elements, which are defined by the first two
          indices. The first index must be of size dimCount and the second
          index must be of size 2. Each 2D element of deBlockList defined
          by the first two indices hold the following information.

                 +---------------------------------------> 2nd index
                 |    1               2
                 | 1  minIndex(1)    maxIndex(1)
                 | 2  minIndex(2)    maxIndex(2)
                 | .  minIndex(.)    maxIndex(.)
                 | .
                 v
                1st index

          It is required that there be no overlap between the LR segments
          defined by deBlockList.

   [deLabelList]
          List assigning DE labels to the default sequence of DEs. The
          default sequence is given by the order of DEs in the deBlockList
          argument.

   [polekindflag]
          Two item array which specifies the type of connection which
          occurs at the pole. The value in polekindflag(1) specifies the
          connection that occurs at the minimum end of the pole dimension.
          The value in polekindflag(2) specifies the connection that
          occurs at the maximum end of the pole dimension. Please see
          Section [1323]31.2.5 for a full list of options. If not
          specified, the default is ESMF_POLEKIND_MONOPOLE for both.

   [coordSys]
          The coordinate system of the grid coordinate data. For a full
          list of options, please see Section [1324]54.11. If not
          specified then defaults to ESMF_COORDSYS_SPH_DEG.

   [staggerLocList]
          The list of stagger locations to fill with coordinates. Please
          see Section [1325]31.2.6 for a description of the available
          stagger locations. If not present, then no staggers are added or
          filled.

   [ignoreNonPeriCoord]
          If .true., do not check if the coordinates for the periodic
          dimension (i.e. dim=1) specify a full periodic range (e.g. 0 to
          360 degrees). If not specified, defaults to .false. .

   [petMap]
          Sets the mapping of pets to the created DEs. This 3D should be
          of size regDecomp(1) x regDecomp(2) x regDecomp(3) If the Grid
          is 2D, then the last dimension is of size 1.

   [name]
          ESMF_Grid name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

