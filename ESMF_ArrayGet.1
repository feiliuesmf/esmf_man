  28.5.18 ESMF_ArrayGet - Get object-wide Array information

   INTERFACE:
   ! Private name; call using ESMF_ArrayGet()
   subroutine ESMF_ArrayGetDefault(array, arrayspec, typekind, &
     rank, localarrayList, indexflag, distgridToArrayMap, &
     distgridToPackedArrayMap, arrayToDistGridMap, undistLBound, &
     undistUBound, exclusiveLBound, exclusiveUBound, computationalLBound, &
     computationalUBound, totalLBound, totalUBound, computationalLWidth, &
     computationalUWidth, totalLWidth, totalUWidth, distgrid, dimCount, &
     tileCount, minIndexPTile, maxIndexPTile, deToTileMap, indexCountPDe, &
     delayout, deCount, localDeCount, ssiLocalDeCount, localDeToDeMap, &
     localDeList, & ! DEPRECATED ARGUMENT
     isESMFAllocated, name, vm, rc)

   ARGUMENTS:
     type(ESMF_Array), intent(in) :: array
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_ArraySpec), intent(out), optional :: arrayspec
     type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
     integer, intent(out), optional :: rank
     type(ESMF_LocalArray), target, intent(out), optional :: localarrayList(:)
     type(ESMF_Index_Flag), intent(out), optional :: indexflag
     integer, target, intent(out), optional :: distgridToArrayMap(:)
     integer, target, intent(out), optional :: distgridToPackedArrayMap(:)
     integer, target, intent(out), optional :: arrayToDistGridMap(:)
     integer, target, intent(out), optional :: undistLBound(:)
     integer, target, intent(out), optional :: undistUBound(:)
     integer, target, intent(out), optional :: exclusiveLBound(:,:)
     integer, target, intent(out), optional :: exclusiveUBound(:,:)
     integer, target, intent(out), optional :: computationalLBound(:,:)
     integer, target, intent(out), optional :: computationalUBound(:,:)
     integer, target, intent(out), optional :: totalLBound(:,:)
     integer, target, intent(out), optional :: totalUBound(:,:)
     integer, target, intent(out), optional :: computationalLWidth(:,:)
     integer, target, intent(out), optional :: computationalUWidth(:,:)
     integer, target, intent(out), optional :: totalLWidth(:,:)
     integer, target, intent(out), optional :: totalUWidth(:,:)
     type(ESMF_DistGrid), intent(out), optional :: distgrid
     integer, intent(out), optional :: dimCount
     integer, intent(out), optional :: tileCount
     integer, intent(out), optional :: minIndexPTile(:,:)
     integer, intent(out), optional :: maxIndexPTile(:,:)
     integer, intent(out), optional :: deToTileMap(:)
     integer, intent(out), optional :: indexCountPDe(:,:)
     type(ESMF_DELayout), intent(out), optional :: delayout
     integer, intent(out), optional :: deCount
     integer, intent(out), optional :: localDeCount
     integer, intent(out), optional :: ssiLocalDeCount
     integer, intent(out), optional :: localDeToDeMap(:)
     integer, intent(out), optional :: localDeList(:) ! DEPRECATED ARGUMENT
     logical, intent(out), optional :: isESMFAllocated
     character(len=*), intent(out), optional :: name
     type(ESMF_VM), intent(out), optional :: vm
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        5.2.0rp1
                Added argument localDeToDeMap. Started to deprecate
                argument localDeList. The new argument name correctly uses
                the Map suffix and better describes the returned
                information. This was pointed out by user request.

        8.0.0
                Added argument ssiLocalDeCount to support DE sharing
                between PETs on the same single system image (SSI).
                Added argument vm in order to offer information about the
                VM on which the Array was created.

        8.5.0
                Added argument isESMFAllocated to support user query of
                whether ESMF or user is responsible for the data
                allocation referenced by this object.

   DESCRIPTION:

   Get internal information.

   This interface works for any number of DEs per PET.

   The arguments are:

   array
          Queried ESMF_Array object.

   [arrayspec]
          ESMF_ArraySpec object containing the type/kind/rank information
          of the Array object.

   [typekind]
          TypeKind of the Array object.

   [rank]
          Rank of the Array object.

   [localarrayList]
          Upon return this holds a list of the associated ESMC_LocalArray
          objects. localarrayList must be allocated to be of size
          localDeCount or ssiLocalDeCount.

   [indexflag]
          Upon return this flag indicates how the DE-local indices are
          defined. See section [1092]54.27 for a list of possible return
          values.

   [distgridToArrayMap]
          Upon return this list holds the Array dimensions against which
          the DistGrid dimensions are mapped. distgridToArrayMap must be
          allocated to be of size dimCount. An entry of zero indicates
          that the respective DistGrid dimension is replicating the Array
          across the DEs along this direction.

   [distgridToPackedArrayMap]
          Upon return this list holds the indices of the Array dimensions
          in packed format against which the DistGrid dimensions are
          mapped. distgridToPackedArrayMap must be allocated to be of size
          dimCount. An entry of zero indicates that the respective
          DistGrid dimension is replicating the Array across the DEs along
          this direction.

   [arrayToDistGridMap]
          Upon return this list holds the DistGrid dimensions against
          which the Array dimensions are mapped. arrayToDistGridMap must
          be allocated to be of size rank. An entry of zero indicates that
          the respective Array dimension is not decomposed, rendering it a
          tensor dimension.

   [undistLBound]
          Upon return this array holds the lower bounds of the
          undistributed dimensions of the Array. UndistLBound must be
          allocated to be of size rank-dimCount.

   [undistUBound]
          Upon return this array holds the upper bounds of the
          undistributed dimensions of the Array. UndistUBound must be
          allocated to be of size rank-dimCount.

   [exclusiveLBound]
          Upon return this holds the lower bounds of the exclusive regions
          for all PET-local DEs. exclusiveLBound must be allocated to be
          of size (dimCount, localDeCount) or (dimCount, ssiLocalDeCount).

   [exclusiveUBound]
          Upon return this holds the upper bounds of the exclusive regions
          for all PET-local DEs. exclusiveUBound must be allocated to be
          of size (dimCount, localDeCount) or (dimCount, ssiLocalDeCount).

   [computationalLBound]
          Upon return this holds the lower bounds of the computational
          regions for all PET-local DEs. computationalLBound must be
          allocated to be of size (dimCount, localDeCount) or (dimCount,
          ssiLocalDeCount).

   [computationalUBound]
          Upon return this holds the upper bounds of the computational
          regions for all PET-local DEs. computationalUBound must be
          allocated to be of size (dimCount, localDeCount) or (dimCount,
          ssiLocalDeCount).

   [totalLBound]
          Upon return this holds the lower bounds of the total regions for
          all PET-local DEs. totalLBound must be allocated to be of size
          (dimCount, localDeCount) or (dimCount, ssiLocalDeCount).

   [totalUBound]
          Upon return this holds the upper bounds of the total regions for
          all PET-local DEs. totalUBound must be allocated to be of size
          (dimCount, localDeCount) or (dimCount, ssiLocalDeCount).

   [computationalLWidth]
          Upon return this holds the lower width of the computational
          regions for all PET-local DEs. computationalLWidth must be
          allocated to be of size (dimCount, localDeCount) or (dimCount,
          ssiLocalDeCount).

   [computationalUWidth]
          Upon return this holds the upper width of the computational
          regions for all PET-local DEs. computationalUWidth must be
          allocated to be of size (dimCount, localDeCount) or (dimCount,
          ssiLocalDeCount).

   [totalLWidth]
          Upon return this holds the lower width of the total memory
          regions for all PET-local DEs. totalLWidth must be allocated to
          be of size (dimCount, localDeCount) or (dimCount,
          ssiLocalDeCount).

   [totalUWidth]
          Upon return this holds the upper width of the total memory
          regions for all PET-local DEs. totalUWidth must be allocated to
          be of size (dimCount, localDeCount) or (dimCount,
          ssiLocalDeCount).

   [distgrid]
          Upon return this holds the associated ESMF_DistGrid object.

   [dimCount]
          Number of dimensions (rank) of distgrid.

   [tileCount]
          Number of tiles in distgrid.

   [minIndexPTile]
          Lower index space corner per dim, per tile, with
          size(minIndexPTile) == (/dimCount, tileCount/).

   [maxIndexPTile]
          Upper index space corner per dim, per tile, with
          size(maxIndexPTile) == (/dimCount, tileCount/).

   [deToTileMap]
          List of tile id numbers, one for each DE, with size(deToTileMap)
          == (/deCount/)

   [indexCountPDe]
          Array of extents per dim, per de, with size(indexCountPDe) ==
          (/dimCount, deCount/).

   [delayout]
          The associated ESMF_DELayout object.

   [deCount]
          The total number of DEs in the Array.

   [localDeCount]
          The number of DEs in the Array associated with the local PET.

   [ssiLocalDeCount]
          The number of DEs in the Array available to the local PET. This
          includes DEs that are local to other PETs on the same SSI, that
          are accessible via shared memory.

   [localDeToDeMap]
          Mapping between localDe indices and the (global) DEs associated
          with the local PET. The localDe index variables are discussed in
          sections [1093]50.3.7 and [1094]28.2.5. The provided actual
          argument must be of size localDeCount, or ssiLocalDeCount, and
          will be filled accordingly.

   [localDeList]
          DEPRECATED ARGUMENT! Please use the argument localDeToDeMap
          instead.

   [isESMFAllocated]
          Set to .true. for data allocations held by ESMF. Set to .false.
          otherwise.

   [name]
          Name of the Array object.

   [vm
          The VM on which the Array object was created.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.19 ESMF_ArrayGet - Get DE-local Array information for a specific
  dimension

   INTERFACE:
   ! Private name; call using ESMF_ArrayGet()
   subroutine ESMF_ArrayGetPLocalDePDim(array, dim, localDe, &
     indexCount, indexList, rc)

   ARGUMENTS:
     type(ESMF_Array), intent(in) :: array
     integer, intent(in) :: dim
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     integer, intent(in), optional :: localDe
     integer, intent(out), optional :: indexCount
     integer, intent(out), optional :: indexList(:)
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Get internal information per local DE, per dim.

   This interface works for any number of DEs per PET.

   The arguments are:

   array
          Queried ESMF_Array object.

   dim
          Dimension for which information is requested. [1,..,dimCount]

   [localDe]
          Local DE for which information is requested.
          [0,..,localDeCount-1]. For localDeCount==1 the localDe argument
          may be omitted, in which case it will default to localDe=0.

   [indexCount]
          DistGrid indexCount associated with localDe, dim.

   [indexList]
          List of DistGrid tile-local indices for localDe along dimension
          dim.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.20 ESMF_ArrayGet - Get a DE-local Fortran array pointer from an Array

   INTERFACE:
   ! Private name; call using ESMF_ArrayGet()
   subroutine ESMF_ArrayGetFPtr<rank><type><kind>(array, localDe, &
   farrayPtr, rc)

   ARGUMENTS:
   type(ESMF_Array), intent(in) :: array
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   integer, intent(in), optional :: localDe
   <type> (ESMF_KIND_<kind>), pointer :: farrayPtr(<rank>)
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Access Fortran array pointer to the specified DE-local memory
   allocation of the Array object.

   The arguments are:

   array
          Queried ESMF_Array object.

   [localDe]
          Local DE for which information is requested.
          [0,..,localDeCount-1]. For localDeCount==1 the localDe argument
          may be omitted, in which case it will default to localDe=0.

   farrayPtr
          Upon return, farrayPtr points to the DE-local data allocation of
          localDe in array. It depends on the specific entry point of
          ESMF_ArrayCreate() used during array creation, which Fortran
          operations are supported on the returned farrayPtr. See
          [1095]28.3 for more details.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.21 ESMF_ArrayGet - Get a DE-local LocalArray object from an Array

   INTERFACE:
   ! Private name; call using ESMF_ArrayGet()
   subroutine ESMF_ArrayGetLocalArray(array, localDe, localarray, rc)

   ARGUMENTS:
     type(ESMF_Array), intent(in) :: array
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     integer, intent(in), optional :: localDe
     type(ESMF_LocalArray), intent(inout) :: localarray
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Provide access to ESMF_LocalArray object that holds data for the
   specified local DE.

   The arguments are:

   array
          Queried ESMF_Array object.

   [localDe]
          Local DE for which information is requested.
          [0,..,localDeCount-1]. For localDeCount==1 the localDe argument
          may be omitted, in which case it will default to localDe=0.

   localarray
          Upon return localarray refers to the DE-local data allocation of
          array.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

