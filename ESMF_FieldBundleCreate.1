  25.5.6 ESMF_FieldBundleCreate - Create a non packed FieldBundle from a list of
  Fields

   INTERFACE:
   ! Private name; call using ESMF_FieldBundleCreate()
   function ESMF_FieldBundleCreateDefault(fieldList, &
       multiflag, relaxedflag, name, rc)

   RETURN VALUE:
     type(ESMF_FieldBundle) :: ESMF_FieldBundleCreateDefault

   ARGUMENTS:
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_Field), intent(in), optional :: fieldList(:)
     logical, intent(in), optional :: multiflag
     logical, intent(in), optional :: relaxedflag
     character (len=*),intent(in), optional :: name
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Create an ESMF_FieldBundle object from a list of existing Fields.

   The creation of a FieldBundle leaves the bundled Fields unchanged, they
   remain valid individual objects. a FieldBundle is a light weight
   container of Field references. The actual data remains in place, there
   are no data movements or duplications associated with the creation of
   an FieldBundle.

   [fieldList]
          List of ESMF_Field objects to be bundled.

   [multiflag]
          A setting of .true. allows multiple items with the same name to
          be added to fieldbundle. For .false. added items must have
          unique names. The default setting is .false..

   [relaxedflag]
          A setting of .true. indicates a relaxed definition of "add"
          under multiflag=.false. mode, where it is not an error if
          fieldList contains items with names that are also found in
          fieldbundle. The fieldbundle is left unchanged for these items.
          For .false. this is treated as an error condition. The default
          setting is .false..

   [name]
          Name of the created ESMF_FieldBundle. A default name is
          generated if not specified.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  25.5.7 ESMF_FieldBundleCreate - Create a packed FieldBundle from Fortran array
  pointer and Grid

   INTERFACE:
   ! Private name; call using ESMF_FieldBundleCreate()
   function ESMF_FieldBundleCreateGrid<rank><type><kind>(fieldNameList, &
   farrayPtr, grid, fieldDim, &
   indexflag, staggerLoc, &
   gridToFieldMap, &
   totalLWidth, totalUWidth, name, rc)

   RETURN VALUE:
   type(ESMF_FieldBundle) :: ESMF_FieldBundleCreateGridDataPtr<rank><type><kind>

   ARGUMENTS:
   character(len=*), intent(in) :: fieldNameList(:)
   <type> (ESMF_KIND_<kind>), dimension(<rank>), pointer :: farrayPtr
   type(ESMF_Grid), intent(in) :: grid
   integer, intent(in) :: fieldDim
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_Index_Flag), intent(in), optional :: indexflag
   type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   integer, intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create a packed FieldBundle from user supplied list of field names,
   pre-allocated Fortran array pointer, and ESMF_Grid object.

   The arguments are:

   fieldNameList
          A list of field names for the Fields held by the packed
          FieldBundle.

   farrayPtr
          Pre-allocated Fortran array pointer holding the memory of the
          list of Fields.

   grid
          The ESMF_Grid object on which the Fields in the packed
          FieldBundle are built.

   fieldDim
          The dimension in the farrayPtr that contains the indices of
          Fields to be packed.

   [indexflag]
          Indicate how DE-local indices are defined. See section
          [731]54.27 for a list of valid indexflag options. All Fields in
          packed FieldBundle use identical indexflag setting.

   [staggerloc]
          Stagger location of data in grid cells. For valid predefined
          values see section [732]31.2.6. To create a custom stagger
          location see section [733]31.3.25. The default value is
          ESMF_STAGGERLOC_CENTER. All Fields in packed FieldBundle use
          identical staggerloc setting.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the farrayPtr by specifying the appropriate farrayPtr dimension
          index. The default is to map all of the grid's dimensions
          against the lowest dimensions of the farrayPtr in sequence, i.e.
          gridToFieldMap = (/1,2,3,.../). The values of all gridToFieldMap
          entries must be greater than or equal to one and smaller than or
          equal to the farrayPtr rank. It is erroneous to specify the same
          gridToFieldMap entry multiple times. The total ungridded
          dimensions in the field are the total farrayPtr dimensions less
          the total (distributed + undistributed) dimensions in the grid.
          Ungridded dimensions must be in the same order they are stored
          in the farrayPtr. Permutations of the order of dimensions are
          handled via individual communication methods. For example, an
          undistributed dimension can be remapped to a distributed
          dimension as part of the ESMF_ArrayRedist() operation. All
          Fields in packed FieldBundle use identical gridToFieldMap
          setting.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farrayPtr.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the farrayPtr. That is,
          for each gridded dimension the farrayPtr size should be max(
          totalLWidth + totalUWidth + computationalCount, exclusiveCount
          ). All Fields in packed FieldBundle use identical totalLWidth
          setting.

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farrayPtr.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the farrayPtr. That is,
          for each gridded dimension the farrayPtr size should max(
          totalLWidth + totalUWidth + computationalCount, exclusiveCount
          ). All Fields in packed FieldBundle use identical totalUWidth
          setting.

   [name]
          FieldBundle name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  25.5.8 ESMF_FieldBundleCreate - Create a packed FieldBundle from Fortran array
  pointer and Mesh

   INTERFACE:
   ! Private name; call using ESMF_FieldBundleCreate()
   function ESMF_FieldBundleCreateMesh<rank><type><kind>(fieldNameList, &
   farrayPtr, Mesh, fieldDim, &
   meshLoc, gridToFieldMap, name, rc)

   RETURN VALUE:
   type(ESMF_FieldBundle) :: ESMF_FieldBundleCreateMeshDataPtr<rank><type><kind>

   ARGUMENTS:
   character(len=*), intent(in) :: fieldNameList(:)
   <type> (ESMF_KIND_<kind>), dimension(<rank>), pointer :: farrayPtr
   type(ESMF_Mesh), intent(in) :: mesh
   integer, intent(in) :: fieldDim
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_MeshLoc), intent(in), optional:: meshloc
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create a packed FieldBundle from user supplied list of field names,
   pre-allocated Fortran array pointer, and ESMF_Mesh object.

   The arguments are:

   fieldNameList
          A list of field names for the Fields held by the packed
          FieldBundle.

   farrayPtr
          Pre-allocated Fortran array pointer holding the memory of the
          list of Fields.

   mesh
          The ESMF_Mesh object on which the Fields in the packed
          FieldBundle are built.

   fieldDim
          The dimension in the farrayPtr that contains the indices of
          Fields to be packed.

   [meshloc]
          The part of the Mesh on which to build the Field. For valid
          predefined values see Section [734]54.39. If not set, defaults
          to ESMF_MESHLOC_NODE.

   [gridToFieldMap]
          List with number of elements equal to the mesh's dimCount. The
          list elements map each dimension of the mesh to a dimension in
          the farrayPtr by specifying the appropriate farrayPtr dimension
          index. The default is to map all of the mesh's dimensions
          against the lowest dimensions of the farrayPtr in sequence, i.e.
          gridToFieldMap = (/1,2,3,.../). The values of all gridToFieldMap
          entries must be greater than or equal to one and smaller than or
          equal to the farrayPtr rank. It is erroneous to specify the same
          gridToFieldMap entry multiple times. The total ungridded
          dimensions in the field are the total farrayPtr dimensions less
          the total (distributed + undistributed) dimensions in the mesh.
          Ungridded dimensions must be in the same order they are stored
          in the farrayPtr. Permutations of the order of dimensions are
          handled via individual communication methods. For example, an
          undistributed dimension can be remapped to a distributed
          dimension as part of the ESMF_ArrayRedist() operation. All
          Fields in packed FieldBundle use identical gridToFieldMap
          setting.

   [name]
          FieldBundle name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

