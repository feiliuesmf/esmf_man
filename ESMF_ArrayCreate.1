  28.5.5 ESMF_ArrayCreate - Create Array object from Fortran array pointer

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateFrmPtr<rank><type><kind>(distgrid, farrayPtr, &
   datacopyflag, distgridToArrayMap, computationalEdgeLWidth, &
   computationalEdgeUWidth, computationalLWidth, &
   computationalUWidth, totalLWidth, &
   totalUWidth, name, rc)

   RETURN VALUE:
   type(ESMF_Array) :: ESMF_ArrayCreateDataPtr<rank><type><kind>

   ARGUMENTS:
   type(ESMF_DistGrid), intent(in) :: distgrid
   <type> (ESMF_KIND_<kind>), pointer :: farrayPtr(<rank>)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   integer, intent(in), optional :: distgridToArrayMap(:)
   integer, intent(in), optional :: computationalEdgeLWidth(:)
   integer, intent(in), optional :: computationalEdgeUWidth(:)
   integer, intent(in), optional :: computationalLWidth(:)
   integer, intent(in), optional :: computationalUWidth(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Create an ESMF_Array object from existing local native Fortran arrays
   with pointer attribute. The decomposition and distribution is specified
   by the distgrid argument. Each PET must issue this call with identical
   arguments in order to create a consistent Array object. The only
   exception is the farrayPtr argument which will be different on each
   PET. The bounds of the local arrays are preserved by this call and
   determine the bounds of the total region of the resulting Array object.
   Bounds of the DE-local exclusive regions are set to be consistent with
   the total regions and the specified distgrid argument. Bounds for Array
   dimensions that are not distributed are automatically set to the bounds
   provided by farrayPtr.

   This interface requires a 1 DE per PET decomposition. The Array object
   will not be created and an error will be returned if this condition is
   not met.

   The not distributed Array dimensions form a tensor of rank = array.rank
   - distgrid.dimCount. The widths of the computational region are set to
   the provided value, or zero by default, for all tensor elements. Use
   ESMF_ArraySet() to change these default settings after the Array object
   has been created.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank of farrayPtr.

   farrayPtr
          Valid native Fortran array with pointer attribute. Memory must
          be associated with the actual argument. The type/kind/rank
          information of farrayPtr will be used to set Array's properties
          accordingly. The shape of farrayPtr will be checked against the
          information contained in the distgrid. The bounds of farrayPtr
          will be preserved by this call and the bounds of the resulting
          Array object are set accordingly.

   [datacopyflag]
          Specifies whether the Array object will reference the memory
          allocation provided by farrayPtr directly or will copy the data
          from farrayPtr into a new memory allocation. For valid values
          see [1073]54.12. The default is ESMF_DATACOPY_REFERENCE. Note
          that the ESMF_DATACOPY_REFERENCE option may not be safe when
          providing an array slice in farrayPtr.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in farrayPtr by specifying
          the appropriate Array dimension index. The default is to map all
          of distgrid's dimensions against the lower dimensions of the
          farrayPtr argument in sequence, i.e. distgridToArrayMap = (/1,
          2, .../). Unmapped farrayPtr dimensions are not decomposed
          dimensions and form a tensor of rank = Array.rank -
          DistGrid.dimCount. All distgridToArrayMap entries must be
          greater than or equal to zero and smaller than or equal to the
          Array rank. It is erroneous to specify the same entry multiple
          times unless it is zero. If the Array rank is less than the
          DistGrid dimCount then the default distgridToArrayMap will
          contain zeros for the dimCount - rank rightmost entries. A zero
          entry in the distgridToArrayMap indicates that the particular
          DistGrid dimension will be replicating the Array across the DEs
          along this direction.

   [computationalEdgeLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region for DEs that are located on the edge of a tile.
          The default is a zero vector.

   [computationalEdgeUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region for DEs that are located on the edge of a tile.
          The default is a zero vector.

   [computationalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region. The default is a zero vector.

   [computationalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region. The default is a zero vector.

   [totalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          total memory region with respect to the lower corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region exactly.

   [totalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          total memory region with respect to the upper corner of the
          exclusive region. The default is a vector that contains the
          remaining number of elements in each direction as to fit the
          union of exclusive and computational region into the memory
          region provided by the farrayPtr argument.

   [name]
          Name of the Array object.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.6 ESMF_ArrayCreate - Create Array object from Fortran array pointer w/
  arbitrary seqIndices for halo

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateFrmPtrArb<indexkind><rank><type><kind>(distgrid, &
   farrayPtr, haloSeqIndexList, datacopyflag, &
   distgridToArrayMap, name, rc)

   RETURN VALUE:
   type(ESMF_Array) :: ESMF_ArrayCreateDataPtrArb<rank><type><kind>

   ARGUMENTS:
   type(ESMF_DistGrid), intent(in) :: distgrid
   <type> (ESMF_KIND_<kind>), pointer :: farrayPtr(<rank>)
   integer(ESMF_KIND_<indexkind>), intent(in) :: haloSeqIndexList(:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   integer, intent(in), optional :: distgridToArrayMap(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Create an ESMF_Array object from existing local native Fortran arrays
   with pointer attribute, according to distgrid. Besides farrayPtr each
   PET must issue this call with identical arguments in order to create a
   consistent Array object. The bounds of the local arrays are preserved
   by this call and determine the bounds of the total region of the
   resulting Array object. Bounds of the DE-local exclusive regions are
   set to be consistent with the total regions and the specified distgrid
   argument. Bounds for Array dimensions that are not distributed are
   automatically set to the bounds provided by farrayPtr.

   This interface requires a 1 DE per PET decomposition. The Array object
   will not be created and an error will be returned if this condition is
   not met.

   The not distributed Array dimensions form a tensor of rank = array.rank
   - distgrid.dimCount. The widths of the computational region are set to
   the provided value, or zero by default, for all tensor elements. Use
   ESMF_ArraySet() to change these default settings after the Array object
   has been created.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank of farrayPtr.

   farrayPtr
          Valid native Fortran array with pointer attribute. Memory must
          be associated with the actual argument. The type/kind/rank
          information of farrayPtr will be used to set Array's properties
          accordingly. The shape of farrayPtr will be checked against the
          information contained in the distgrid. The bounds of farrayPtr
          will be preserved by this call and the bounds of the resulting
          Array object are set accordingly.

   haloSeqIndexList
          One dimensional array containing sequence indices of local halo
          region. The size (and content) of haloSeqIndexList can (and
          typically will) be different on each PET. The haloSeqIndexList
          argument is of integer type, but can be of different kind in
          order to support both 32-bit (ESMF_KIND_I4) and 64-bit
          (ESMF_KIND_I8) indexing.

   [datacopyflag]
          Specifies whether the Array object will reference the memory
          allocation provided by farrayPtr directly or will copy the data
          from farrayPtr into a new memory allocation. For valid values
          see [1074]54.12. The default is ESMF_DATACOPY_REFERENCE. Note
          that the ESMF_DATACOPY_REFERENCE option may not be safe when
          providing an array slice in farrayPtr.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in farrayPtr by specifying
          the appropriate Array dimension index. The default is to map all
          of distgrid's dimensions against the lower dimensions of the
          farrayPtr argument in sequence, i.e. distgridToArrayMap = (/1,
          2, .../). Unmapped farrayPtr dimensions are not decomposed
          dimensions and form a tensor of rank = Array.rank -
          DistGrid.dimCount. All distgridToArrayMap entries must be
          greater than or equal to zero and smaller than or equal to the
          Array rank. It is erroneous to specify the same entry multiple
          times unless it is zero. If the Array rank is less than the
          DistGrid dimCount then the default distgridToArrayMap will
          contain zeros for the dimCount - rank rightmost entries. A zero
          entry in the distgridToArrayMap indicates that the particular
          DistGrid dimension will be replicating the Array across the DEs
          along this direction.

   [name]
          Name of the Array object.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.7 ESMF_ArrayCreate - Create Array object from Fortran array

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateAsmdSp<rank><type><kind>(distgrid, farray, &
   indexflag, datacopyflag, distgridToArrayMap, &
   computationalEdgeLWidth, computationalEdgeUWidth, computationalLWidth, &
   computationalUWidth, totalLWidth, &
   totalUWidth, undistLBound, undistUBound, name, rc)

   RETURN VALUE:
   type(ESMF_Array) :: ESMF_ArrayCreateDataAssmdShape<rank><type><kind>

   ARGUMENTS:
   type(ESMF_DistGrid), intent(in) :: distgrid
   <type> (ESMF_KIND_<kind>), intent(in), target :: farray(<rank>)
   type(ESMF_Index_Flag), intent(in) :: indexflag
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   integer, intent(in), optional :: distgridToArrayMap(:)
   integer, intent(in), optional :: computationalEdgeLWidth(:)
   integer, intent(in), optional :: computationalEdgeUWidth(:)
   integer, intent(in), optional :: computationalLWidth(:)
   integer, intent(in), optional :: computationalUWidth(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   integer, intent(in), optional :: undistLBound(:)
   integer, intent(in), optional :: undistUBound(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Create an ESMF_Array object from an existing local native Fortran
   array. The decomposition and distribution is specified by the distgrid
   argument. Each PET must issue this call with identical arguments in
   order to create a consistent Array object. The only exception is the
   farray argument which will be different on each PET. The local arrays
   provided must be dimensioned according to the DE-local total region.
   Bounds of the exclusive regions are set as specified in the distgrid
   argument. Bounds for Array dimensions that are not distributed can be
   chosen freely using the undistLBound and undistUBound arguments.

   This interface requires a 1 DE per PET decomposition. The Array object
   will not be created and an error will be returned if this condition is
   not met.

   The not distributed Array dimensions form a tensor of rank = array.rank
   - distgrid.dimCount. The widths of the computational region are set to
   the provided value, or zero by default, for all tensor elements. Use
   ESMF_ArraySet() to change these default settings after the Array object
   has been created.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank of farray.

   farray
          Valid native Fortran array, i.e. memory must be associated with
          the actual argument. The type/kind/rank information of farray
          will be used to set Array's properties accordingly. The shape of
          farray will be checked against the information contained in the
          distgrid.

   indexflag
          Indicate how DE-local indices are defined. See section
          [1075]54.27 for a list of valid indexflag options.

   [datacopyflag]
          Specifies whether the Array object will reference the memory
          allocation provided by farray directly or will copy the data
          from farray into a new memory allocation. For valid values see
          [1076]54.12. The default is ESMF_DATACOPY_REFERENCE. Note that
          the ESMF_DATACOPY_REFERENCE option may not be safe when
          providing an array slice in farray.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in farray by specifying the
          appropriate Array dimension index. The default is to map all of
          distgrid's dimensions against the lower dimensions of the farray
          argument in sequence, i.e. distgridToArrayMap = (/1, 2, .../).
          Unmapped farray dimensions are not decomposed dimensions and
          form a tensor of rank = Array.rank - DistGrid.dimCount. All
          distgridToArrayMap entries must be greater than or equal to zero
          and smaller than or equal to the Array rank. It is erroneous to
          specify the same entry multiple times unless it is zero. If the
          Array rank is less than the DistGrid dimCount then the default
          distgridToArrayMap will contain zeros for the dimCount - rank
          rightmost entries. A zero entry in the distgridToArrayMap
          indicates that the particular DistGrid dimension will be
          replicating the Array across the DEs along this direction.

   [computationalEdgeLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region for DEs that are located on the edge of a tile.
          The default is a zero vector.

   [computationalEdgeUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region for DEs that are located on the edge of a tile.
          The default is a zero vector.

   [computationalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region. The default is a zero vector.

   [computationalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region. The default is a zero vector.

   [totalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          total memory region with respect to the lower corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region exactly.

   [totalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          total memory region with respect to the upper corner of the
          exclusive region. The default is a vector that contains the
          remaining number of elements in each direction as to fit the
          union of exclusive and computational region into the memory
          region provided by the farray argument.

   [undistLBound]
          Lower bounds for the array dimensions that are not distributed.
          By default lbound is 1.

   [undistUBound]
          Upper bounds for the array dimensions that are not distributed.
          By default ubound is equal to the extent of the corresponding
          dimension in farray.

   [name]
          Name of the Array object.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.8 ESMF_ArrayCreate - Create Array object from Fortran array w/ arbitrary
  seqIndices for halo

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateAsmdSpArb<indexkind><rank><type><kind>(distgrid, &
   farray, indexflag, haloSeqIndexList, datacopyflag, &
   distgridToArrayMap, computationalEdgeLWidth, computationalEdgeUWidth, &
   computationalLWidth, computationalUWidth, totalLWidth, totalUWidth, &
   undistLBound, undistUBound, name, rc)

   RETURN VALUE:
   type(ESMF_Array) :: ESMF_ArrayCreateDataAssmdShapeArb<rank><type><kind>

   ARGUMENTS:
   type(ESMF_DistGrid), intent(in) :: distgrid
   <type> (ESMF_KIND_<kind>), intent(in), target :: farray(<rank>)
   type(ESMF_Index_Flag), intent(in) :: indexflag
   integer(ESMF_KIND_<indexkind>), intent(in) :: haloSeqIndexList(:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   integer, intent(in), optional :: distgridToArrayMap(:)
   integer, intent(in), optional :: computationalEdgeLWidth(:)
   integer, intent(in), optional :: computationalEdgeUWidth(:)
   integer, intent(in), optional :: computationalLWidth(:)
   integer, intent(in), optional :: computationalUWidth(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   integer, intent(in), optional :: undistLBound(:)
   integer, intent(in), optional :: undistUBound(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Create an ESMF_Array object from an existing local native Fortran
   array. The decomposition and distribution is specified by the distgrid
   argument. Each PET must issue this call with identical arguments in
   order to create a consistent Array object. The only exception is the
   farray argument which will be different on each PET. The local arrays
   provided must be dimensioned according to the DE-local total region.
   Bounds of the exclusive regions are set as specified in the distgrid
   argument. Bounds for Array dimensions that are not distributed can be
   chosen freely using the undistLBound and undistUBound arguments.

   This interface requires a 1 DE per PET decomposition. The Array object
   will not be created and an error will be returned if this condition is
   not met.

   The not distributed Array dimensions form a tensor of rank = array.rank
   - distgrid.dimCount. The widths of the computational region are set to
   the provided value, or zero by default, for all tensor elements. Use
   ESMF_ArraySet() to change these default settings after the Array object
   has been created.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank of farray.

   farray
          Valid native Fortran array, i.e. memory must be associated with
          the actual argument. The type/kind/rank information of farray
          will be used to set Array's properties accordingly. The shape of
          farray will be checked against the information contained in the
          distgrid.

   indexflag
          Indicate how DE-local indices are defined. See section
          [1077]54.27 for a list of valid indexflag options.

   haloSeqIndexList
          One dimensional array containing sequence indices of local halo
          region. The size (and content) of haloSeqIndexList can (and
          typically will) be different on each PET. The haloSeqIndexList
          argument is of integer type, but can be of different kind in
          order to support both 32-bit (ESMF_KIND_I4) and 64-bit
          (ESMF_KIND_I8) indexing.

   [datacopyflag]
          Specifies whether the Array object will reference the memory
          allocation provided by farray directly or will copy the data
          from farray into a new memory allocation. For valid values see
          [1078]54.12. The default is ESMF_DATACOPY_REFERENCE. Note that
          the ESMF_DATACOPY_REFERENCE option may not be safe when
          providing an array slice in farray.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in farray by specifying the
          appropriate Array dimension index. The default is to map all of
          distgrid's dimensions against the lower dimensions of the farray
          argument in sequence, i.e. distgridToArrayMap = (/1, 2, .../).
          Unmapped farray dimensions are not decomposed dimensions and
          form a tensor of rank = Array.rank - DistGrid.dimCount. All
          distgridToArrayMap entries must be greater than or equal to zero
          and smaller than or equal to the Array rank. It is erroneous to
          specify the same entry multiple times unless it is zero. If the
          Array rank is less than the DistGrid dimCount then the default
          distgridToArrayMap will contain zeros for the dimCount - rank
          rightmost entries. A zero entry in the distgridToArrayMap
          indicates that the particular DistGrid dimension will be
          replicating the Array across the DEs along this direction.

   [computationalEdgeLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region for DEs that are located on the edge of a tile.
          The default is a zero vector.

   [computationalEdgeUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region for DEs that are located on the edge of a tile.
          The default is a zero vector.

   [computationalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region. The default is a zero vector.

   [computationalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region. The default is a zero vector.

   [totalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          total memory region with respect to the lower corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region exactly.

   [totalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          total memory region with respect to the upper corner of the
          exclusive region. The default is a vector that contains the
          remaining number of elements in each direction as to fit the
          union of exclusive and computational region into the memory
          region provided by the farray argument.

   [undistLBound]
          Lower bounds for the array dimensions that are not distributed.
          By default lbound is 1.

   [undistUBound]
          Upper bounds for the array dimensions that are not distributed.
          By default ubound is equal to the extent of the corresponding
          dimension in farray.

   [name]
          Name of the Array object.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.9 ESMF_ArrayCreate - Create Array object from a list of LocalArray
  objects

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateLocalArray(distgrid, localarrayList, &
     indexflag, datacopyflag, distgridToArrayMap, computationalEdgeLWidth, &
     computationalEdgeUWidth, computationalLWidth, computationalUWidth, &
     totalLWidth, totalUWidth, undistLBound, undistUBound, name, rc)

   RETURN VALUE:
     type(ESMF_Array) :: ESMF_ArrayCreateLocalArray

   ARGUMENTS:
        type(ESMF_DistGrid), intent(in) :: distgrid
        type(ESMF_LocalArray), intent(in) :: localarrayList(:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
        type(ESMF_Index_Flag), intent(in), optional :: indexflag
        type(ESMF_DataCopy_Flag),intent(in), optional :: datacopyflag
        integer, intent(in), optional :: distgridToArrayMap(:)
        integer, intent(in), optional :: computationalEdgeLWidth(:)
        integer, intent(in), optional :: computationalEdgeUWidth(:)
        integer, intent(in), optional :: computationalLWidth(:)
        integer, intent(in), optional :: computationalUWidth(:)
        integer, intent(in), optional :: totalLWidth(:)
        integer, intent(in), optional :: totalUWidth(:)
        integer, intent(in), optional :: undistLBound(:)
        integer, intent(in), optional :: undistUBound(:)
        character (len=*), intent(in), optional :: name
        integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Create an ESMF_Array object from existing ESMF_LocalArray objects. The
   decomposition and distribution is specified by the distgrid argument.
   Each PET must issue this call with identical arguments in order to
   create a consistent Array object. The only exception is the
   localarrayList argument which will be different on each PET. The local
   arrays provided must be dimensioned according to the DE-local total
   region. Bounds of the exclusive regions are set as specified in the
   distgrid argument. Bounds for Array dimensions that are not distributed
   can be chosen freely using the undistLBound and undistUBound arguments.

   This interface is able to handle multiple DEs per PET.

   The not distributed Array dimensions form a tensor of rank = array.rank
   - distgrid.dimCount. The widths of the computational region are set to
   the provided value, or zero by default, for all tensor elements. Use
   ESMF_ArraySet() to change these default settings after the Array object
   has been created.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank specified in arrayspec, otherwise a
          runtime ESMF error will be raised.

   localarrayList
          List of valid ESMF_LocalArray objects, i.e. memory must be
          associated with the actual arguments. The type/kind/rank
          information of all localarrayList elements must be identical and
          will be used to set Array's properties accordingly. The shape of
          each localarrayList element will be checked against the
          information contained in the distgrid.

   [indexflag]
          Indicate how DE-local indices are defined. By default, the
          exclusive region of each DE is placed to start at the local
          index space origin, i.e. (1, 1, ..., 1). Alternatively the
          DE-local index space can be aligned with the global index space,
          if a global index space is well defined by the associated
          DistGrid. See section [1079]54.27 for a list of valid indexflag
          options.

   [datacopyflag]
          Specifies whether the Array object will reference the memory
          allocation of the arrays provided in localarrayList directly, or
          will copy the actual data into new memory allocations. For valid
          values see [1080]54.12. The default is ESMF_DATACOPY_REFERENCE.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in the localarrayList
          elements by specifying the appropriate Array dimension index.
          The default is to map all of distgrid's dimensions against the
          lower dimensions of the localarrayList elements in sequence,
          i.e. distgridToArrayMap = (/1, 2, .../). Unmapped dimensions in
          the localarrayList elements are not decomposed dimensions and
          form a tensor of rank = Array.rank - DistGrid.dimCount. All
          distgridToArrayMap entries must be greater than or equal to zero
          and smaller than or equal to the Array rank. It is erroneous to
          specify the same entry multiple times unless it is zero. If the
          Array rank is less than the DistGrid dimCount then the default
          distgridToArrayMap will contain zeros for the dimCount - rank
          rightmost entries. A zero entry in the distgridToArrayMap
          indicates that the particular DistGrid dimension will be
          replicating the Array across the DEs along this direction.

   [computationalEdgeLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region for DEs that are located on the edge of a tile.

   [computationalEdgeUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region for DEs that are located on the edge of a tile.

   [computationalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region. The default is a zero vector.

   [computationalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region. The default is a zero vector.

   [totalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          total memory region with respect to the lower corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region exactly.

   [totalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          total memory region with respect to the upper corner of the
          exclusive region. The default is a vector that contains the
          remaining number of elements in each direction as to fit the
          union of exclusive and computational region into the memory
          region provided by the localarrayList argument.

   [undistLBound]
          Lower bounds for the array dimensions that are not distributed.
          By default lbound is 1.

   [undistUBound]
          Upper bounds for the array dimensions that are not distributed.
          By default ubound is equal to the extent of the corresponding
          dimension in localarrayList.

   [name]
          Name of the Array object.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.10 ESMF_ArrayCreate - Create Array object from a list of LocalArray
  objects w/ arbitrary seqIndices for halo

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateLocalArrayArb<indexkind>(distgrid, localarrayList, &
   haloSeqIndexList, indexflag, datacopyflag, &
   distgridToArrayMap, computationalEdgeLWidth, computationalEdgeUWidth, &
   computationalLWidth, computationalUWidth, &
   totalLWidth, totalUWidth, undistLBound, undistUBound, name, rc)

   RETURN VALUE:
   type(ESMF_Array) :: ESMF_ArrayCreateLocalArrayArb

   ARGUMENTS:
   type(ESMF_DistGrid), intent(in) :: distgrid
   type(ESMF_LocalArray), intent(in) :: localarrayList(:)
   integer(ESMF_KIND_<indexkind>), intent(in) :: haloSeqIndexList(:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_Index_Flag), intent(in), optional :: indexflag
   type(ESMF_DataCopy_Flag),intent(in), optional :: datacopyflag
   integer, intent(in), optional :: distgridToArrayMap(:)
   integer, intent(in), optional :: computationalEdgeLWidth(:)
   integer, intent(in), optional :: computationalEdgeUWidth(:)
   integer, intent(in), optional :: computationalLWidth(:)
   integer, intent(in), optional :: computationalUWidth(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   integer, intent(in), optional :: undistLBound(:)
   integer, intent(in), optional :: undistUBound(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        7.0.0
                Added arguments indexflag, computationalEdgeLWidth,
                computationalEdgeUWidth, computationalLWidth,
                computationalUWidth, totalLWidth, totalUWidth. These
                arguments were missed in previous versions by mistake.

   DESCRIPTION:

   Create an ESMF_Array object from existing ESMF_LocalArray objects
   according to distgrid. Each PET must issue this call in unison in order
   to create a consistent Array object. The local arrays provided must be
   dimensioned according to the DE-local total region. Bounds of the
   exclusive regions are set as specified in the distgrid argument. Bounds
   for array dimensions that are not distributed can be chosen freely
   using the undistLBound and undistUBound arguments.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank specified in arrayspec, otherwise a
          runtime ESMF error will be raised.

   localarrayList
          List of valid ESMF_LocalArray objects, i.e. memory must be
          associated with the actual arguments. The type/kind/rank
          information of all localarrayList elements must be identical and
          will be used to set Array's properties accordingly. The shape of
          each localarrayList element will be checked against the
          information contained in the distgrid.

   haloSeqIndexList
          One dimensional array containing sequence indices of local halo
          region. The size (and content) of haloSeqIndexList can (and
          typically will) be different on each PET. The haloSeqIndexList
          argument is of integer type, but can be of different kind in
          order to support both 32-bit (ESMF_KIND_I4) and 64-bit
          (ESMF_KIND_I8) indexing.

   [indexflag]
          Indicate how DE-local indices are defined. By default, the
          exclusive region of each DE is placed to start at the local
          index space origin, i.e. (1, 1, ..., 1). Alternatively the
          DE-local index space can be aligned with the global index space,
          if a global index space is well defined by the associated
          DistGrid. See section [1081]54.27 for a list of valid indexflag
          options.

   [datacopyflag]
          Specifies whether the Array object will reference the memory
          allocation of the arrays provided in localarrayList directly, or
          will copy the actual data into new memory allocations. For valid
          values see [1082]54.12. The default is ESMF_DATACOPY_REFERENCE.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in the localarrayList
          elements by specifying the appropriate Array dimension index.
          The default is to map all of distgrid's dimensions against the
          lower dimensions of the localarrayList elements in sequence,
          i.e. distgridToArrayMap = (/1, 2, .../). Unmapped dimensions in
          the localarrayList elements are not decomposed dimensions and
          form a tensor of rank = Array.rank - DistGrid.dimCount. All
          distgridToArrayMap entries must be greater than or equal to zero
          and smaller than or equal to the Array rank. It is erroneous to
          specify the same entry multiple times unless it is zero. If the
          Array rank is less than the DistGrid dimCount then the default
          distgridToArrayMap will contain zeros for the dimCount - rank
          rightmost entries. A zero entry in the distgridToArrayMap
          indicates that the particular DistGrid dimension will be
          replicating the Array across the DEs along this direction.

   [computationalEdgeLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region for DEs that are located on the edge of a tile.

   [computationalEdgeUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region for DEs that are located on the edge of a tile.

   [computationalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region. The default is a zero vector.

   [computationalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region. The default is a zero vector.

   [totalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          total memory region with respect to the lower corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region exactly.

   [totalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          total memory region with respect to the upper corner of the
          exclusive region. The default is a vector that contains the
          remaining number of elements in each direction as to fit the
          union of exclusive and computational region into the memory
          region provided by the localarrayList argument.

   [undistLBound]
          Lower bounds for the array dimensions that are not distributed.
          By default lbound is 1.

   [undistUBound]
          Upper bounds for the array dimensions that are not distributed.
          By default ubound is equal to the extent of the corresponding
          dimension in localarrayList.

   [name]
          Name of the Array object.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.11 ESMF_ArrayCreate - Create Array object from typekind (allocate memory)

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateAllocate(distgrid, typekind, &
     indexflag, pinflag, distgridToArrayMap, computationalEdgeLWidth, &
     computationalEdgeUWidth, computationalLWidth, computationalUWidth, &
     totalLWidth, totalUWidth, undistLBound, undistUBound, name, vm, rc)

   RETURN VALUE:
     type(ESMF_Array) :: ESMF_ArrayCreateAllocate

   ARGUMENTS:
        type(ESMF_DistGrid), intent(in) :: distgrid
        type(ESMF_TypeKind_Flag), intent(in) :: typekind
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
        type(ESMF_Index_Flag), intent(in), optional :: indexflag
        type(ESMF_Pin_Flag), intent(in), optional :: pinflag
        integer, intent(in), optional :: distgridToArrayMap(:)
        integer, intent(in), optional :: computationalEdgeLWidth(:)
        integer, intent(in), optional :: computationalEdgeUWidth(:)
        integer, intent(in), optional :: computationalLWidth(:)
        integer, intent(in), optional :: computationalUWidth(:)
        integer, intent(in), optional :: totalLWidth(:)
        integer, intent(in), optional :: totalUWidth(:)
        integer, intent(in), optional :: undistLBound(:)
        integer, intent(in), optional :: undistUBound(:)
        character (len=*), intent(in), optional :: name
        type(ESMF_VM), intent(in), optional :: vm
        integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        6.3.0r
                Added argument vm to support object creation on a
                different VM than that of the current context.

        8.0.0
                Added argument pinflag to provide access to DE sharing
                between PETs.

   DESCRIPTION:

   Create an ESMF_Array object and allocate uninitialized data space
   according to typekind and distgrid. The Array rank is indirectly
   determined by the incoming information. Each PET must issue this call
   in unison in order to create a consistent Array object. DE-local
   allocations are made according to the total region defined by the
   distgrid and the optional Width arguments.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank specified in arrayspec, otherwise a
          runtime ESMF error will be raised.

   typekind
          The typekind of the Array. See section [1083]54.59 for a list of
          valid typekind options.

   [indexflag]
          Indicate how DE-local indices are defined. By default, the
          exclusive region of each DE is placed to start at the local
          index space origin, i.e. (1, 1, ..., 1). Alternatively the
          DE-local index space can be aligned with the global index space,
          if a global index space is well defined by the associated
          DistGrid. See section [1084]54.27 for a list of valid indexflag
          options.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [1085]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in the newly allocated Array
          object by specifying the appropriate Array dimension index. The
          default is to map all of distgrid's dimensions against the lower
          dimensions of the Array object in sequence, i.e.
          distgridToArrayMap = (/1, 2, .../). Unmapped dimensions in the
          Array object are not decomposed dimensions and form a tensor of
          rank = Array.rank - DistGrid.dimCount. All distgridToArrayMap
          entries must be greater than or equal to zero and smaller than
          or equal to the Array rank. It is erroneous to specify the same
          entry multiple times unless it is zero. If the Array rank is
          less than the DistGrid dimCount then the default
          distgridToArrayMap will contain zeros for the dimCount - rank
          rightmost entries. A zero entry in the distgridToArrayMap
          indicates that the particular DistGrid dimension will be
          replicating the Array across the DEs along this direction.

   [computationalEdgeLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region for DEs that are located on the edge of a tile.

   [computationalEdgeUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region for DEs that are located on the edge of a tile.

   [computationalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region. The default is a zero vector.

   [computationalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region. The default is a zero vector.

   [totalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          total memory region with respect to the lower corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region.

   [totalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          total memory region with respect to the upper corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region.

   [undistLBound]
          Lower bounds for the array dimensions that are not distributed.

   [undistUBound]
          Upper bounds for the array dimensions that are not distributed.

   [name]
          Name of the Array object.

   [vm]
          If present, the Array object is created on the specified ESMF_VM
          object. The default is to create on the VM of the current
          context.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.12 ESMF_ArrayCreate - Create Array object from typekind (allocate memory)
  w/ arbitrary seqIndices for halo

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateAllocateArb<indexkind>(distgrid, typekind, &
   haloSeqIndexList, pinflag, distgridToArrayMap, &
   undistLBound, undistUBound, name, rc)

   RETURN VALUE:
   type(ESMF_Array) :: ESMF_ArrayCreateAllocateArb

   ARGUMENTS:
   type(ESMF_DistGrid), intent(in) :: distgrid
   type(ESMF_TypeKind_Flag), intent(in) :: typekind
   integer(ESMF_KIND_<indexkind>), intent(in) :: haloSeqIndexList(:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_Pin_Flag), intent(in), optional :: pinflag
   integer, intent(in), optional :: distgridToArrayMap(:)
   integer, intent(in), optional :: undistLBound(:)
   integer, intent(in), optional :: undistUBound(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        8.0.0
                Added argument pinflag to provide access to DE sharing
                between PETs.

   DESCRIPTION:

   Create an ESMF_Array object and allocate uninitialized data space
   according to typekind and distgrid. The Array rank is indirectly
   determined by the incoming information. Each PET must issue this call
   in unison in order to create a consistent Array object. DE-local
   allocations are made according to the total region defined by the
   distgrid and haloSeqIndexList arguments.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank specified in arrayspec, otherwise a
          runtime ESMF error will be raised.

   typekind
          The typekind of the Array. See section [1086]54.59 for a list of
          valid typekind options.

   haloSeqIndexList
          One dimensional array containing sequence indices of local halo
          region. The size (and content) of haloSeqIndexList can (and
          typically will) be different on each PET. The haloSeqIndexList
          argument is of integer type, but can be of different kind in
          order to support both 32-bit (ESMF_KIND_I4) and 64-bit
          (ESMF_KIND_I8) indexing.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [1087]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in the newly allocated Array
          object by specifying the appropriate Array dimension index. The
          default is to map all of distgrid's dimensions against the lower
          dimensions of the Array object in sequence, i.e.
          distgridToArrayMap = (/1, 2, .../). Unmapped dimensions in the
          Array object are not decomposed dimensions and form a tensor of
          rank = Array.rank - DistGrid.dimCount. All distgridToArrayMap
          entries must be greater than or equal to zero and smaller than
          or equal to the Array rank. It is erroneous to specify the same
          entry multiple times unless it is zero. If the Array rank is
          less than the DistGrid dimCount then the default
          distgridToArrayMap will contain zeros for the dimCount - rank
          rightmost entries. A zero entry in the distgridToArrayMap
          indicates that the particular DistGrid dimension will be
          replicating the Array across the DEs along this direction.

   [undistLBound]
          Lower bounds for the array dimensions that are not distributed.

   [undistUBound]
          Upper bounds for the array dimensions that are not distributed.

   [name]
          Name of the Array object.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.13 ESMF_ArrayCreate - Create Array object from ArraySpec (allocate
  memory)

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateAllocateAS(distgrid, arrayspec, &
     indexflag, pinflag, distgridToArrayMap, computationalEdgeLWidth, &
     computationalEdgeUWidth, computationalLWidth, computationalUWidth, &
     totalLWidth, totalUWidth, undistLBound, undistUBound, name, vm, rc)

   RETURN VALUE:
     type(ESMF_Array) :: ESMF_ArrayCreateAllocateAS

   ARGUMENTS:
        type(ESMF_DistGrid), intent(in) :: distgrid
        type(ESMF_ArraySpec), intent(in) :: arrayspec
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
        type(ESMF_Index_Flag), intent(in), optional :: indexflag
        type(ESMF_Pin_Flag), intent(in), optional :: pinflag
        integer, intent(in), optional :: distgridToArrayMap(:)
        integer, intent(in), optional :: computationalEdgeLWidth(:)
        integer, intent(in), optional :: computationalEdgeUWidth(:)
        integer, intent(in), optional :: computationalLWidth(:)
        integer, intent(in), optional :: computationalUWidth(:)
        integer, intent(in), optional :: totalLWidth(:)
        integer, intent(in), optional :: totalUWidth(:)
        integer, intent(in), optional :: undistLBound(:)
        integer, intent(in), optional :: undistUBound(:)
        character (len=*), intent(in), optional :: name
        type(ESMF_VM), intent(in), optional :: vm
        integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        6.3.0r
                Added argument vm to support object creation on a
                different VM than that of the current context.

        8.0.0
                Added argument pinflag to provide access to DE sharing
                between PETs.

   DESCRIPTION:

   Create an ESMF_Array object and allocate uninitialized data space
   according to arrayspec and distgrid. Each PET must issue this call with
   identical arguments in order to create a consistent Array object.
   DE-local allocations are made according to the total region defined by
   the arguments to this call: distgrid and the optional Width arguments.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank specified in arrayspec, otherwise a
          runtime ESMF error will be raised.

   arrayspec
          ESMF_ArraySpec object containing the type/kind/rank information.

   [indexflag]
          Indicate how DE-local indices are defined. By default, the
          exclusive region of each DE is placed to start at the local
          index space origin, i.e. (1, 1, ..., 1). Alternatively the
          DE-local index space can be aligned with the global index space,
          if a global index space is well defined by the associated
          DistGrid. See section [1088]54.27 for a list of valid indexflag
          options.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [1089]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in the newly allocated Array
          object by specifying the appropriate Array dimension index. The
          default is to map all of distgrid's dimensions against the lower
          dimensions of the Array object in sequence, i.e.
          distgridToArrayMap = (/1, 2, .../). Unmapped dimensions in the
          Array object are not decomposed dimensions and form a tensor of
          rank = Array.rank - DistGrid.dimCount. All distgridToArrayMap
          entries must be greater than or equal to zero and smaller than
          or equal to the Array rank. It is erroneous to specify the same
          entry multiple times unless it is zero. If the Array rank is
          less than the DistGrid dimCount then the default
          distgridToArrayMap will contain zeros for the dimCount - rank
          rightmost entries. A zero entry in the distgridToArrayMap
          indicates that the particular DistGrid dimension will be
          replicating the Array across the DEs along this direction.

   [computationalEdgeLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region for DEs that are located on the edge of a tile.

   [computationalEdgeUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region for DEs that are located on the edge of a tile.

   [computationalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          computational region with respect to the lower corner of the
          exclusive region. The default is a zero vector.

   [computationalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          computational region with respect to the upper corner of the
          exclusive region. The default is a zero vector.

   [totalLWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the lower corner of the
          total memory region with respect to the lower corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region.

   [totalUWidth]
          This vector argument must have dimCount elements, where dimCount
          is specified in distgrid. It specifies the upper corner of the
          total memory region with respect to the upper corner of the
          exclusive region. The default is to accommodate the union of
          exclusive and computational region.

   [undistLBound]
          Lower bounds for the array dimensions that are not distributed.

   [undistUBound]
          Upper bounds for the array dimensions that are not distributed.

   [name]
          Name of the Array object.

   [vm]
          If present, the Array object is created on the specified ESMF_VM
          object. The default is to create on the VM of the current
          context.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.14 ESMF_ArrayCreate - Create Array object from ArraySpec (allocate
  memory) w/ arbitrary seqIndices for halo

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateAllocateASArb<indexkind>(distgrid, arrayspec, &
   haloSeqIndexList, pinflag, distgridToArrayMap, &
   undistLBound, undistUBound, name, rc)

   RETURN VALUE:
   type(ESMF_Array) :: ESMF_ArrayCreateAllocateASArb

   ARGUMENTS:
   type(ESMF_DistGrid), intent(in) :: distgrid
   type(ESMF_ArraySpec), intent(in) :: arrayspec
   integer(ESMF_KIND_<indexkind>), intent(in) :: haloSeqIndexList(:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_Pin_Flag), intent(in), optional :: pinflag
   integer, intent(in), optional :: distgridToArrayMap(:)
   integer, intent(in), optional :: undistLBound(:)
   integer, intent(in), optional :: undistUBound(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        8.0.0
                Added argument pinflag to provide access to DE sharing
                between PETs.

   DESCRIPTION:

   Create an ESMF_Array object and allocate uninitialized data space
   according to arrayspec and distgrid. Each PET must issue this call in
   unison in order to create a consistent Array object. DE-local
   allocations are made according to the total region defined by the
   arguments to this call: distgrid and haloSeqIndexList arguments.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   distgrid
          ESMF_DistGrid object that describes how the array is decomposed
          and distributed over DEs. The dimCount of distgrid must be
          smaller or equal to the rank specified in arrayspec, otherwise a
          runtime ESMF error will be raised.

   arrayspec
          ESMF_ArraySpec object containing the type/kind/rank information.

   haloSeqIndexList
          One dimensional array containing sequence indices of local halo
          region. The size (and content) of haloSeqIndexList can (and
          typically will) be different on each PET. The haloSeqIndexList
          argument is of integer type, but can be of different kind in
          order to support both 32-bit (ESMF_KIND_I4) and 64-bit
          (ESMF_KIND_I8) indexing.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [1090]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [distgridToArrayMap]
          List that contains as many elements as is indicated by
          distgrids's dimCount. The list elements map each dimension of
          the DistGrid object to a dimension in the newly allocated Array
          object by specifying the appropriate Array dimension index. The
          default is to map all of distgrid's dimensions against the lower
          dimensions of the Array object in sequence, i.e.
          distgridToArrayMap = (/1, 2, .../). Unmapped dimensions in the
          Array object are not decomposed dimensions and form a tensor of
          rank = Array.rank - DistGrid.dimCount. All distgridToArrayMap
          entries must be greater than or equal to zero and smaller than
          or equal to the Array rank. It is erroneous to specify the same
          entry multiple times unless it is zero. If the Array rank is
          less than the DistGrid dimCount then the default
          distgridToArrayMap will contain zeros for the dimCount - rank
          rightmost entries. A zero entry in the distgridToArrayMap
          indicates that the particular DistGrid dimension will be
          replicating the Array across the DEs along this direction.

   [undistLBound]
          Lower bounds for the array dimensions that are not distributed.

   [undistUBound]
          Upper bounds for the array dimensions that are not distributed.

   [name]
          Name of the Array object.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  28.5.15 ESMF_ArrayCreate - Create Array object as copy of existing Array
  object

   INTERFACE:
   ! Private name; call using ESMF_ArrayCreate()
   function ESMF_ArrayCreateCopy(array, datacopyflag, delayout, rc)

   RETURN VALUE:
     type(ESMF_Array) :: ESMF_ArrayCreateCopy

   ARGUMENTS:
        type(ESMF_Array), intent(in) :: array
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
        type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
        type(ESMF_DELayout), intent(in), optional :: delayout
        integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        8.1.0
                Added argument datacopyflag to select between different
                copy options.
                Added argument delayout to create Array with different
                localDe -> DE mapping. This is identical to a change in DE
                -> PET mapping.

   DESCRIPTION:

   Create an ESMF_Array object as the copy of an existing Array.

   The return value is the newly created ESMF_Array object.

   The arguments are:

   array
          ESMF_Array object to be copied.

   [datacopyflag]
          Specifies whether the created Array object references the memory
          allocation provided by array directly or copies the data from
          array into a new memory allocation. For valid values see
          [1091]54.12. The default is ESMF_DATACOPY_VALUE.

   [delayout]
          If present, override the DELayout of the incoming distgrid. By
          default use the DELayout defined in distgrid.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

