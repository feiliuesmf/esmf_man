  45.5.5 ESMF_ClockCreate - Create a new ESMF Clock

   INTERFACE:
       ! Private name; call using ESMF_ClockCreate()
       function ESMF_ClockCreateNew(timeStep, startTime, &
         stopTime, runDuration, runTimeStepCount, refTime, name, rc)

   RETURN VALUE:
       type(ESMF_Clock) :: ESMF_ClockCreateNew

   ARGUMENTS:
       type(ESMF_TimeInterval), intent(in)            :: timeStep
       type(ESMF_Time),         intent(in)            :: startTime
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
       type(ESMF_Time),         intent(in),  optional :: stopTime
       type(ESMF_TimeInterval), intent(in),  optional :: runDuration
       integer,                 intent(in),  optional :: runTimeStepCount
       type(ESMF_Time),         intent(in),  optional :: refTime
       character (len=*),       intent(in),  optional :: name
       integer,                 intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Creates and sets the initial values in a new ESMF_Clock.

   The arguments are:

   timeStep
          The ESMF_Clock's time step interval, which can be positive or
          negative.

   startTime
          The ESMF_Clock's starting time. Can be less than or or greater
          than stopTime, depending on a positive or negative timeStep,
          respectively, and whether a stopTime is specified; see below.

   [stopTime]
          The ESMF_Clock's stopping time. Can be greater than or less than
          the startTime, depending on a positive or negative timeStep,
          respectively. If neither stopTime, runDuration, nor
          runTimeStepCount is specified, clock runs "forever"; user must
          use other means to know when to stop (e.g. ESMF_Alarm or
          ESMF_ClockGet(clock, currTime)). Mutually exclusive with
          runDuration and runTimeStepCount.

   [runDuration]
          Alternative way to specify ESMF_Clock's stopping time; stopTime
          = startTime + runDuration. Can be positive or negative,
          consistent with the timeStep's sign. Mutually exclusive with
          stopTime and runTimeStepCount.

   [runTimeStepCount]
          Alternative way to specify ESMF_Clock's stopping time; stopTime
          = startTime + (runTimeStepCount * timeStep). stopTime can be
          before startTime if timeStep is negative. Mutually exclusive
          with stopTime and runDuration.

   [refTime]
          The ESMF_Clock's reference time. Provides reference point for
          simulation time (see currSimTime in ESMF_ClockGet() below).

   [name]
          The name for the newly created clock. If not specified, a
          default unique name will be generated: "ClockNNN" where NNN is a
          unique sequence number from 001 to 999.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  45.5.6 ESMF_ClockCreate - Create a copy of an existing ESMF Clock

   INTERFACE:
       ! Private name; call using ESMF_ClockCreate()
       function ESMF_ClockCreateCopy(clock, rc)

   RETURN VALUE:
       type(ESMF_Clock) :: ESMF_ClockCreateCopy

   ARGUMENTS:
       type(ESMF_Clock), intent(in)            :: clock
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
       integer,          intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Creates a deep copy of a given ESMF_Clock, but does not copy its list
   of ESMF_Alarms (pointers), since an ESMF_Alarm can only be associated
   with one ESMF_Clock. Hence, the returned ESMF_Clock copy has no
   associated ESMF_Alarms, the same as with a newly created ESMF_Clock. If
   desired, new ESMF_Alarms must be created and associated with this
   copied ESMF_Clock via ESMF_AlarmCreate(), or existing ESMF_Alarms must
   be re-associated with this copied ESMF_Clock via
   ESMF_AlarmSet(...clock=...).

   The arguments are:

   clock
          The ESMF_Clock to copy.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

