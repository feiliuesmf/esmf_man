  26.6.67 ESMF_FieldRegridStore - Precompute a Field regridding operation and
  return a RouteHandle and weights

   INTERFACE:
   !   Private name; call using ESMF_FieldRegridStore()
       subroutine ESMF_FieldRegridStoreNX(srcField, dstField, &
                     srcMaskValues, dstMaskValues, &
                     regridmethod, &
                     polemethod, regridPoleNPnts, &
                     lineType, &
                     normType, &
                     extrapMethod, &
                     extrapNumSrcPnts, &
                     extrapDistExponent, &
                     extrapNumLevels, &
                     unmappedaction, ignoreDegenerate, &
                     srcTermProcessing, &
                     pipeLineDepth, &
                     routehandle, &
                     factorList, factorIndexList, &
                     weights, indices, &  ! DEPRECATED ARGUMENTS
                     srcFracField, dstFracField, &
                     dstStatusField, &
                     unmappedDstList, &
                     checkFlag, &
                     rc)

   ARGUMENTS:
       type(ESMF_Field),               intent(in)              :: srcField
       type(ESMF_Field),               intent(inout)           :: dstField
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
       integer(ESMF_KIND_I4),          intent(in),    optional :: srcMaskValues(
:)
       integer(ESMF_KIND_I4),          intent(in),    optional :: dstMaskValues(
:)
       type(ESMF_RegridMethod_Flag),   intent(in),    optional :: regridmethod
       type(ESMF_PoleMethod_Flag),     intent(in),    optional :: polemethod
       integer,                        intent(in),    optional :: regridPoleNPnt
s
       type(ESMF_LineType_Flag),       intent(in),    optional :: lineType
       type(ESMF_NormType_Flag),       intent(in),    optional :: normType
       type(ESMF_ExtrapMethod_Flag),   intent(in),    optional :: extrapMethod
       integer,                        intent(in),    optional :: extrapNumSrcPn
ts
       real(ESMF_KIND_R4),             intent(in),    optional :: extrapDistExpo
nent
       integer,                        intent(in),    optional :: extrapNumLevel
s
       type(ESMF_UnmappedAction_Flag), intent(in),    optional :: unmappedaction
       logical,                        intent(in),    optional :: ignoreDegenera
te
       integer,                        intent(inout), optional :: srcTermProcess
ing
       integer,                        intent(inout), optional :: pipeLineDepth
       type(ESMF_RouteHandle),         intent(inout), optional :: routehandle
       real(ESMF_KIND_R8),             pointer,       optional :: factorList(:)
       integer(ESMF_KIND_I4),          pointer,       optional :: factorIndexLis
t(:,:)
       real(ESMF_KIND_R8),    pointer, optional :: weights(:)   ! DEPRECATED ARG
       integer(ESMF_KIND_I4), pointer, optional :: indices(:,:) ! DEPRECATED ARG
       type(ESMF_Field),               intent(inout), optional :: srcFracField
       type(ESMF_Field),               intent(inout), optional :: dstFracField
       type(ESMF_Field),               intent(inout), optional :: dstStatusField
       integer(ESMF_KIND_I4),          pointer,       optional :: unmappedDstLis
t(:)
       logical,                        intent(in),    optional :: checkFlag
       integer,                        intent(out),   optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        5.2.0rp1
                Added arguments factorList and factorIndexList. Started to
                deprecate arguments weights and indices. This corrects an
                inconsistency of this interface with all other ESMF
                methods that take these same arguments.

        6.1.0
                Added arguments ignoreDegenerate, srcTermProcessing,
                pipelineDepth, and unmappedDstList. The argument
                ignoreDegenerate allows the user to skip degenerate cells
                in the regridding instead of stopping with an error. The
                two arguments srcTermProcessing and pipelineDepth provide
                access to the tuning parameters affecting the sparse
                matrix execution. The argument unmappedDstList allows the
                user to get a list of the destination items which the
                regridding couldn't map to a source.

        6.3.0r
                Added argument lineType. This argument allows the user to
                control the path of the line between two points on a
                sphere surface. This allows the user to use their
                preferred line path for the calculation of distances and
                the shape of cells during regrid weight calculation on a
                sphere.

        6.3.0rp1
                Added argument normType. This argument allows the user to
                control the type of normalization done during conservative
                weight generation.

        7.1.0r
                Added argument dstStatusField. This argument allows the
                user to receive information about what happened to each
                location in the destination Field during regridding.

                Added arguments extrapMethod, extrapNumSrcPnts, and
                extrapDistExponent. These three new extrapolation
                arguments allow the user to extrapolate destination points
                not mapped by the regrid method. extrapMethod allows the
                user to choose the extrapolation method. extrapNumSrcPnts
                and extrapDistExponent are parameters that allow the user
                to tune the behavior of the
                ESMF_EXTRAPMETHOD_NEAREST_IDAVG method.

        8.0.0
                Added argument extrapNumLevels. For level based
                extrapolation methods (e.g. ESMF_EXTRAPMETHOD_CREEP) this
                argument allows the user to set how many levels to
                extrapolate.

        8.1.0
                Added argument checkFlag to enable the user to turn on
                more expensive error checking during regrid weight
                calculation.

   DESCRIPTION:

   Creates a sparse matrix operation (stored in routehandle) that contains
   the calculations and communications necessary to interpolate from
   srcField to dstField. The routehandle can then be used in the call
   ESMF_FieldRegrid() to interpolate between the Fields. The user may also
   get the interpolation matrix in sparse matrix form via the optional
   arguments factorList and factorIndexList.

   The routehandle generated by this call is based just on the coordinates
   in the spatial class (e.g. Grid) contained in the Fields. If those
   coordinates don't change the routehandle can be used repeatedly to
   interpolate from the source Field to the destination Field. This is
   true even if the data in the Fields changes. The routehandle may also
   be used to interpolate between any source and destination Field which
   are created on the same location in the same Grid, LocStream, XGrid, or
   Mesh as the original Fields.

   When it's no longer needed the routehandle should be destroyed by using
   ESMF_FieldRegridRelease() to free the memory it's using.

   Note, as a side effect, that this call may change the data in dstField.
   If this is undesirable, then an easy work around is to create a second
   temporary field with the same structure as dstField and pass that in
   instead.

   The arguments are:

   srcField
          Source Field.

   dstField
          Destination Field. The data in this Field may be overwritten by
          this call.

   [srcMaskValues]
          Mask information can be set in the Grid (see [986]31.3.17) or
          Mesh (see [987]33.3.11) upon which the srcField is built. The
          srcMaskValues argument specifies the values in that mask
          information which indicate a source point should be masked out.
          In other words, a locati on is masked if and only if the value
          for that location in the mask information matches one of the
          values listed in srcMaskValues. If srcMaskValues is not
          specified, no masking will occur.

   [dstMaskValues]
          Mask information can be set in the Grid (see [988]31.3.17) or
          Mesh (see [989]33.3.11) upon which the dstField is built. The
          dstMaskValues argument specifies the values in that mask
          information which indicate a destination point should be masked
          out. In other words, a location is masked if and only if the
          value for that location in the mask information matches one of
          the values listed in dstMaskValues. If dstMaskValues is not
          specified, no masking will occur.

   [regridmethod]
          The type of interpolation. Please see Section [990]54.49 for a
          list of valid options. If not specified, defaults to
          ESMF_REGRIDMETHOD_BILINEAR.

   [polemethod]
          Specifies the type of pole to construct on the source Grid
          during regridding. Please see Section [991]54.46 for a list of
          valid options. If not specified, defaults to
          ESMF_POLEMETHOD_ALLAVG for non-conservative regrid methods, and
          ESMF_POLEMETHOD_NONE for conservative methods.

   [regridPoleNPnts]
          If polemethod is ESMF_POLEMETHOD_NPNTAVG, then this parameter
          indicates the number of points over which to average. If
          polemethod is not ESMF_POLEMETHOD_NPNTAVG and regridPoleNPnts is
          specified, then it will be ignored. This subroutine will return
          an error if polemethod is ESMF_POLEMETHOD_NPNTAVG and
          regridPoleNPnts is not specified.

   [lineType]
          This argument controls the path of the line which connects two
          points on a sphere surface. This in turn controls the path along
          which distances are calculated and the shape of the edges that
          make up a cell. Both of these quantities can influence how
          interpolation weights are calculated. As would be expected, this
          argument is only applicable when srcField and dstField are built
          on grids which lie on the surface of a sphere.
          Section [992]54.34 shows a list of valid options for this
          argument. Figure [993]24.2.16 shows which line types are
          supported for each regrid method as well as showing the default
          line type by regrid method. If not specified, defaults to
          ESMF_LINETYPE_CART for non-conservative regrid methods, and
          ESMF_LINETYPE_GREAT_CIRCLE for conservative methods.

   [normType]
          This argument controls the type of normalization used when
          generating conservative weights. This option only applies to
          weights generated with regridmethod=ESMF_REGRIDMETHOD_CONSERVE
          or regridmethod=ESMF_REGRIDMETHOD_CONSERVE_2ND Please see
          Section [994]54.43 for a list of valid options. If not specified
          normType defaults to ESMF_NORMTYPE_DSTAREA.

   [extrapMethod]
          The type of extrapolation. Please see Section [995]54.17 for a
          list of valid options. If not specified, defaults to
          ESMF_EXTRAPMETHOD_NONE.

   [extrapNumSrcPnts]
          The number of source points to use for the extrapolation methods
          that use more than one source point (e.g.
          ESMF_EXTRAPMETHOD_NEAREST_IDAVG). If not specified, defaults to
          8.

   [extrapDistExponent]
          The exponent to raise the distance to when calculating weights
          for the ESMF_EXTRAPMETHOD_NEAREST_IDAVG extrapolation method. A
          higher value reduces the influence of more distant points. If
          not specified, defaults to 2.0.

   [extrapNumLevels]
          The number of levels to output for the extrapolation methods
          that fill levels (e.g. ESMF_EXTRAPMETHOD_CREEP). When a method
          is used that requires this, then an error will be returned, if
          it is not specified.

   [unmappedaction]
          Specifies what should happen if there are destination points
          that can't be mapped to a source cell. Please see
          Section [996]54.60 for a list of valid options. If not
          specified, unmappedaction defaults to ESMF_UNMAPPEDACTION_ERROR.

   [ignoreDegenerate]
          Ignore degenerate cells when checking for errors. If this is set
          to true, then the regridding proceeds, but degenerate cells will
          be skipped. If set to false, a degenerate cell produces an
          error. If not specified, ignoreDegenerate defaults to false.

   [srcTermProcessing]
          The srcTermProcessing parameter controls how many source terms,
          located on the same PET and summing into the same destination
          element, are summed into partial sums on the source PET before
          being transferred to the destination PET. A value of 0 indicates
          that the entire arithmetic is done on the destination PET;
          source elements are neither multiplied by their factors nor
          added into partial sums before being sent off by the source PET.
          A value of 1 indicates that source elements are multiplied by
          their factors on the source side before being sent to the
          destination PET. Larger values of srcTermProcessing indicate the
          maximum number of terms in the partial sums on the source side.

          Note that partial sums may lead to bit-for-bit differences in
          the results. See section [997]37.2.1 for an in-depth discussion
          of all bit-for-bit reproducibility aspects related to
          route-based communication methods.

          The ESMF_FieldRegridStore() method implements an auto-tuning
          scheme for the srcTermProcessing parameter. The intent on the
          srcTermProcessing argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the
          srcTermProcessing parameter, and the auto-tuning phase is
          skipped. In this case the srcTermProcessing argument is not
          modified on return. If the provided argument is $< 0$ , the
          srcTermProcessing parameter is determined internally using the
          auto-tuning scheme. In this case the srcTermProcessing argument
          is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional srcTermProcessing
          argument is omitted.

   [pipelineDepth]
          The pipelineDepth parameter controls how many messages a PET may
          have outstanding during a sparse matrix exchange. Larger values
          of pipelineDepth typically lead to better performance. However,
          on some systems too large a value may lead to performance
          degradation, or runtime errors.

          Note that the pipeline depth has no effect on the bit-for-bit
          reproducibility of the results. However, it may affect the
          performance reproducibility of the exchange.

          The ESMF_FieldRegridStore() method implements an auto-tuning
          scheme for the pipelineDepth parameter. The intent on the
          pipelineDepth argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the pipelineDepth
          parameter, and the auto-tuning phase is skipped. In this case
          the pipelineDepth argument is not modified on return. If the
          provided argument is $< 0$ , the pipelineDepth parameter is
          determined internally using the auto-tuning scheme. In this case
          the pipelineDepth argument is re-set to the internally
          determined value on return. Auto-tuning is also used if the
          optional pipelineDepth argument is omitted.

   [routehandle]
          The communication handle that implements the regrid operation
          and that can be used later in the ESMF_FieldRegrid() call. The
          routehandle is optional so that if the user doesn't need it,
          then they can indicate that by not requesting it. The time to
          compute the routehandle can be a significant fraction of the
          time taken by this method, so if it's not needed then not
          requesting it is worthwhile.

   [factorList]
          The list of coefficients for a sparse matrix which interpolates
          from srcField to dstField. The array coming out of this variable
          is in the appropriate format to be used in other ESMF sparse
          matrix multiply calls, for example ESMF_FieldSMMStore(). The
          factorList array is allocated by the method and the user is
          responsible for deallocating it.

   [factorIndexList]
          The indices for a sparse matrix which interpolates from srcField
          to dstField. This argument is a 2D array containing pairs of
          source and destination sequence indices corresponding to the
          coefficients in the factorList argument. The first dimension of
          factorIndexList is of size 2. factorIndexList(1,:) specifies the
          sequence index of the source element in the srcField.
          factorIndexList(2,:) specifies the sequence index of the
          destination element in the dstField. The se cond dimension of
          factorIndexList steps through the list of pairs, i.e.
          size(factorIndexList,2)==size(factorList). The array coming out
          of this variable is in the appropriate format to be used in
          other ESMF sparse matrix multiply calls, for example
          ESMF_FieldSMMStore(). The factorIndexList array is allocated by
          the method and the user is responsible for deallocating it.

   [weights]
          DEPRECATED ARGUMENT! Please use the argument factorList instead.

   [indices]
          DEPRECATED ARGUMENT! Please use the argument factorIndexList
          instead.

   [srcFracField]
          The fraction of each source cell participating in the
          regridding. Only valid when regridmethod is
          ESMF_REGRIDMETHOD_CONSERVE or
          regridmethod=ESMF_REGRIDMETHOD_CONSERVE_2ND. This Field needs to
          be created on the same location (e.g staggerloc) as the
          srcField.

   [dstFracField]
          The fraction of each destination cell participating in the
          regridding. Only valid when regridmethod is
          ESMF_REGRIDMETHOD_CONSERVE or
          regridmethod=ESMF_REGRIDMETHOD_CONSERVE_2ND. This Field needs to
          be created on the same location (e.g staggerloc) as the
          dstField. It is important to note that the current
          implementation of conservative regridding doesn't normalize the
          interpolation weights by the destination fraction. This means
          that for a destination grid which only partially overlaps the
          source grid the destination field which is output from the
          regrid operation should be divided by the corresponding
          destination fraction to yield the true interpolated values for
          cells which are only partially covered by the source grid.

   [dstStatusField]
          An ESMF Field which outputs a regrid status value for each
          destination location. Section [998]54.50 indicates the meaning
          of each value. The Field needs to be built on the same location
          (e.g. staggerloc) in the same Grid, Mesh, XGrid, or LocStream as
          the dstField argument. The Field also needs to be of typekind
          ESMF_TYPEKIND_I4. This option currently doesn't work with the
          ESMF_REGRIDMETHOD_NEAREST_DTOS regrid method.

   [unmappedDstList]
          The list of the sequence indices for locations in dstField which
          couldn't be mapped the srcField. The list on each PET only
          contains the unmapped locations for the piece of the dstField on
          that PET. If a destination point is masked, it won't be put in
          this list. This option currently doesn't work with the
          ESMF_REGRIDMETHOD_NEAREST_DTOS regrid method.

   [checkFlag]
          If set to .FALSE. (default) only quick error checking will be
          performed. If set to .TRUE. more expensive error checking will
          be performed, possibly catching more errors. Set checkFlag to
          .FALSE. to achieve highest performance. The checkFlag currently
          only turns on checking for conservative regrid methods (e.g.
          ESMF_REGRIDMETHOD_CONSERVE).

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.68 ESMF_FieldRegridStore - Precompute a Field regridding operation
  between an XGrid and one of its side Grids or Meshes

   INTERFACE:
   !   Private name; call using ESMF_FieldRegridStore()
     subroutine ESMF_FieldRegridStoreX(xgrid, srcField, dstField, &
                     regridmethod, &
                     srcTermProcessing, pipeLineDepth, &
                     routehandle, &
                     srcFracField, dstFracField, &
                     srcMergeFracField, dstMergeFracField, rc)

   ARGUMENTS:
       type(ESMF_XGrid),       intent(in)                      :: xgrid
       type(ESMF_Field),       intent(in)                      :: srcField
       type(ESMF_Field),       intent(inout)                   :: dstField
       type(ESMF_KeywordEnforcer), optional                    :: keywordEnforce
r ! must use keywords below
       type(ESMF_RegridMethod_Flag),   intent(in),    optional :: regridmethod
       integer,                        intent(inout), optional :: srcTermProcess
ing
       integer,                        intent(inout), optional :: pipeLineDepth
       type(ESMF_RouteHandle), intent(inout), optional         :: routehandle
       type(ESMF_Field),       intent(inout), optional         :: srcFracField
       type(ESMF_Field),       intent(inout), optional         :: dstFracField
       type(ESMF_Field),       intent(inout), optional         :: srcMergeFracFi
eld
       type(ESMF_Field),       intent(inout), optional         :: dstMergeFracFi
eld
       integer,                intent(out),   optional         :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        5.3.0
                Added arguments srcFracField, dstFracField,
                srcMergeFracField, and dstMergeFracField. These fraction
                Fields allow a user to calculate correct flux regridded
                through ESMF_XGrid.

        7.1.0r
                Added argument regridmethod. This new argument allows the
                user to choose the regrid method to apply when computing
                the routehandle.

   DESCRIPTION:

   This method creates a RouteHandle to do conservative interpolation
   specifically between a Field built on an XGrid and a Field build on one
   of the Grids or Meshes used to create that XGrid. (To do more general
   interpolation use the ESMF_FieldRegridStore() method in
   section [999]26.6.67.) The RouteHandle produced by this method can then
   be used in the call ESMF_FieldRegrid() to interpolate from the srcField
   to the dstField.

   The RouteHandle generated by this call is based just on the coordinates
   in the Grids, XGrids, or Meshes contained in the Fields. If those
   coordinates don't change the RouteHandle can be used repeatedly to
   interpolate from the source Field to the destination Field. This is
   true even if the data in the Fields changes. The RouteHandle may also
   be used to interpolate between any source and destination Field which
   are created on the same Grid, XGrid, or Mesh as the original Fields.

   When it's no longer needed the RouteHandle should be destroyed by using
   ESMF_FieldRegridRelease() to free the memory it's using.

   Note, as a side effect, that this call may change the data in dstField.
   If this is undesirable, then an easy work around is to create a second
   temporary Field with the same structure as dstField and pass that in
   instead.

   The arguments are:

   xgrid
          Exchange Grid.

   srcField
          Source Field built on either xgrid or one of the Grids or Meshes
          used to create xgrid.

   dstField
          Destination Field built on either xgrid or one of the Grids or
          Meshes used to create xgrid. The data in this Field may be
          overwritten by this call.

   [regridmethod]
          The type of interpolation. For this method only
          ESMF_REGRIDMETHOD_CONSERVE and ESMF_REGRIDMETHOD_CONSERVE_2ND
          are supported. If not specified, defaults to
          ESMF_REGRIDMETHOD_CONSERVE.

   [srcTermProcessing]
          The srcTermProcessing parameter controls how many source terms,
          located on the same PET and summing into the same destination
          element, are summed into partial sums on the source PET before
          being transferred to the destination PET. A value of 0 indicates
          that the entire arithmetic is done on the destination PET;
          source elements are neither multiplied by their factors nor
          added into partial sums before being sent off by the source PET.
          A value of 1 indicates that source elements are multiplied by
          their factors on the source side before being sent to the
          destination PET. Larger values of srcTermProcessing indicate the
          maximum number of terms in the partial sums on the source side.

          Note that partial sums may lead to bit-for-bit differences in
          the results. See section [1000]37.2.1 for an in-depth discussion
          of all bit-for-bit reproducibility aspects related to
          route-based communication methods.

          The ESMF_FieldRegridStore() method implements an auto-tuning
          scheme for the srcTermProcessing parameter. The intent on the
          srcTermProcessing argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the
          srcTermProcessing parameter, and the auto-tuning phase is
          skipped. In this case the srcTermProcessing argument is not
          modified on return. If the provided argument is $< 0$ , the
          srcTermProcessing parameter is determined internally using the
          auto-tuning scheme. In this case the srcTermProcessing argument
          is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional srcTermProcessing
          argument is omitted.

   [pipelineDepth]
          The pipelineDepth parameter controls how many messages a PET may
          have outstanding during a sparse matrix exchange. Larger values
          of pipelineDepth typically lead to better performance. However,
          on some systems too large a value may lead to performance
          degradation, or runtime errors.

          Note that the pipeline depth has no effect on the bit-for-bit
          reproducibility of the results. However, it may affect the
          performance reproducibility of the exchange.

          The ESMF_FieldRegridStore() method implements an auto-tuning
          scheme for the pipelineDepth parameter. The intent on the
          pipelineDepth argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the pipelineDepth
          parameter, and the auto-tuning phase is skipped. In this case
          the pipelineDepth argument is not modified on return. If the
          provided argument is $< 0$ , the pipelineDepth parameter is
          determined internally using the auto-tuning scheme. In this case
          the pipelineDepth argument is re-set to the internally
          determined value on return. Auto-tuning is also used if the
          optional pipelineDepth argument is omitted.

   [routehandle]
          The handle that implements the regrid and that can be used in
          later ESMF_FieldRegrid.

   [srcFracField]
          The fraction of each source cell participating in the regridding
          returned from this call. This Field needs to be created on the
          same Grid and location (e.g staggerloc) as the srcField.

   [dstFracField]
          The fraction of each destination cell participating in the
          regridding returned from this call. This Field needs to be
          created on the same Grid and location (e.g staggerloc) as the
          dstField.

   [srcMergeFracField]
          The fraction of each source cell as a result of Grid merge
          returned from this call. This Field needs to be created on the
          same Grid and location (e.g staggerloc) as the srcField.

   [dstMergeFracField]
          The fraction of each destination cell as a result of Grid merge
          returned from this call. This Field needs to be created on the
          same Grid and location (e.g staggerloc) as the dstField.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

