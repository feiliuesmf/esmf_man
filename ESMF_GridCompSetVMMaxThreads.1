  17.4.26 ESMF_GridCompSetVMMaxThreads - Set multi-threaded PETs in GridComp VM

   INTERFACE:
   subroutine ESMF_GridCompSetVMMaxThreads(gridcomp, &
     maxPetCountPerVas, prefIntraProcess, prefIntraSsi, prefInterSsi, &
     pthreadMinStackSize, forceChildPthreads, rc)

   ARGUMENTS:
     type(ESMF_GridComp), intent(inout)         :: gridcomp
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     integer,             intent(in),  optional :: maxPetCountPerVas
     integer,             intent(in),  optional :: prefIntraProcess
     integer,             intent(in),  optional :: prefIntraSsi
     integer,             intent(in),  optional :: prefInterSsi
     integer,             intent(in),  optional :: pthreadMinStackSize
     logical,             intent(in),  optional :: forceChildPthreads
     integer,             intent(out), optional :: rc

   DESCRIPTION:

   Set characteristics of the ESMF_VM for this ESMF_GridComp. Attempts to
   provide maxPetCountPerVas threaded PETs in each virtual address space
   (VAS). Only as many threaded PETs as there are PEs located on the
   single system image (SSI) can be associated with the VAS. Within this
   constraint the call tries to get as close as possible to the number
   specified by maxPetCountPerVas.

   The other constraint to this call is that the number of PETs is
   preserved. This means that the child Component in the end is associated
   with as many PETs as the parent Component provided to the child. The
   threading level of the child PETs however is adjusted according to the
   above rule.

   The typical use of ESMF_GridCompSetVMMaxThreads() is to run a Component
   multi-threaded with groups of PETs executing within a common virtual
   address space.

   The arguments are:

   gridcomp
          ESMF_GridComp to set the ESMF_VM for.

   [maxPetCountPerVas]
          Maximum number of threaded PETs in each virtual address space
          (VAS). Default for each SSI is the local number of PEs.

   [prefIntraProcess]
          Communication preference within a single process. Currently
          options not documented. Use default.

   [prefIntraSsi]
          Communication preference within a single system image (SSI).
          Currently options not documented. Use default.

   [prefInterSsi]
          Communication preference between different single system images
          (SSIs). Currently options not documented. Use default.

   [pthreadMinStackSize]
          Minimum stack size in byte of any child PET executing as
          Pthread. By default single threaded child PETs do not execute as
          Pthread, and their stack size is unaffected by this argument.
          However, for multi-threaded child PETs, or if forceChildPthreads
          is .true., child PETs execute as Pthreads with their own private
          stack.

          For cases where OpenMP threads are used by the user code, each
          thread allocates its own private stack. For all threads other
          than the master, the stack size is set via the typical
          OMP_STACKSIZE environment variable mechanism. The PET itself,
          however, becomes the master of the OpenMP thread team, and is
          not affected by OMP_STACKSIZE. It is the master's stack that can
          be sized via the pthreadMinStackSize argument, and a large
          enough size is often critical.

          When pthreadMinStackSize is absent, the default is to use the
          system default set by the limit or ulimit command. However, the
          stack of a Pthread cannot be unlimited, and a shell stacksize
          setting of unlimited, or any setting below the ESMF implemented
          minimum, will result in setting the stack size to 20MiB (the
          ESMF minimum). Depending on how much private data is used by the
          user code under the master thread, the default might be too
          small, and pthreadMinStackSize must be used to allocate
          sufficient stack space.

   [forceChildPthreads]
          For .true., force each child PET to execute in its own Pthread.
          By default, .false., single PETs spawned from a parent PET
          execute in the same thread (or MPI process) as the parent PET.
          Multiple child PETs spawned by the same parent PET always
          execute as their own Pthreads.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

