          + [348]50 DELayout Class
               o [349]50.1 Description
               o [350]50.2 Constants
                    # [351]50.2.1 ESMF_PIN
                    # [352]50.2.2 ESMF_SERVICEREPLY
               o [353]50.3 Use and Examples
                    # [354]50.3.1 Default DELayout
                    # [355]50.3.2 DELayout with specified number of DEs
                    # [356]50.3.3 DELayout with computational and
                      communication weights
                    # [357]50.3.4 DELayout from petMap
                    # [358]50.3.5 DELayout from petMap with multiple DEs
                      per PET
                    # [359]50.3.6 Working with a DELayout - simple 1-to-1
                      DE-to-PET mapping
                    # [360]50.3.7 Working with a DELayout - general
                      DE-to-PET mapping
                    # [361]50.3.8 Work queue dynamic load balancing
               o [362]50.4 Restrictions and Future Work
               o [363]50.5 Design and Implementation Notes
               o [364]50.6 Class API
                    # [365]50.6.1 ESMF_DELayoutAssignment(=)
                    # [366]50.6.2 ESMF_DELayoutOperator(==)
                    # [367]50.6.3 ESMF_DELayoutOperator(/=)
                    # [368]50.6.4 ESMF_DELayoutCreate
                    # [369]50.6.5 ESMF_DELayoutCreate
                    # [370]50.6.6 ESMF_DELayoutDestroy
                    # [371]50.6.7 ESMF_DELayoutGet
                    # [372]50.6.8 ESMF_DELayoutIsCreated
                    # [373]50.6.9 ESMF_DELayoutPrint
                    # [374]50.6.10 ESMF_DELayoutServiceComplete
                    # [375]50.6.11 ESMF_DELayoutServiceOffer
                    # [376]50.6.12 ESMF_DELayoutValidate
                               50 DELayout Class

50.1 Description

   The DELayout class provides an additional layer of abstraction on top
   of the Virtual Machine (VM) layer. DELayout does this by introducing
   DEs (Decomposition Elements) as logical resource units. The DELayout
   object keeps track of the relationship between its DEs and the
   resources of the associated VM object.

   The relationship between DEs and VM resources (PETs (Persistent
   Execution Threads) and VASs (Virtual Address Spaces)) contained in a
   DELayout object is defined during its creation and cannot be changed
   thereafter. There are, however, a number of hint and specification
   arguments that can be used to shape the DELayout during its creation.

   Contrary to the number of PETs and VASs contained in a VM object, which
   are fixed by the available resources, the number of DEs contained in a
   DELayout can be chosen freely to best match the computational problem
   or other design criteria. Creating a DELayout with less DEs than there
   are PETs in the associated VM object can be used to share resources
   between decomposed objects within an ESMF component. Creating a
   DELayout with more DEs than there are PETs in the associated VM object
   can be used to evenly partition the computation over the available
   resources.

   The simplest case, however, is where the DELayout contains the same
   number of DEs as there are PETs in the associated VM context. In this
   case the DELayout may be used to re-label the hardware and operating
   system resources held by the VM. For instance, it is possible to order
   the resources so that specific DEs have best available communication
   paths. The DELayout will map the DEs to the PETs of the VM according to
   the resource details provided by the VM instance.

   Furthermore, general DE to PET mapping can be used to offer
   computational resources with finer granularity than the VM does. The
   DELayout can be queried for computational and communication capacities
   of DEs and DE pairs, respectively. This information can be used to best
   utilize the DE resources when partitioning the computational problem.
   In combination with other ESMF classes, general DE to PET mapping can
   be used to realize cache blocking, communication hiding and dynamic
   load balancing.

   Finally, the DELayout layer offers primitives that allow a work queue
   style dynamic load balancing between DEs.

50.2 Constants

  50.2.1 ESMF_PIN

   DESCRIPTION:
   Specifies which VM resource DEs are pinned to (PETs, VASs, SSIs).

   The type of this flag is:

   type(ESMF_Pin_Flag)

   The valid values are:

   ESMF_PIN_DE_TO_PET
          Pin DEs to PETs. Only the owning PET has access to a DE.

   ESMF_PIN_DE_TO_VAS
          Pin DEs to virtual address spaces (VAS). DEs are accessible from
          all PETs within the same VAS.

   ESMF_PIN_DE_TO_SSI
          Pin DEs to single system images (SSI) - typically shared memory
          nodes. DEs are accessible from all PETs within the same SSI. The
          memory allocation between different DEs is allowed to be
          non-contiguous.

   ESMF_PIN_DE_TO_SSI_CONTIG
          Same as ESMF_PIN_DE_TO_SSI, but the shared memory allocation
          across DEs located on the same SSI must be contigous throughout.

  50.2.2 ESMF_SERVICEREPLY

   DESCRIPTION:
   Reply when a PET offers to service a DE.

   The type of this flag is:

   type(ESMF_ServiceReply_Flag)

   The valid values are:

   ESMF_SERVICEREPLY_ACCEPT
          The service offer has been accepted. The PET is expected to
          service the DE.

   ESMF_SERVICEREPLY_DENY
          The service offer has been denied. The PET is expected to not
          service the DE.

50.3 Use and Examples

   The following examples demonstrate how to create, use and destroy
   DELayout objects.

  50.3.1 Default DELayout

   Without specifying any of the optional parameters the created
   ESMF_DELayout defaults into having as many DEs as there are PETs in the
   associated VM object. Consequently the resulting DELayout describes a
   simple 1-to-1 DE to PET mapping.

  delayout = ESMF_DELayoutCreate(rc=rc)

   The default DE to PET mapping is simply:
   DE 0  -> PET 0
   DE 1  -> PET 1
   ...

   DELayout objects that are not used any longer should be destroyed.

  call ESMF_DELayoutDestroy(delayout, rc=rc)

   The optional vm argument can be provided to DELayoutCreate() to lower
   the method's overhead by the amount it takes to determine the current
   VM.

  delayout = ESMF_DELayoutCreate(vm=vm, rc=rc)

   By default all PETs of the associated VM will be considered. However,
   if the optional argument petList is present DEs will only be mapped
   against the PETs contained in the list. When the following example is
   executed on four PETs it creates a DELayout with four DEs by default
   that are mapped to the provided PETs in their given order. It is
   erroneous to specify PETs that are not part of the VM context on which
   the DELayout is defined.

  delayout = ESMF_DELayoutCreate(petList=(/(i,i=petCount-1,1,-1)/), rc=rc)

   Once the end of the petList has been reached the DE to PET mapping
   continues from the beginning of the list. For a 4 PET VM the above
   created DELayout will end up with the following DE to PET mapping:

   DE 0  -> PET 3
   DE 1  -> PET 2
   DE 2  -> PET 1
   DE 2  -> PET 3

  50.3.2 DELayout with specified number of DEs

   The deCount argument can be used to specify the number of DEs. In this
   example a DELayout is created that contains four times as many DEs as
   there are PETs in the VM.

  delayout = ESMF_DELayoutCreate(deCount=4*petCount, rc=rc)

   Cyclic DE to PET mapping is the default. For 4 PETs this means:
   DE 0, 4,  8, 12  -> PET 0
   DE 1, 5,  9, 13  -> PET 1
   DE 2, 6, 10, 14  -> PET 2
   DE 3, 7, 11, 15  -> PET 3

   The default DE to PET mapping can be overridden by providing the
   deGrouping argument. This argument provides a positive integer group
   number for each DE in the DELayout. All of the DEs of a group will be
   mapped against the same PET. The actual group index is arbitrary (but
   must be positive) and its value is of no consequence.

  delayout = ESMF_DELayoutCreate(deCount=4*petCount, &
    deGrouping=(/(i/4,i=0,4*petCount-1)/), rc=rc)

   This will achieve blocked DE to PET mapping. For 4 PETs this means:
   DE  0,  1,  2,  3  -> PET 0
   DE  4,  5,  6,  7  -> PET 1
   DE  8,  9, 10, 11  -> PET 2
   DE 12, 13, 14, 15  -> PET 3

  50.3.3 DELayout with computational and communication weights

   The quality of the partitioning expressed by the DE to PET mapping
   depends on the amount and quality of information provided during
   DELayout creation. In the following example the compWeights argument is
   used to specify relative computational weights for all DEs and
   communication weights for DE pairs are provided by the commWeights
   argument. The example assumes four DEs.

  allocate(compWeights(4))
  allocate(commWeights(4, 4))
  ! setup compWeights and commWeights according to computational problem
  delayout = ESMF_DELayoutCreate(deCount=4, compWeights=compWeights, &
    commWeights=commWeights, rc=rc)
  deallocate(compWeights, commWeights)

   The resulting DE to PET mapping depends on the specifics of the VM
   object and the provided compWeights and commWeights arrays.

  50.3.4 DELayout from petMap

   Full control over the DE to PET mapping is provided via the petMap
   argument. This example maps the DEs to PETs in reverse order. In the
   4-PET case this will result in the following mapping:
   DE 0 -> PET 3
   DE 1 -> PET 2
   DE 2 -> PET 1
   DE 3 -> PET 0

  delayout = ESMF_DELayoutCreate(petMap=(/(i,i=petCount-1,0,-1)/), rc=rc)

  50.3.5 DELayout from petMap with multiple DEs per PET

   The petMap argument gives full control over DE to PET mapping. The
   following example run on 4 or more PETs maps DEs to PETs according to
   the following table:
   DE 0 -> PET 3
   DE 1 -> PET 3
   DE 2 -> PET 1
   DE 3 -> PET 0
   DE 4 -> PET 2
   DE 5 -> PET 1
   DE 6 -> PET 3
   DE 7 -> PET 1

  delayout = ESMF_DELayoutCreate(petMap=(/3, 3, 1, 0, 2, 1, 3, 1/), rc=rc)

  50.3.6 Working with a DELayout - simple 1-to-1 DE-to-PET mapping

   The simplest case is a DELayout where there is exactly one DE for every
   PET. Of course this implies that the number of DEs equals the number of
   PETs. This special 1-to-1 DE-to-PET mapping is very common and many
   applications assume it. The following example shows how a DELayout can
   be queried about its mapping.

   First a default DELayout is created where the number of DEs equals the
   number of PETs, and are associated 1-to-1.

  delayout = ESMF_DELayoutCreate(rc=rc)

   Next the DELayout is queried for the oneToOneFlag, and the user code
   makes a decision based on its value.

  call ESMF_DELayoutGet(delayout, oneToOneFlag=oneToOneFlag, rc=rc)
  if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)
  if (.not. oneToOneFlag) then
    ! handle the unexpected case of not dealing with a 1-to-1 mapping
  else

   1-to-1 mapping is guaranteed in this branch and the following code can
   work under the simplifying assumption that every PET holds exactly one
   DE:

    allocate(localDeToDeMap(1))
    call ESMF_DELayoutGet(delayout, localDeToDeMap=localDeToDeMap, rc=rc)
    if (rc /= ESMF_SUCCESS) finalrc=rc
    myDe = localDeToDeMap(1)
    deallocate(localDeToDeMap)
    if (finalrc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)
  endif

  50.3.7 Working with a DELayout - general DE-to-PET mapping

   In general a DELayout may map any number (including zero) of DEs
   against a single PET. The exact situation can be detected by querying
   the DELayout for the oneToOneFlag. If this flag comes back as .true.
   then the DELayout maps exactly one DE against each PET, but if it comes
   back as .false. the DELayout describes a more general DE-to-PET layout.
   The following example shows how code can be be written to work for a
   general DELayout.

   First a DELayout is created with two more DEs than there are PETs. The
   DELayout will consequently map some DEs to the same PET.

  delayout = ESMF_DELayoutCreate(deCount=petCount+2, rc=rc)

   The first piece of information needed on each PET is the localDeCount.
   This number may be different on each PET and indicates how many DEs are
   mapped against the local PET.

  call ESMF_DELayoutGet(delayout, localDeCount=localDeCount, rc=rc)

   The DELayout can further be queried for a list of DEs that are held by
   the local PET. This information is provided by the localDeToDeMap
   argument. In ESMF a localDe is an index that enumerates the DEs that
   are associated with the local PET. In many cases the exact bounds of
   the localDe index range, e.g. $[0...localDeCount-1]$ , or
   $[1...localDeCount]$ does not matter, since it only affects how user
   code indexes into variables the user allocated, and therefore set the
   specific bounds. However, there are a few Array and Field level calls
   that take localDe input arguments. In all those cases where the localDe
   index variable is passed into an ESMF call as an input argument, it
   must be defined with a range starting at zero, i.e.
   $[0...localDeCount-1]$ .

   For consistency with Array and Field, the following code uses a
   $[0...localDeCount-1]$ range for the localDe index variable, although
   it is not strictly necessary here:

  allocate(localDeToDeMap(0:localDeCount-1))
  call ESMF_DELayoutGet(delayout, localDeToDeMap=localDeToDeMap, rc=rc)
  if (rc /= ESMF_SUCCESS) finalrc=rc
  do localDe=0, localDeCount-1
    workDe = localDeToDeMap(localDe)
!    print *, "I am PET", localPET, " and I am working on DE ", workDe
  enddo
  deallocate(localDeToDeMap)
  if (finalrc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)

  50.3.8 Work queue dynamic load balancing

   The DELayout API includes two calls that can be used to easily
   implement work queue dynamic load balancing. The workload is broken up
   into DEs (more than there are PETs) and processed by the PETs. Load
   balancing is only possible for ESMF multi-threaded VMs and requires
   that DEs are pinned to VASs instead of the PETs (default). The
   following example will run for any VM and DELayout, however, load
   balancing will only occur under the mentioned conditions.

  delayout = ESMF_DELayoutCreate(deCount=petCount+2, &
    pinflag=ESMF_PIN_DE_TO_VAS, rc=rc)

  call ESMF_DELayoutGet(delayout, vasLocalDeCount=localDeCount, rc=rc)
  if (rc /= ESMF_SUCCESS) finalrc=rc
  allocate(localDeToDeMap(localDeCount))
  call ESMF_DELayoutGet(delayout, vasLocalDeToDeMap=localDeToDeMap, rc=rc)
  if (rc /= ESMF_SUCCESS) finalrc=rc
  do i=1, localDeCount
    workDe = localDeToDeMap(i)
    print *, "I am PET", localPET, &
             " and I am offering service for DE ", workDe
    reply = ESMF_DELayoutServiceOffer(delayout, de=workDe, rc=rc)
    if (rc /= ESMF_SUCCESS) finalrc=rc
    if (reply == ESMF_SERVICEREPLY_ACCEPT) then
      ! process work associated with workDe
      print *, "I am PET", localPET, ", service offer for DE ", workDe, &
        " was accepted."
      call ESMF_DELayoutServiceComplete(delayout, de=workDe, rc=rc)
      if (rc /= ESMF_SUCCESS) finalrc=rc
    endif
  enddo
  deallocate(localDeToDeMap)
  if (finalrc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)

50.4 Restrictions and Future Work

50.5 Design and Implementation Notes

   The DELayout class is a light weight object. It stores the DE to PET
   and VAS mapping for all DEs within all PET instances and a list of
   local DEs for each PET instance. The DELayout does not store the
   computational and communication weights optionally provided as
   arguments to the create method. These hints are only used during create
   while they are available in user owned arrays.

50.6 Class API

  50.6.1 ESMF_DELayoutAssignment(=) - DELayout assignment

   INTERFACE:
     interface assignment(=)
     delayout1 = delayout2

   ARGUMENTS:
     type(ESMF_DELayout) :: delayout1
     type(ESMF_DELayout) :: delayout2

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Assign delayout1 as an alias to the same ESMF DELayout object in memory
   as delayout2. If delayout2 is invalid, then delayout1 will be equally
   invalid after the assignment.

   The arguments are:

   delayout1
          The ESMF_DELayout object on the left hand side of the
          assignment.

   delayout2
          The ESMF_DELayout object on the right hand side of the
          assignment.

  50.6.2 ESMF_DELayoutOperator(==) - DELayout equality operator

   INTERFACE:
   interface operator(==)
     if (delayout1 == delayout2) then ... endif
               OR
     result = (delayout1 == delayout2)

   RETURN VALUE:
     logical :: result

   ARGUMENTS:
     type(ESMF_DELayout), intent(in) :: delayout1
     type(ESMF_DELayout), intent(in) :: delayout2

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Test whether delayout1 and delayout2 are valid aliases to the same ESMF
   DELayout object in memory. For a more general comparison of two ESMF
   DELayouts, going beyond the simple alias test, the ESMF_DELayoutMatch()
   function (not yet implemented) must be used.

   The arguments are:

   delayout1
          The ESMF_DELayout object on the left hand side of the equality
          operation.

   delayout2
          The ESMF_DELayout object on the right hand side of the equality
          operation.

  50.6.3 ESMF_DELayoutOperator(/=) - DELayout not equal operator

   INTERFACE:
   interface operator(/=)
     if (delayout1 /= delayout2) then ... endif
               OR
     result = (delayout1 /= delayout2)

   RETURN VALUE:
     logical :: result

   ARGUMENTS:
     type(ESMF_DELayout), intent(in) :: delayout1
     type(ESMF_DELayout), intent(in) :: delayout2

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Test whether delayout1 and delayout2 are not valid aliases to the same
   ESMF DELayout object in memory. For a more general comparison of two
   ESMF DELayouts, going beyond the simple alias test, the
   ESMF_DELayoutMatch() function (not yet implemented) must be used.

   The arguments are:

   delayout1
          The ESMF_DELayout object on the left hand side of the
          non-equality operation.

   delayout2
          The ESMF_DELayout object on the right hand side of the
          non-equality operation.

