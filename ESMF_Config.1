          + [219]47 Config Class
               o [220]47.1 Description
                    # [221]47.1.1 Package history
                    # [222]47.1.2 Resource files
               o [223]47.2 Use and Examples
                    # [224]47.2.1 Variable declarations
                    # [225]47.2.2 Creation of a Config
                    # [226]47.2.3 How to retrieve a label with a single
                      value
                    # [227]47.2.4 How to retrieve a label with multiple
                      values
                    # [228]47.2.5 How to retrieve a table
                    # [229]47.2.6 Destruction of a Config
                    # [230]47.2.7 Loading a YAML file
               o [231]47.3 Class API
                    # [232]47.3.1 ESMF_ConfigAssignment(=)
                    # [233]47.3.2 ESMF_ConfigOperator(==)
                    # [234]47.3.3 ESMF_ConfigOperator(/=)
                    # [235]47.3.4 ESMF_ConfigCreate
                    # [236]47.3.5 ESMF_ConfigCreate
                    # [237]47.3.6 ESMF_ConfigDestroy
                    # [238]47.3.7 ESMF_ConfigFindLabel
                    # [239]47.3.8 ESMF_ConfigFindNextLabel
                    # [240]47.3.9 ESMF_ConfigGet
                    # [241]47.3.10 ESMF_ConfigGetAttribute
                    # [242]47.3.11 ESMF_ConfigGetAttribute
                    # [243]47.3.12 ESMF_ConfigGetChar
                    # [244]47.3.13 ESMF_ConfigGetDim
                    # [245]47.3.14 ESMF_ConfigGetLen
                    # [246]47.3.15 ESMF_ConfigIsCreated
                    # [247]47.3.16 ESMF_ConfigLoadFile
                    # [248]47.3.17 ESMF_ConfigNextLine
                    # [249]47.3.18 ESMF_ConfigLog
                    # [250]47.3.19 ESMF_ConfigPrint
                    # [251]47.3.20 ESMF_ConfigSetAttribute
                    # [252]47.3.21 ESMF_ConfigValidate
                                47 Config Class

47.1 Description

   ESMF Configuration Management is based on NASA DAO's Inpak 90 package,
   a Fortran 90 collection of routines/functions for accessing Resource
   Files in ASCII format.The package is optimized for minimizing formatted
   I/O, performing all of its string operations in memory using Fortran
   intrinsic functions.

  47.1.1 Package history

   The ESMF Configuration Management Package was evolved by Leonid
   Zaslavsky and Arlindo da Silva from Ipack90 package created by Arlindo
   da Silva at NASA DAO.

   Back in the 70's Eli Isaacson wrote IOPACK in Fortran 66. In June of
   1987 Arlindo da Silva wrote Inpak77 using Fortran 77 string functions;
   Inpak 77 is a vastly simplified IOPACK, but has its own goodies not
   found in IOPACK. Inpak 90 removes some obsolete functionality in
   Inpak77, and parses the whole resource file in memory for performance.

  47.1.2 Resource files

   A Resource File (RF) is a text file consisting of list of label-value
   pairs. There is a limit of 1024 characters per line and the Resource
   File can contain a maximum of 200 records. Each label should be
   followed by some data, the value. An example Resource File follows. It
   is the file used in the example below.

 # This is an example Resource File.
 # It contains a list of <label,value> pairs.
 # The colon after the label is required.

 # The values after the label can be an list.
 # Multiple types are authorized.

  my_file_names:         jan87.dat jan88.dat jan89.dat  # all strings
  constants:             3.1415   25                    # float and integer
  my_favorite_colors:    green blue 022


 # Or, the data can be a list of single value pairs.
 # It is simplier to retrieve data in this format:

  radius_of_the_earth:   6.37E6
  parameter_1:           89
  parameter_2:           78.2
  input_file_name:       dummy_input.nc


 # Or, the data can be located in a table using the following
 # syntax:

  my_table_name::
   1000     3000     263.0
    925     3000     263.0
    850     3000     263.0
    700     3000     269.0
    500     3000     287.0
    400     3000     295.8
    300     3000     295.8
  ::

   Note that the colon after the label is required and that the double
   colon is required to declare tabular data.

   Resource files are intended for random access (except between ::'s in a
   table definition). This means that order in which a particular
   label-value pair is retrieved is not dependent upon the original order
   of the pairs. The only exception to this, however, is when the same
   label appears multiple times within the Resource File.

47.2 Use and Examples

   This example/test code performs simple Config/Resource File routines.
   It does not include attaching a Config to a component. The important
   thing to remember there is that you can have one Config per component.

   There are two methodologies for accessing data in a Resource File. This
   example will demonstrate both.

   Note the API section contains a complete description of arguments in
   the methods/functions demonstrated in this example.

  47.2.1 Variable declarations

   The following are the variable declarations used as arguments in the
   following code fragments. They represent the locals names for the
   variables listed in the Resource File (RF). Note they do not need to be
   the same.

      character(ESMF_MAXPATHLEN) :: fname ! config file name
      character(ESMF_MAXPATHLEN) :: fn1, fn2, fn3, input_file ! strings to be re
ad in
      integer       :: rc            ! error return code (0 is OK)
      integer       :: i_n           ! the first constant in the RF
      real          :: param_1       ! the second constant in the RF
      real          :: radius        ! radius of the earth
      real          :: table(7,3)    ! an array to hold the table in the RF

      type(ESMF_Config)   :: cf      ! the Config itself

  47.2.2 Creation of a Config

   While there are two methodologies for accessing the data within a
   Resource File, there is only one way to create the initial Config and
   load its ASCII text into memory. This is the first step in the process.

   Note that subsequent calls to ESMF_ConfigLoadFile will OVERWRITE the
   current Config NOT append to it. There is no means of appending to a
   Config.

      cf = ESMF_ConfigCreate(rc=rc)             ! Create the empty Config

      fname = "myResourceFile.rc"                ! Name the Resource File
      call ESMF_ConfigLoadFile(cf, fname, rc=rc) ! Load the Resource File
                                                 ! into the empty Config

  47.2.3 How to retrieve a label with a single value

   The first method for retrieving information from the Resource File
   takes advantage of the <label,value> relationship within the file and
   access the data in a dictionary-like manner. This is the simplest
   methodology, but it does imply the use of only one value per label in
   the Resource File.

   Remember, that the order in which a particular label/value pair is
   retrieved is not dependent upon the order which they exist within the
   Resource File.

    call ESMF_ConfigGetAttribute(cf, radius, label='radius_of_the_earth:', &
                                 default=1.0, rc=rc)

   Note that the colon must be included in the label string when using
   this methodology. It is also important to provide a default value in
   case the label does not exist in the file

   This methodology works for all types. The following is an example of
   retrieving a string:

    call ESMF_ConfigGetAttribute(cf, input_file, label='input_file_name:', &
                                 default="./default.nc", rc=rc)

   The same code fragment can be used to demonstrate what happens when the
   label is not present. Note that "file_name" does not exist in the
   Resource File. The result of its absence is the default value provided
   in the call.

    call ESMF_ConfigGetAttribute(cf, input_file, label='file_name:', &
                                 default="./default.nc", rc=rc)

  47.2.4 How to retrieve a label with multiple values

   When there are multiple, mixed-typed values associated with a label,
   the values can be retrieved in two steps: 1) Use ESMF_ConfigFindLabel()
   to find the label in the Config class; 2) use ESMF_ConfigGetAttribute()
   without the optional 'label' argument to retrieve the values one at a
   time, reading from left to right in the record.

   A second reminder that the order in which a particular label/value pair
   is retrieved is not dependent upon the order which they exist within
   the Resource File. The label used in this method allows the user to
   skip to any point in the file.

      call ESMF_ConfigFindLabel(cf, 'constants:', rc=rc) ! Step a) Find the
                                                         ! label

   Two constants, radius and i_n, can now be retrieved without having to
   specify their label or use an array. They are also different types.

      call ESMF_ConfigGetAttribute(cf, param_1, rc=rc) ! Step b) read in the
                                                       ! first constant in
                                                       ! the sequence
      call ESMF_ConfigGetAttribute(cf, i_n, rc=rc)     ! Step c) read in the
                                                       ! second constant in
                                                       ! the sequence

   This methodology also works with strings.

       call ESMF_ConfigFindLabel(cf, 'my_file_names:', &
               rc=rc)                       ! Step a) find the label

       call ESMF_ConfigGetAttribute(cf, fn1, &
                 rc=rc)                    ! Step b) retrieve the 1st filename
       call ESMF_ConfigGetAttribute(cf, fn2, &
                 rc=rc)                    ! Step c) retrieve the 2nd filename
       call ESMF_ConfigGetAttribute(cf, fn3, &
                 rc=rc)                    ! Step d) retrieve the 3rd filename

  47.2.5 How to retrieve a table

   To access tabular data, the user must use the multi-value method.

      call ESMF_ConfigFindLabel(cf, 'my_table_name::', &
               rc=rc)        ! Step a) Set the label location to the
                             ! beginning of the table

   Subsequently, call ESMF_ConfigNextLine() is used to move the location
   to the next row of the table. The example table in the Resource File
   contains 7 rows and 3 columns (7,3).

      do i = 1, 7
        call ESMF_ConfigNextLine(cf, rc=rc) ! Step b) Increment the rows
        do j = 1, 3                         ! Step c) Fill in the table
          call ESMF_ConfigGetAttribute(cf, table(i,j), rc=rc)
        enddo
      enddo

  47.2.6 Destruction of a Config

   The work with the Config object cf is finalized by callling
   ESMF_ConfigDestroy().

      call ESMF_ConfigDestroy(cf, rc=rc) ! Destroy the Config object

  47.2.7 Loading a YAML file

   The Config class supports loading of YAML files. As before, an empty
   Config object is created with ESMF_ConfigCreate() and then populated
   via the ESMF_ConfigLoadFile() method.

      cf = ESMF_ConfigCreate(rc=rc)          ! Create the empty Config object

   Files ending in .yaml, .yml, or any combination of upper and lower case
   letters that can be mapped to these two options, are interpreted as
   YAML files. All other names are interpreted as classic Config RFs as
   documented earlier.

      call ESMF_ConfigLoadFile(cf, "myResourceFile.yaml", & ! Load the YAML File
        rc=rc)                                    ! into the empty Config object

   Here the myResourceFile.yaml contains a YAML version of the previously
   used myResourceFile.rc file contents:

  # YAML representation of the myResourceFile.rc RF

  # mapping to sequences

  my_file_names:      [jan87.dat, jan88.dat, jan89.dat]  # all strings
  constants:          [3.1415, 25]                       # float and integer
  my_favorite_colors: [green, blue, 022]

  # mapping to scalars

  radius_of_the_earth:   6.37E6
  parameter_1:           89
  parameter_2:           78.2
  input_file_name:       dummy_input.nc

  # represent table as mapping to sequence of sequences

  my_table_name:
  - [1000,    3000,    263.0]
  - [ 925,    3000,    263.0]
  - [ 850,    3000,    263.0]
  - [ 700,    3000,    269.0]
  - [ 500,    3000,    287.0]
  - [ 400,    3000,    295.8]
  - [ 300,    3000,    295.8]

   Notice that YAML support is limited to a small subset of the full YAML
   language specification, allowing access through the classic Config API.
   Specifically, the top level in the YAML file is expected to be a
   mapping (dictionary) of scalar keys to any of the following three value
   options:
     * Scalars
     * List of scalars
     * List of lists of scalars

   All other YAML constructs are silently ignored when loaded through this
   interface. Constructs successfully ingested become available in the cf
   object, and can be accessed via the regular ESMF_Config methods as
   outlined in the previous sections.

   When done, the resources held by the Config object are released by
   calling the ESMF_ConfigDestroy() method.

      call ESMF_ConfigDestroy(cf, rc=rc) ! Destroy the Config object

47.3 Class API

  47.3.1 ESMF_ConfigAssignment(=) - Config assignment

   INTERFACE:
     interface assignment(=)
     config1 = config2

   ARGUMENTS:
     type(ESMF_Config) :: config1
     type(ESMF_Config) :: config2

   DESCRIPTION:

   Assign config1 as an alias to the same ESMF_Config object in memory as
   config2. If config2 is invalid, then config1 will be equally invalid
   after the assignment.

   The arguments are:

   config1
          The ESMF_Config object on the left hand side of the assignment.

   config2
          The ESMF_Config object on the right hand side of the assignment.

  47.3.2 ESMF_ConfigOperator(==) - Test if Config objects are equivalent

   INTERFACE:
       interface operator(==)
       if (config1 == config2) then ... endif
                    OR
       result = (config1 == config2)

   RETURN VALUE:
       configical :: result

   ARGUMENTS:
       type(ESMF_Config), intent(in) :: config1
       type(ESMF_Config), intent(in) :: config2

   DESCRIPTION:

   Overloads the (==) operator for the ESMF_Config class. Compare two
   configs for equality; return .true. if equal, .false. otherwise.
   Comparison is based on whether the objects are distinct, as with two
   newly created objects, or are simply aliases to the same object as
   would be the case when assignment was involved.

   The arguments are:

   config1
          The ESMF_Config object on the left hand side of the equality
          operation.

   config2
          The ESMF_Config object on the right hand side of the equality
          operation.

  47.3.3 ESMF_ConfigOperator(/=) - Test if Config objects are not equivalent

   INTERFACE:
       interface operator(/=)
       if (config1 /= config2) then ... endif
                    OR
       result = (config1 /= config2)

   RETURN VALUE:
       configical :: result

   ARGUMENTS:
       type(ESMF_Config), intent(in) :: config1
       type(ESMF_Config), intent(in) :: config2

   DESCRIPTION:

   Overloads the (/=) operator for the ESMF_Config class. Compare two
   configs for equality; return .true. if not equivalent, .false.
   otherwise. Comparison is based on whether the Config objects are
   distinct, as with two newly created objects, or are simply aliases to
   the same object as would be the case when assignment was involved.

   The arguments are:

   config1
          The ESMF_Config object on the left hand side of the equality
          operation.

   config2
          The ESMF_Config object on the right hand side of the equality
          operation.

