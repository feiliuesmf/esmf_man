  46.6.4 ESMF_AlarmCreate - Create a new ESMF Alarm

   INTERFACE:
       ! Private name; call using ESMF_AlarmCreate()
       function ESMF_AlarmCreateNew(clock, &
         ringTime, ringInterval, stopTime, ringDuration, ringTimeStepCount, &
         refTime, enabled, sticky, name, rc)

   RETURN VALUE:
       type(ESMF_Alarm) :: ESMF_AlarmCreateNew

   ARGUMENTS:
       type(ESMF_Clock),        intent(in)            :: clock
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
       type(ESMF_Time),         intent(in),  optional :: ringTime
       type(ESMF_TimeInterval), intent(in),  optional :: ringInterval
       type(ESMF_Time),         intent(in),  optional :: stopTime
       type(ESMF_TimeInterval), intent(in),  optional :: ringDuration
       integer,                 intent(in),  optional :: ringTimeStepCount
       type(ESMF_Time),         intent(in),  optional :: refTime
       logical,                 intent(in),  optional :: enabled
       logical,                 intent(in),  optional :: sticky
       character (len=*),       intent(in),  optional :: name
       integer,                 intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Creates and sets the initial values in a new ESMF_Alarm.

   In ESMF_DIRECTION_REVERSE (see Section [590]45.1), alarms ring in
   reverse, i.e., they begin ringing when they originally ended, and end
   ringing when they originally began.

   The arguments are:

   clock
          The clock with which to associate this newly created alarm.

   [ringTime]
          The ring time for a one-shot alarm or the first ring time for a
          repeating (interval) alarm. Must specify at least one of
          ringTime or ringInterval.

   [ringInterval]
          The ring interval for repeating (interval) alarms. If ringTime
          is not also specified (first ring time), it will be calculated
          as the clock's current time plus ringInterval. Must specify at
          least one of ringTime or ringInterval.

   [stopTime]
          The stop time for repeating (interval) alarms. If not specified,
          an interval alarm will repeat forever.

   [ringDuration]
          The absolute ring duration. If not sticky (see argument below),
          alarms rings for ringDuration, then turns itself off. Default is
          zero (unused). Mutually exclusive with ringTimeStepCount
          (below); used only if set to a non-zero duration and
          ringTimeStepCount is 1 (see below). See also ESMF_AlarmSticky(),
          ESMF_AlarmNotSticky().

   [ringTimeStepCount]
          The relative ring duration. If not sticky (see argument below),
          alarms rings for ringTimeStepCount, then turns itself off.
          Default is 1: a non-sticky alarm will ring for one clock time
          step. Mutually exclusive with ringDuration (above); used if
          ringTimeStepCount > 1. If ringTimeStepCount is 1 (default) and
          ringDuration is non-zero, ringDuration is used (see above),
          otherwise ringTimeStepCount is used. See also
          ESMF_AlarmSticky(), ESMF_AlarmNotSticky().

   [refTime]
          The reference (i.e. base) time for an interval alarm.

   [enabled]
          Sets the enabled state; default is on (true). If disabled, an
          alarm will not function at all. See also ESMF_AlarmEnable(),
          ESMF_AlarmDisable().

   [sticky]
          Sets the sticky state; default is on (true). If sticky, once an
          alarm is ringing, it will remain ringing until turned off
          manually via a user call to ESMF_AlarmRingerOff(). If not
          sticky, an alarm will turn itself off after a certain ring
          duration specified by either ringDuration or ringTimeStepCount
          (see above). There is an implicit limitation that in order to
          properly reverse timestep through a ring end time in
          ESMF_DIRECTION_REVERSE, that time must have already been
          traversed in the forward direction. This is due to the fact that
          the Time Manager cannot predict when user code will call
          ESMF_AlarmRingerOff(). An error message will be logged when this
          limitation is not satisfied. See also ESMF_AlarmSticky(),
          ESMF_AlarmNotSticky().

   [name]
          The name for the newly created alarm. If not specified, a
          default unique name will be generated: "AlarmNNN" where NNN is a
          unique sequence number from 001 to 999.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  46.6.5 ESMF_AlarmCreate - Create a copy of an existing ESMF Alarm

   INTERFACE:
       ! Private name; call using ESMF_AlarmCreate()
       function ESMF_AlarmCreateCopy(alarm, rc)

   RETURN VALUE:
       type(ESMF_Alarm) :: ESMF_AlarmCreateCopy

   ARGUMENTS:
       type(ESMF_Alarm), intent(in)            :: alarm
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
       integer,          intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Creates a complete (deep) copy of a given ESMF_Alarm. The returned
   ESMF_Alarm copy is associated with the same ESMF_Clock as the original
   ESMF_Alarm. If desired, use ESMF_AlarmSet(...clock=...) to re-associate
   the ESMF_Alarm copy with a different ESMF_Clock.

   The arguments are:

   alarm
          The ESMF_Alarm to copy.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

