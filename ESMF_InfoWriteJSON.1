  40.4.31 ESMF_InfoWriteJSON - Write Info contents to file

   INTERFACE:
 subroutine ESMF_InfoWriteJSON(info, filename, rc)

   ARGUMENTS:
   type(ESMF_Info), intent(in) :: info
   character(len=*), intent(in) :: filename
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Write ESMF_Info contents to file using the JSON format.

   The arguments are:

   info
          Target ESMF_Info object.

   filename
          Path to the output file.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

                            41 Time Manager Utility

   The ESMF Time Manager utility includes software for time and date
   representation and calculations, model time advancement, and the
   identification of unique and periodic events. Since multi-component
   geophysical applications often require synchronization across the time
   management schemes of the individual components, the Time Manager's
   standard calendars and consistent time representation promote component
   interoperability.

    Key Features
   Drift-free timekeeping through an integer-based internal time
   representation. Both integers and reals can be specified at the
   interface.
   The ability to represent time as a rational fraction, to support exact
   timekeeping in applications that involve grid refinement.
    Support for many calendar kinds, including user-customized calendars.
   Support for both concurrent and sequential modes of component
   execution.
    Support for varying and negative time steps.

41.1 Time Manager Classes

   There are five ESMF classes that represent time concepts:
     * Calendar A Calendar can be used to keep track of the date as an
       ESMF Gridded Component advances in time. Standard calendars (such
       as Gregorian and 360-day) and user-specified calendars are
       supported. Calendars can be queried for quantities such as seconds
       per day, days per month, and days per year.
     * Time A Time represents a time instant in a particular calendar,
       such as November 28, 1964, at 7:31pm EST in the Gregorian calendar.
       The Time class can be used to represent the start and stop time of
       a time integration.
     * TimeInterval TimeIntervals represent a period of time, such as 300
       milliseconds. Time steps can be represented using TimeIntervals.
     * Clock Clocks collect the parameters and methods used for model time
       advancement into a convenient package. A Clock can be queried for
       quantities such as start time, stop time, current time, and time
       step. Clock methods include incrementing the current time, and
       determining if it is time to stop.
     * Alarm Alarms identify unique or periodic events by “ringing” -
       returning a true value - at specified times. For example, an Alarm
       might be set to ring on the day of the year when leaves start
       falling from the trees in a climate model.

                       \includegraphics{TimeMgr_desc}

   In the remainder of this section, we briefly summarize the
   functionality that the Time Manager classes provide. Detailed
   descriptions and usage examples precede the API listing for each class.

41.2 Calendar

   An ESMF Calendar can be queried for seconds per day, days per month and
   days per year. The flexible definition of Calendars allows them to be
   defined for planetary bodies other than Earth. The set of supported
   calendars includes:

   Gregorian
          The standard Gregorian calendar.

   no-leap
          The Gregorian calendar with no leap years.

   Julian
          The standard Julian date calendar.

   Julian Day
          The standard Julian days calendar.

   Modified Julian Day
          The Modified Julian days calendar.

   360-day
          A 30-day-per-month, 12-month-per-year calendar.

   no calendar
          Tracks only elapsed model time in hours, minutes, seconds.

   See Section [512]42.1 for more details on supported standard calendars,
   and how to create a customized ESMF Calendar.

41.3 Time Instants and TimeIntervals

   TimeIntervals and Time instants (simply called Times) are the
   computational building blocks of the Time Manager utility.
   TimeIntervals support operations such as add, subtract, compare size,
   reset value, copy value, and subdivide by a scalar. Times, which are
   moments in time associated with specific Calendars, can be incremented
   or decremented by TimeIntervals, compared to determine which of two
   Times is later, differenced to obtain the TimeInterval between two
   Times, copied, reset, and manipulated in other useful ways. Times
   support a host of different queries, both for values of individual Time
   components such as year, month, day, and second, and for derived values
   such as day of year, middle of current month and Julian day. It is also
   possible to retrieve the value of the hardware realtime clock in the
   form of a Time. See Sections [513]43.1 and [514]44.1, respectively, for
   use and examples of Times and TimeIntervals.

   Since climate modeling, numerical weather prediction and other Earth
   and space applications have widely varying time scales and require
   different sorts of calendars, Times and TimeIntervals must support a
   wide range of time specifiers, spanning nanoseconds to years. The
   interfaces to these time classes are defined so that the user can
   specify a time using a combination of units selected from the list
   shown in Table [515]41.4.

41.4 Clocks and Alarms

   Although it is possible to repeatedly step a Time forward by a
   TimeInterval using arithmetic on these basic types, it is useful to
   identify a higher-level concept to represent this function. We refer to
   this capability as a Clock, and include in its required features the
   ability to store the start and stop times of a model run, to check when
   time advancement should cease, and to query the value of quantities
   such as the current time and the time at the previous time step. The
   Time Manager includes a class with methods that return a true value
   when a periodic or unique event has taken place; we refer to these as
   Alarms. Applications may contain temporary or multiple Clocks and
   Alarms. Sections [516]45.1 and [517]46.1 describe the use of Clocks and
   Alarms in detail.

   CAPTION: Table 4: Specifiers for Times and TimeIntervals

   Unit Meaning
   <yy|yy_i8> Year.
   mm Month of the year.
   dd Day of the month.
   <d|d_i8|d_r8> Julian or Modified Julian day.
   <h|h_r8> Hour.
   <m|m_r8> Minute.
   <s|s_i8|s_r8> Second.
   <ms|ms_r8> Millisecond.
   <us|us_r8> Microsecond.
   <ns|ns_r8> Nanosecond.
   O Time zone offset in integer number of hours and minutes.
   <sN|sN_i8> Numerator for times of the form s $+ \frac{{\rm sN}}{{\rm
   sD}}$ , where s is seconds and s, sN, and sD are integers. This format
   provides a mechanism for supporting exact behavior.
   <sD|sD_i8 Denominator for times of the form s $+ \frac{{\rm sN}}{{\rm
   sD}}$ , where s is seconds and s, sN, and sD are integers.

41.5 Design and Implementation Notes

    1. Base TimeIntervals and Times on the same integer representation. It
       is useful to allow both TimeIntervals and Times to inherit from a
       single class, BaseTime. In C++, this can be implemented by using
       inheritance. In Fortran, it can be implemented by having the
       derived types TimeIntervals and Times contain a derived type
       BaseTime. In both cases, the BaseTime class can be made private and
       invisible to the user.
       The result of this strategy is that Time Intervals and Times gain a
       consistent core representation of time as well a set of basic
       methods.
       The BaseTime class can be designed with a minimum number of
       elements to represent any required time. The design is based on the
       idea used in the real-time POSIX 1003.1b-1993 standard. That is, to
       represent time simply as a pair of integers: one for seconds
       (whole) and one for nanoseconds (fractional). These can then be
       converted at the interface level to any desired format.
       For ESMF, this idea can be modified and extended, in order to
       handle the requirements for a large time range (> 200,000 years)
       and to exactly represent any rational fraction, not just
       nanoseconds. To handle the large time range, a 64-bit or greater
       integer is used for whole seconds. Any rational fractional second
       is expressed using two additional integers: a numerator and a
       denominator. Both the whole seconds and fractional numerator are
       signed to handle negative time intervals and instants. For
       arithmetic consistency both must carry the same sign (both positive
       or both negative), except, of course, for zero values. The
       fractional seconds element (numerator) is bounded with respect to
       whole seconds. If the absolute value of the numerator becomes
       greater than or equal to the denominator, whole seconds are
       incremented or decremented accordingly and the numerator is reset
       to the remainder. Conversions are performed upon demand by
       interface methods within the TimeInterval and Time classes. This is
       done because different applications require different
       representations of time intervals and time instances. Floating
       point values as well as integers can be specified for the various
       time units in the interfaces, see Table [518]41.4. Floating point
       values are represented internally as integer-based rational
       fractions.
       The BaseTime class defines increment and decrement methods for
       basic TimeInterval calculations between Time instants. It is done
       here rather than in the Calendar class because it can be done with
       simple second-based arithmetic that is calendar independent.
       Comparison methods can also be defined in the BaseTime class. These
       perform equality/inequality, less than, and greater than
       comparisons between any two TimeIntervals or Times. These methods
       capture the common comparison logic between TimeIntervals and Times
       and hence are defined here for sharing.
    2. The Time class depends on a calendar. The Time class contains an
       internal Calendar class. Upon demand by a user, the results of an
       increment or decrement operation are converted to user units, which
       may be calendar-dependent, via methods obtained from their internal
       Calendar.

41.6 Object Model

   The following is a simplified UML diagram showing the structure of the
   Time Manager utility. See Appendix A, A Brief Introduction to UML, for
   a translation table that lists the symbols in the diagram and their
   meaning.

                        \includegraphics{TimeMgr_obj}

