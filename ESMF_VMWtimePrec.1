  51.6.35 ESMF_VMWtimePrec - Timer precision as floating-point number of seconds

   INTERFACE:
   subroutine ESMF_VMWtimePrec(prec, rc)

   ARGUMENTS:
     real(ESMF_KIND_R8), intent(out)           :: prec
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     integer,            intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Get a run-time estimate of the timer precision as floating-point number
   of seconds. This is a relatively expensive call since the timer
   precision is measured several times before the maximum is returned as
   the estimate. The returned value is PET-specific and may differ across
   the VM context.

   The arguments are:

   prec
          Timer precision in seconds.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

                            52 Profiling and Tracing

52.1 Description

  52.1.1 Profiling

   ESMF's built in profiling capability collects runtime statistics of an
   executing ESMF application through both automatic and manual code
   instrumentation. Timing information for all phases of all ESMF
   components executing in an application can be automatically collected
   using the ESMF_RUNTIME_PROFILE environment variable (see below for
   settings). Additionally, arbitrary user-defined code regions can be
   timed by manually instrumenting code with special API calls. Timing
   profiles of component phases and user-defined regions can be output in
   several different formats:
     * in text at the end of ESMF Log files
     * in separate text file, one per PET (if the ESMF Logs are turned
       off)
     * in a single summary text file that aggregates timings over multiple
       PETs
     * in a binary format for import into the [628]esmf-profiler for
       profile visualization

   The following table lists important environment variables that control
   aspects of ESMF profiling.

   Environment Variable Description Example Values Default
   ESMF_RUNTIME_PROFILE Enable/disables all profiling functions ON or OFF
   OFF
   ESMF_RUNTIME_PROFILE_PETLIST Limits profiling to an explicit list of
   PETs “0-9 50 99” profile all PETs
   ESMF_RUNTIME_PROFILE_OUTPUT Controls output format of profiles;
   multiple can be specified in a space separated list TEXT, SUMMARY,
   BINARY TEXT

  52.1.2 Tracing

   Whereas profiling collects summary information from an application,
   tracing records a more detailed set of events for later analysis. Trace
   analysis can be used to understand what happened during a program's
   execution and is often used for diagnosing problems, debugging, and
   performance analysis.

   ESMF has a built-in tracing capability that records events into special
   binary log files. Unlike log files written by the ESMF_Log class, which
   are primarily for human consumption (see Section [629]49.1), the trace
   output files are recorded in a compact binary representation and are
   processed by tools to produce various analyses. ESMF event streams are
   recorded in the [630]Common Trace Format (CTF). CTF traces include one
   or more event streams, as well as a metadata file describing the events
   in the streams.

   Several tools are available for reading in the CTF traces output by
   ESMF. Of the tools listed below, the first one is designed specifically
   for analyzing ESMF applications and the second two are general purpose
   tools for working with all CTF traces.
     * [631]esmf-profiler is a tool that ingests traces from an ESMF
       application and generates performance profile plots.
     * [632]TraceCompass is a general purpose tool for reading, analyzing,
       and visualizing traces.
     * [633]Babeltrace is a command-line tool and library for trace
       conversion that can read and write CTF traces. Python bindings are
       available to open CTF traces are iterate through events.

   Events that can be captured by the ESMF tracer include the following.
   Events are recorded with a high-precision timestamp to allow timing
   analyses.

   phase_enter
          indicates entry into an initialize, run, or finalize ESMF
          component routine

   phase_exit
          indicates exit from an initialize, run, or finalize ESMF
          component routine

   region_enter
          indicates entry into a user-defined code region

   region_exit
          indicates exit from a user-defined code region

   The following table lists important environment variables that control
   aspects of ESMF tracing.

   Environment Variable Description Example Values Default
   ESMF_RUNTIME_TRACE Enable/disables all tracing functions ON or OFF OFF
   ESMF_RUNTIME_TRACE_CLOCK Sets the type of clock for timestamping events
   (see Section [634]52.2.6). REALTIME or MONOTONIC or MONOTONIC_SYNC
   REALTIME
   ESMF_RUNTIME_TRACE_PETLIST Limits tracing to an explicit list of PETs
   “0-9 50 99” trace all PETs
   ESMF_RUNTIME_TRACE_COMPONENT Enables/disable tracing of Component
   phase_enter and phase_exit events ON or OFF ON
   ESMF_RUNTIME_TRACE_FLUSH Controls frequency of event stream flushing to
   file DEFAULT or EAGER DEFAULT

52.2 Use and Examples

  52.2.1 Output a Timing Profile to Text

   ESMF profiling is disabled by default. To profile an application, set
   the ESMF_RUNTIME_PROFILE variable to ON prior to executing the
   application. You do not need to recompile your code to enable
   profiling.

# csh shell
$ setenv ESMF_RUNTIME_PROFILE ON

# bash shell
$ export ESMF_RUNTIME_PROFILE=ON

# (from now on, only the csh shell version will be shown)

   Then execute the application in the usual way. At the end of the run
   the profile information will be available at the end of each PET log
   (if ESMF Logs are turned on) or in a set of separate files, one per
   PET, with names ESMF_Profile.XXX where XXX is the PET number. Below is
   an example timing profile. Some regions are left out for brevity.

Region                           Count  Total (s)   Self (s)    Mean (s)    Min
(s)     Max (s)
  [esm] Init 1                   1      4.0878      0.0341      4.0878      4.08
78      4.0878
    [OCN-TO-ATM] IPDv05p6b       1      2.6007      2.6007      2.6007      2.60
07      2.6007
    [ATM-TO-OCN] IPDv05p6b       1      1.4333      1.4333      1.4333      1.43
33      1.4333
    [ATM] IPDv00p2               1      0.0055      0.0055      0.0055      0.00
55      0.0055
    [OCN] IPDv00p2               1      0.0023      0.0023      0.0023      0.00
23      0.0023
    [ATM] IPDv00p1               1      0.0011      0.0011      0.0011      0.00
11      0.0011
    [OCN] IPDv00p1               1      0.0009      0.0009      0.0009      0.00
09      0.0009
    [ATM-TO-OCN] IPDv05p3        1      0.0008      0.0008      0.0008      0.00
08      0.0008
    [ATM-TO-OCN] IPDv05p1        1      0.0008      0.0008      0.0008      0.00
08      0.0008
    [ATM-TO-OCN] IPDv05p2b       1      0.0007      0.0007      0.0007      0.00
07      0.0007
    [ATM-TO-OCN] IPDv05p4        1      0.0007      0.0007      0.0007      0.00
07      0.0007
    [ATM-TO-OCN] IPDv05p2a       1      0.0007      0.0007      0.0007      0.00
07      0.0007
    [ATM-TO-OCN] IPDv05p5        1      0.0007      0.0007      0.0007      0.00
07      0.0007
    [OCN-TO-ATM] IPDv05p3        1      0.0006      0.0006      0.0006      0.00
06      0.0006
    [OCN-TO-ATM] IPDv05p4        1      0.0006      0.0006      0.0006      0.00
06      0.0006
    [OCN-TO-ATM] IPDv05p2b       1      0.0006      0.0006      0.0006      0.00
06      0.0006
    [OCN-TO-ATM] IPDv05p2a       1      0.0006      0.0006      0.0006      0.00
06      0.0006
    [OCN-TO-ATM] IPDv05p5        1      0.0006      0.0006      0.0006      0.00
06      0.0006
    [OCN-TO-ATM] IPDv05p1        1      0.0005      0.0005      0.0005      0.00
05      0.0005
  [esm] RunPhase1                1      2.7423      0.9432      2.7423      2.74
23      2.7423
    [OCN-TO-ATM] RunPhase1       864    0.6094      0.6094      0.0007      0.00
06      0.0179
    [ATM] RunPhase1              864    0.5296      0.2274      0.0006      0.00
05      0.0011
      ATM:ModelAdvance           864    0.3022      0.3022      0.0003      0.00
03      0.0005
    [ATM-TO-OCN] RunPhase1       864    0.3345      0.3345      0.0004      0.00
02      0.0299
    [OCN] RunPhase1              864    0.3256      0.3256      0.0004      0.00
03      0.0010
  [esm] FinalizePhase1           1      0.0029      0.0020      0.0029      0.00
29      0.0029
    [OCN-TO-ATM] FinalizePhase1  1      0.0006      0.0006      0.0006      0.00
06      0.0006
    [ATM-TO-OCN] FinalizePhase1  1      0.0002      0.0002      0.0002      0.00
02      0.0002
    [OCN] FinalizePhase1         1      0.0001      0.0001      0.0001      0.00
01      0.0001
    [ATM] FinalizePhase1         1      0.0000      0.0000      0.0000      0.00
00      0.0000

   A timed region is either an ESMF component phase (e.g., initialize,
   run, or finalize) or a user-defined region of code surrounded by calls
   to ESMF_TraceRegionEnter() and ESMF_TraceRegionExit(). (See section
   [635]52.2.8 for more information on instrumenting user-defined
   regions.) Regions are organized hierarchically with sub-regions nested.
   For example, in the profile above, the [OCN] RunPhase1 is a sub-region
   of [esm] RunPhase1 and is entirely contained inside that region.
   Regions with the same name may appear at multiple places in the
   hierarchy, and so would appear in multiple rows in the table. The
   statistics in that row apply to that region at that location in the
   hierarchy. Component names appear in square brackets, e.g., [ATM],
   [OCN], and [ATM-TO-OCN]. By default, timings are based on elapsed wall
   clock time and are collected on a per-PET basis. Therefore, regions
   timings may differ across PETs. Regions are sorted with the most
   expensive regions appearing at the top. The following describes the
   meaning of the statistics in each column:

   Count  the number of times the region is executed
   Total  the aggregate time spent in the region, inclusive of all
   sub-regions
   Self  the aggregate time spend in the region, exclusive of all
   sub-regions
   Mean  the average amount of time for one execution of the region
   Min  time of the fastest execution of the region
   Max  time of the slowest execution of the region

  52.2.2 Summarize Timings across Multiple PETs

   By default, separate timing profiles are generated for each PET in the
   application. The per-PET profiles can be aggregated together and output
   to a single file, ESMF_Profile.summary, by setting the
   ESMF_RUNTIME_PROFILE_OUTPUT environment variable as follows:

$ setenv ESMF_RUNTIME_PROFILE ON              # turn on profiling
$ setenv ESMF_RUNTIME_PROFILE_OUTPUT SUMMARY  # specify summary output

   Note the ESMF_RUNTIME_PROFILE environment variable must also be set to
   ON since this controls all profiling capabilities. The
   ESMF_Profile.summary file will contain a tree of timed regions, but
   aggregated across all PETs. For example:

Region                           PETs   PEs    Count    Mean (s)    Min (s)
Min PET Max (s)     Max PET
  [esm] Init 1                   4      4      1        4.0880      4.0878
2       4.0883      1
    [OCN-TO-ATM] IPDv05p6b       4      4      1        2.6007      2.6007
2       2.6007      3
    [ATM-TO-OCN] IPDv05p6b       4      4      1        1.4335      1.4333
0       1.4337      3
    [ATM-TO-OCN] IPDv05p4        4      4      1        0.0037      0.0007
0       0.0060      1
    [ATM] IPDv00p2               4      4      1        0.0034      0.0020
1       0.0055      0
    [ATM-TO-OCN] IPDv05p1        4      4      1        0.0020      0.0007
2       0.0033      3
    [OCN] IPDv00p2               4      4      1        0.0019      0.0015
3       0.0024      2
    [ATM-TO-OCN] IPDv05p3        4      4      1        0.0010      0.0008
0       0.0013      1
    [ATM-TO-OCN] IPDv05p2a       4      4      1        0.0009      0.0007
0       0.0012      3
    [ATM] IPDv00p1               4      4      1        0.0009      0.0007
3       0.0011      0
    [ATM-TO-OCN] IPDv05p2b       4      4      1        0.0008      0.0007
0       0.0010      3
    [ATM-TO-OCN] IPDv05p5        4      4      1        0.0008      0.0007
0       0.0010      3
    [ATM-TO-OCN] IPDv05p6a       4      4      1        0.0008      0.0005
2       0.0012      3
    [OCN-TO-ATM] IPDv05p3        4      4      1        0.0008      0.0006
2       0.0010      3
    [OCN-TO-ATM] IPDv05p4        4      4      1        0.0008      0.0006
0       0.0009      3
    [OCN-TO-ATM] IPDv05p2b       4      4      1        0.0007      0.0006
2       0.0009      3
    [OCN] IPDv00p1               4      4      1        0.0007      0.0005
1       0.0009      2
    [OCN-TO-ATM] IPDv05p2a       4      4      1        0.0007      0.0006
2       0.0009      1
    [OCN-TO-ATM] IPDv05p5        4      4      1        0.0007      0.0006
0       0.0009      3
    [OCN-TO-ATM] IPDv05p1        4      4      1        0.0006      0.0005
0       0.0008      1
    [OCN-TO-ATM] IPDv05p6a       4      4      1        0.0006      0.0004
2       0.0007      1
  [esm] RunPhase1                4      4      1        2.7444      2.7423
0       2.7454      1
    [OCN-TO-ATM] RunPhase1       4      4      864      0.6123      0.6004
2       0.6244      1
    [ATM] RunPhase1              4      4      864      0.5386      0.5296
0       0.5530      1
      ATM:ModelAdvance           4      4      864      0.3038      0.3022
0       0.3065      1
    [OCN] RunPhase1              4      4      864      0.3471      0.3256
0       0.3824      1
    [ATM-TO-OCN] RunPhase1       4      4      864      0.2843      0.1956
1       0.3345      0
  [esm] FinalizePhase1           4      4      1        0.0029      0.0029
1       0.0030      2
    [OCN-TO-ATM] FinalizePhase1  4      4      1        0.0007      0.0006
0       0.0008      3
    [ATM-TO-OCN] FinalizePhase1  4      4      1        0.0002      0.0001
3       0.0002      1
    [OCN] FinalizePhase1         4      4      1        0.0001      0.0001
3       0.0001      0
    [ATM] FinalizePhase1         4      4      1        0.0001      0.0000
0       0.0001      2

   The meaning of the statistics in each column in as follows:

   PETs  the number of reporting PETs that executed the region
   PEs  the number of PEs associated with the reporting PETs that executed
   the region
   Count  the number of times each reporting PET executed the region or
   “MULTIPLE” if not all PETs executed the region the same number of times
   Mean  the mean across all reporting PETs of the total time spent in the
   region
   Min  the minimum across all reporting PETs of the total time spent in
   the region
   Min PET  the PET that reported the minimum time
   Max  the maximum across all reporting PETs of the total time spent in
   the region
   Max PET  the PET that reported the maximum time

   Note that setting the ESMF_RUNTIME_PROFILE_PETLIST environment variable
   (described below) may reduce the number of reporting PETs. Only
   reporting PETs are included in the summary profile. To output both the
   per-PET and summary timing profiles, set the
   ESMF_RUNTIME_PROFILE_OUTPUT environment variable as follows:

$ setenv ESMF_RUNTIME_PROFILE_OUTPUT "TEXT SUMMARY"

  52.2.3 Limit the Set of Profiled PETs

   By default, all PETs in an application are profiled. It may be
   desirable to only profile a subset of PETs to reduce the amount of
   output. An explicit list of PETs can be specified by setting the
   ESMF_RUNTIME_PROFILE_PETLIST environment variable. The syntax of this
   environment variable is to list PET numbers separated by spaces. PET
   ranges are also supported using the “X-Y” syntax where X < Y. For
   example:

# only profile PETs 0, 20, and 35 through 39
$ setenv ESMF_RUNTIME_PROFILE_PETLIST "0 20 35-39"

   When used in conjunction with the SUMMARY option above, the summarized
   profile will only aggregate over the specified set of PETs. The one
   exception is that PET 0 is always profiled if ESMF_RUNTIME_PROFILE=ON,
   regardless of the ESMF_RUNTIME_TRACE_PETLIST setting.

  52.2.4 Include MPI Communication in the Profile

   MPI functions can be included in the timing profile to indicate how
   much time is spent inside communication calls. This can also help to
   determine load imbalance in the system, since large times spent inside
   MPI may indicate that communication between PETs is not tightly
   synchronized. This option includes all MPI calls in the application,
   whether or not they originate from the ESMF library. Here is a partial
   example summary profile that contains MPI times:

Region                           PETs   Count    Mean (s)    Min (s)     Min PET
 Max (s)     Max PET
  [esm] RunPhase1                8      1        4.9307      4.6867      0
 4.9656      1
    [OCN] RunPhase1              8      1824     0.8344      0.8164      0
 0.8652      1
    [MED] RunPhase1              8      1824     0.8203      0.7900      5
 0.8584      1
    [ATM] RunPhase1              8      1824     0.6387      0.6212      5
 0.6610      1
    [ATM-TO-MED] RunPhase1       8      1824     0.5975      0.5317      0
 0.6583      5
      MPI_Bcast                  8      1824     0.0443      0.0025      4
 0.1231      5
      MPI_Wait                   8      MULTIPLE 0.0421      0.0032      0
 0.0998      2
    [MED-TO-OCN] RunPhase1       8      1824     0.4879      0.4497      0
 0.5362      4
      MPI_Wait                   8      MULTIPLE 0.0234      0.0030      0
 0.0821      4
      MPI_Bcast                  8      1824     0.0111      0.0024      4
 0.0273      5
    [OCN-TO-MED] RunPhase1       8      1824     0.4541      0.4075      0
 0.4918      4
      MPI_Wait                   8      MULTIPLE 0.0339      0.0017      0
 0.0824      4
      MPI_Bcast                  8      1824     0.0194      0.0026      4
 0.0452      6
    [MED-TO-ATM] RunPhase1       8      1824     0.4487      0.4005      0
 0.4911      5
      MPI_Bcast                  8      1824     0.0338      0.0026      4
 0.0942      5
      MPI_Wait                   8      MULTIPLE 0.0241      0.0022      1
 0.0817      2
  [esm] Init 1                   8      1        0.6287      0.6287      1
 0.6287      4
    [ATM-TO-MED] IPDv05p6b       8      1        0.1501      0.1500      1
 0.1501      2
      MPI_Barrier                8      242      0.0082      0.0006      3
 0.0157      7
      MPI_Wait                   8      MULTIPLE 0.0034      0.0010      0
 0.0053      7
      MPI_Allreduce              8      62       0.0030      0.0003      3
 0.0063      7
      MPI_Alltoall               8      6        0.0015      0.0000      1
 0.0022      5
      MPI_Allgather              8      21       0.0010      0.0002      1
 0.0017      7
      MPI_Waitall                8      MULTIPLE 0.0006      0.0001      3
 0.0015      7
      MPI_Send                   8      MULTIPLE 0.0004      0.0001      7
 0.0008      6
      MPI_Allgatherv             8      6        0.0001      0.0001      4
 0.0001      0
      MPI_Scatter                8      5        0.0000      0.0000      0
 0.0000      7
      MPI_Reduce                 8      5        0.0000      0.0000      1
 0.0000      0
      MPI_Recv                   8      MULTIPLE 0.0000      0.0000      0
 0.0000      3
      MPI_Bcast                  8      1        0.0000      0.0000      0
 0.0000      7

   The procedure for including MPI functions in the timing profile depends
   on whether the application is dynamically or statically linked. Most
   applications are dynamically linked, however on some systems (such as
   Cray), static linking may be used. Note that for either option, ESMF
   must be built with ESMF_TRACE_BUILD_LIB=ON, which is the default.

   In dynamically linked applications, the LD_PRELOAD environment variable
   must be used when executing the MPI application. This instructs the
   dynamic linker to interpose certain MPI symbols so they can be captured
   by the ESMF profiler. To simplify this process, a script is provided at
   $(ESMF_INSTALL_LIBDIR)/preload.sh that sets the LD_PRELOAD variable.
   For example, if you typically execute your application as as follows:

$ mpirun -np 8 ./myApp

   then you should add the preload.sh script in front of the executable
   when starting the application as follows:

# replace $(ESMF_INSTALL_LIBDIR) with absolute path to the ESMF installation lib
 directory
$ mpirun -np 8 $(ESMF_INSTALL_LIBDIR)/preload.sh ./myApp

   An advantage of this approach is that your application does not need to
   be recompiled. The MPI timing information will be included in the
   per-PET profiles and/or the summary profile, depending on the setting
   of ESMF_RUNTIME_PROFILE_OUTPUT.

   In statically linked applications, the application must be re-linked
   with specific options provided to the linker. These options instruct
   the linker to wrap the MPI symbols with the ESMF profiling functions.
   The linking flags that must be provided are included in the esmf.mk
   Makefile fragment that is part of the ESMF installation. These link
   flags should be imported into your application Makefile, and included
   in the final link command. To do this, first import the esmf.mk file
   into your application Makefile. The path to this file is typically
   stored in the ESMFMKFILE environment variable. Then, pass the variables
   $(ESMF_TRACE_STATICLINKOPTS) and $(ESMF_TRACE_STATICLINKLIBS) to the
   final linking command. For example:

# import esmf.mk
include $(ESMFMKFILE)

# other makefile targets here...

# example final link command, with $(ESMF_TRACE_STATICLINKOPTS) and $(ESMF_TRACE
_STATICLINKLIBS) added
myApp: myApp.o driver.o model.o
        $(ESMF_F90LINKER) $(ESMF_F90LINKOPTS) $(ESMF_F90LINKPATHS) $(ESMF_F90LIN
KRPATHS) -o $@ $^ $(ESMF_F90ESMFLINKLIBS) $(ESMF_TRACE_STATICLINKOPTS) $(ESMF_TR
ACE_STATICLINKLIBS)

   This option will statically wrap all of the MPI functions and include
   them in the profile output. Execute the application in the normal way
   with the environment variable ESMF_RUNTIME_PROFILE set to ON. You will
   see the MPI functions included in the timing profile.

  52.2.5 Output a Detailed Trace for Analysis

   ESMF tracing is disabled by default. To enable tracing, set the
   ESMF_RUNTIME_TRACE environment variable to ON. You do not need to
   recompile your code to enable tracing.

# csh shell
$ setenv ESMF_RUNTIME_TRACE ON

# bash shell
$ export ESMF_RUNTIME_TRACE=ON

   When enabled, the default behavior is to trace all PETs of the ESMF
   application. Although the ESMF tracer is designed to write events in a
   compact form, tracing can produce an extremely large number of events
   depending on the total number of PETs and the length of the run. To
   reduce output, it is possible to restrict the PETs that produce trace
   output by setting the ESMF_RUNTIME_TRACE_PETLIST environment variable.
   For example, this setting:

$ setenv ESMF_RUNTIME_TRACE_PETLIST "0 101 192-196"

   will instruct the tracer to only trace PETs 0, 101, and 192 through 196
   (inclusive). The syntax of this environment variable is to list PET
   numbers separated by spaces. PET ranges are also supported using the
   “X-Y” syntax where X < Y. For PET counts greater than 100, it is
   recommended to set this environment variable. The one exception is that
   PET 0 is always traced, regardless of the ESMF_RUNTIME_TRACE_PETLIST
   setting.

   ESMF's profiling and tracing options can be used together. A typical
   use would be to set ESMF_RUNTIME_PROFILE=ON for all PETs to capture
   summary timings, and set ESMF_RUNTIME_TRACE=ON and
   ESMF_RUNTIME_TRACE_PETLIST to a subset of of PETs, such as the root PET
   of each ESMF component. This helps to keep trace sizes small while
   still providing timing summaries over all PETs.

   When tracing is enabled, phase_enter and phase_exit events will
   automatically be recorded for all initialize, run, and finalize phases
   of all Components in the application. To trace only user-instrumented
   regions (via the ESMF_TraceRegionEnter() and ESMF_TraceRegionExit()
   calls), Component-level tracing can be turned off by setting:

$ setenv ESMF_RUNTIME_TRACE_COMPONENT OFF

   After running an ESMF application with tracing enabled, a directory
   called traceout will be created in the run directory and it will
   contain a metadata file and an event stream file esmf_stream_XXXX for
   each PET with tracing enabled. Together these files form a valid CTF
   trace which may be analyzed with any of the tools listed above.

   Trace events are flushed to file at a regular interval. If the
   application crashes, some of the most recent events may not be flushed
   to file. To maximize the number of events appearing in the trace, an
   option is available to flush events to file more frequently. Because
   this option may have negative performance implications due to increased
   file I/O, it is not recommended unless needed. To turn on eager
   flushing use:

$ setenv ESMF_RUNTIME_TRACE_FLUSH EAGER

  52.2.6 Set the Clock used for Profiling/Tracing

   There are three options for the kind of clock to use to timestamp
   events when profiling/tracing an application. These options are
   controlled by setting the environment variable
   ESMF_RUNTIME_TRACE_CLOCK.

   REALTIME  The REALTIME clock timestamps events with the current time on
   the system. This is the default clock if the above environment variable
   is not set. This setting can be useful when tracing PETs that span
   multiple physical computing nodes assuming that the system clocks on
   each node are adequately synchronized. On most HPC systems, system
   clocks are periodically updated to stay in sync. A disadvantage of this
   clock is that periodic adjustments mean the clock is not monotonically
   increasing so some timings may be inaccurate if the system clock jumps
   forward or backward significantly. Testing has shown that this is not
   typically an issue on most systems.
   MONOTONIC  The MONOTONIC clock is guaranteed to be monotonically
   increasing and does not suffer from periodic adjustments. The
   timestamps represent an amount of time since some arbitrary point in
   the past. There is no guarantee that these timestamps will be
   synchronized across physical computing nodes, so this option should
   only be used for tracing a set of PETs running on a single physical
   machine.
   MONOTONIC_SYNC  The MONOTONIC_SYNC clock is similar to the MONOTONIC
   clock in that it is guaranteed to be monotonically increasing. In
   addition, at application startup, all PET clocks are synchronized to a
   common time by determining a PET-local offset to be applied to
   timestamps. Therefore this option can be used to compare trace streams
   across physical nodes.

  52.2.7 Tracing a simple ESMF application

   This example illustrates how to trace a simple ESMF application and
   print the event stream using Babeltrace. The first part of the code is
   a module representing a trivial ESMF Gridded Component. The second part
   is a main program that creates and executes the component.

module SimpleComp

  use ESMF
  implicit none

  private
  public SetServices

contains

  subroutine SetServices(gcomp, rc)
      type(ESMF_GridComp)   :: gcomp
      integer, intent(out)  :: rc

      call ESMF_GridCompSetEntryPoint(gcomp, ESMF_METHOD_INITIALIZE, &
           userRoutine=Init, rc=rc)
      call ESMF_GridCompSetEntryPoint(gcomp, ESMF_METHOD_RUN, &
           userRoutine=Run, rc=rc)
      call ESMF_GridCompSetEntryPoint(gcomp, ESMF_METHOD_FINALIZE, &
           userRoutine=Finalize, rc=rc)

      rc = ESMF_SUCCESS

    end subroutine SetServices

    subroutine Init(gcomp, istate, estate, clock, rc)
      type(ESMF_GridComp):: gcomp
      type(ESMF_State):: istate, estate
      type(ESMF_Clock):: clock
      integer, intent(out):: rc

      print *, "Inside Init"

    end subroutine Init

    subroutine Run(gcomp, istate, estate, clock, rc)
      type(ESMF_GridComp):: gcomp
      type(ESMF_State):: istate, estate
      type(ESMF_Clock):: clock
      integer, intent(out):: rc

      print *, "Inside Run"

    end subroutine Run

    subroutine Finalize(gcomp, istate, estate, clock, rc)
      type(ESMF_GridComp):: gcomp
      type(ESMF_State):: istate, estate
      type(ESMF_Clock):: clock
      integer, intent(out):: rc

    print *, "Inside Finalize"

  end subroutine Finalize

end module SimpleComp

program ESMF_TraceEx

      ! Use ESMF framework module
      use ESMF
      use SimpleComp, only: SetServices

      implicit none

      ! Local variables
      integer :: rc, finalrc, i
      type(ESMF_GridComp)     :: gridcomp

      ! initialize ESMF
      finalrc = ESMF_SUCCESS
      call ESMF_Initialize(vm=vm, defaultlogfilename="TraceEx.Log", &
                    logkindflag=ESMF_LOGKIND_MULTI, rc=rc)

      ! create the component and then execute
      ! initialize, run, and finalize routines
      gridcomp = ESMF_GridCompCreate(name="test", rc=rc)

      call ESMF_GridCompSetServices(gridcomp, userRoutine=SetServices, rc=rc)

      call ESMF_GridCompInitialize(gridcomp, rc=rc)

      do i=1, 5
         call ESMF_GridCompRun(gridcomp, rc=rc)
      enddo

      call ESMF_GridCompFinalize(gridcomp, rc=rc)

      call ESMF_GridCompDestroy(gridcomp, rc=rc)

      call ESMF_Finalize(rc=rc)

end program ESMF_TraceEx

   Assuming the code above is executed on four PETs with the environment
   variable ESMF_RUNTIME_TRACE set to ON, then a folder will be created in
   the run directory called traceout containing a metadata file and four
   event stream files named esmf_stream_XXXX where XXXX is the PET number.
   If Babeltrace is available on the system, the list of events can be
   printed by executing the following from the run directory:
   $ babeltrace ./traceout

   For details about iterating over trace events and performing analyses
   on CTF traces, see the corresponding documentation in the tools listed
   in Section [636]52.1.2.

  52.2.8 Profiling/Tracing User-defined Code Regions

   This example illustrates how to manually instrument code with entry and
   exit points for user-defined code regions. Note that the API calls
   ESMF_TraceRegionEnter and ESMF_TraceRegionExit should always appear in
   pairs, wrapping a particular section of code. The environment variable
   ESMF_RUNTIME_TRACE or ESMF_RUNTIME_PROFILE must be set to ON to enable
   these regions. If not at least one is set, the calls to
   ESMF_TraceRegionEnter and ESMF_TraceRegionExit will simply return
   immediately. For this reason, it is safe to leave this instrumentation
   in application code, even when not being profiled.

      ! Use ESMF framework module
      use ESMF

      implicit none

      ! Local variables
      integer :: rc, finalrc
      integer :: i, j, tmp

      ! initialize ESMF
      finalrc = ESMF_SUCCESS
      call ESMF_Initialize(vm=vm, defaultlogfilename="TraceUserEx.Log", &
                    logkindflag=ESMF_LOGKIND_MULTI, rc=rc)

      ! record entrance into "outer_region"
      call ESMF_TraceRegionEnter("outer_region", rc=rc)

      tmp = 0
      do i=1, 10

         ! record entrance into "inner_region_1"
         call ESMF_TraceRegionEnter("inner_region_1", rc=rc)
         ! arbitrary computation
         do j=1,10000
            tmp=tmp+j+i
         enddo
         ! record exit from "inner_region_1"
         call ESMF_TraceRegionExit("inner_region_1", rc=rc)

         tmp = 0

         ! record entrance into "inner_region_2"
         call ESMF_TraceRegionEnter("inner_region_2", rc=rc)
         ! arbitrary computation
         do j=1,5000
            tmp=tmp+j+i
         enddo
         ! record exit from "inner_region_2"
         call ESMF_TraceRegionExit("inner_region_2", rc=rc)
      enddo

      ! record exit from "outer_region"
      call ESMF_TraceRegionExit("outer_region", rc=rc)

      call ESMF_Finalize(rc=rc)

52.3 Restrictions and Future Work

    1. Limited types of trace events. Currently only a few trace event
       types are available. The tracer may be extended in the future to
       record additional types of events.

52.4 Class API

