          + [486]32 LocStream Class
               o [487]32.1 Description
               o [488]32.2 Constants
                    # [489]32.2.1 Coordinate keyNames
                    # [490]32.2.2 Masking keyName
               o [491]32.3 Use and Examples
                    # [492]32.3.1 Create a LocStream with user allocated
                      memory
                    # [493]32.3.2 Create a LocStream with internally
                      allocated memory
                    # [494]32.3.3 Create a LocStream with a distribution
                      based on a Grid
                    # [495]32.3.4 Regridding from a Grid to a LocStream
               o [496]32.4 Class API
                    # [497]32.4.1 ESMF_LocStreamAssignment(=)
                    # [498]32.4.2 ESMF_LocStreamOperator(==)
                    # [499]32.4.3 ESMF_LocStreamOperator(/=)
                    # [500]32.4.4 ESMF_LocStreamAddKey
                    # [501]32.4.5 ESMF_LocStreamAddKey
                    # [502]32.4.6 ESMF_LocStreamAddKey
                    # [503]32.4.7 ESMF_LocStreamCreate
                    # [504]32.4.8 ESMF_LocStreamCreate
                    # [505]32.4.9 ESMF_LocStreamCreate
                    # [506]32.4.10 ESMF_LocStreamCreate
                    # [507]32.4.11 ESMF_LocStreamCreate
                    # [508]32.4.12 ESMF_LocStreamCreate
                    # [509]32.4.13 ESMF_LocStreamCreate
                    # [510]32.4.14 ESMF_LocStreamCreate
                    # [511]32.4.15 ESMF_LocStreamDestroy
                    # [512]32.4.16 ESMF_LocStreamGet
                    # [513]32.4.17 ESMF_LocStreamGetBounds
                    # [514]32.4.18 ESMF_LocStreamGetKey
                    # [515]32.4.19 ESMF_LocStreamGetKey
                    # [516]32.4.20 ESMF_LocStreamGetKey
                    # [517]32.4.21 ESMF_LocStreamIsCreated
                    # [518]32.4.22 ESMF_LocStreamPrint
                    # [519]32.4.23 ESMF_LocStreamValidate
                               32 LocStream Class

32.1 Description

   A location stream (LocStream) can be used to represent the locations of
   a set of data points. For example, in the data assimilation world,
   LocStreams can be used to represent a set of observations. The values
   of the data points are stored within a Field or FieldBundle created
   using the LocStream.

   The locations are generally described using Cartesian (x, y, z), or
   (lat, lon, radius) coordinates. The coordinates are stored using
   constructs called keys. A Key is essentially a list of point
   descriptors, one for each data point. They may hold other information
   besides the coordinates - a mask, for example. They may also hold a
   second set of coordinates. Keys are referenced by name - see
   [1432]32.2.1 and [1433]32.2.2 for specific keynames required in
   regridding. Each key must contain the same number of elements as there
   are data points in the LocStream. While there is no assumption in the
   ordering of the points, the order chosen must be maintained in each of
   the keys.

   LocStreams can be very large. Data assimilation systems might use
   LocStreams with up to $10^{8}$ observations, so efficiency is critical.
   LocStreams can be created from file, see [1434]32.4.14.

   Common operations involving LocStreams are similar to those involving
   Grids. For example, LocStreams allow users to:

    1. Create a Field or FieldBundle on a LocStream
    2. Regrid data in Fields defined on LocStreams
    3. Redistribute data between Fields defined on LocStreams
    4. Gather or scatter a FieldBundle defined on a LocStream from/to a
       root DE
    5. Extract Fortran array from Field which was defined on a LocStream

   A LocStream differs from a Grid in that no topological structure is
   maintained between the points (e.g. the class contains no information
   about which point is the neighbor of which other point).

   A LocStream is similar to a Mesh in that both are collections of
   irregularly positioned points. However, the two structures differ
   because a Mesh also has connectivity: each data point represents either
   a center or corner of a cell. There is no requirement that the points
   in a LocStream have connectivity, in fact there is no requirement that
   any two points have any particular spatial relationship at all.

32.2 Constants

  32.2.1 Coordinate keyNames

   DESCRIPTION:
   For ESMF to be able to use coordinates specified in a LocStream key
   (e.g. in regridding) they need to be named with the appropriate
   identifiers. The particular identifiers depend on the coordinate system
   (i.e. coordSys argument) used to create the LocStream containing the
   keys. ESMF regridding expects these keys to be of type
   ESMF_TYPEKIND_R8.

   The valid values are:

   Coordinate System     dimension 1 dimension 2 dimension 3 (if used)
   ESMF_COORDSYS_SPH_DEG  ESMF:Lon    ESMF:Lat        ESMF:Radius
   ESMF_COORDSYS_SPH_RAD  ESMF:Lon    ESMF:Lat        ESMF:Radius
   ESMF_COORDSYS_CART      ESMF:X      ESMF:Y           ESMF:Z

  32.2.2 Masking keyName

   DESCRIPTION:
   Points within a LocStream can be marked and then potentially ignored
   during certain operations, like regridding. This masking information
   must be contained in a key named with the appropriate identifier. ESMF
   regridding expects this key to be of type ESMF_TYPEKIND_I4.

   The valid value is:

   ESMF:Mask

32.3 Use and Examples

  32.3.1 Create a LocStream with user allocated memory

   The following is an example of creating a LocStream object. After
   creation, key data is added, and a Field is created to hold data
   (temperature) at each location.

   !-------------------------------------------------------------------
   ! Get parallel information. Here petCount is the total number of
   ! running PETs, and localPet is the number of this particular PET.
   !-------------------------------------------------------------------
   call ESMF_VMGet(vm, localPet=localPet, petCount=petCount, rc=rc)

   !-------------------------------------------------------------------
   ! Allocate and set example location information. Locations on a PET
   ! are wrapped around sphere. Each PET occupies a different latitude
   ! ranging from +50.0 to -50.0.
   !-------------------------------------------------------------------
   numLocations = 20
   allocate(lon(numLocations))
   allocate(lat(numLocations))

   do i=1,numLocations
      lon(i)=360.0*i/numLocations
      lat(i)=100*REAL(localPet,ESMF_KIND_R8)/REAL(petCount,ESMF_KIND_R8)-50.0
   enddo

   !-------------------------------------------------------------------
   ! Allocate and set example Field data
   !-------------------------------------------------------------------
   allocate(temperature(numLocations))

   do i=1,numLocations
      temperature(i)= 300 - abs(lat(i))
   enddo

   !-------------------------------------------------------------------
   ! Create the LocStream:  Allocate space for the LocStream object,
   ! define the number and distribution of the locations.
   !-------------------------------------------------------------------
   locstream=ESMF_LocStreamCreate(name="Temperature Measurements",   &
                                  localCount=numLocations, &
                                  coordSys=ESMF_COORDSYS_SPH_DEG,   &
                                  rc=rc)

   !-------------------------------------------------------------------
   ! Add key data, referencing a user data pointer. By changing the
   ! datacopyflag to ESMF_DATACOPY_VALUE an internally allocated copy of the
   ! user data may also be set.
   !-------------------------------------------------------------------
   call ESMF_LocStreamAddKey(locstream,              &
                             keyName="ESMF:Lat",     &
                             farray=lat,             &
                             datacopyflag=ESMF_DATACOPY_REFERENCE, &
                             keyUnits="Degrees",     &
                             keyLongName="Latitude", rc=rc)

   call ESMF_LocStreamAddKey(locstream,              &
                             keyName="ESMF:Lon",     &
                             farray=lon,             &
                             datacopyflag=ESMF_DATACOPY_REFERENCE, &
                             keyUnits="Degrees",     &
                             keyLongName="Longitude", rc=rc)

   !-------------------------------------------------------------------
   ! Create a Field on the Location Stream. In this case the
   ! Field is created from a user array, but any of the other
   ! Field create methods (e.g. from ArraySpec) would also apply.
   !-------------------------------------------------------------------
   field_temperature=ESMF_FieldCreate(locstream,   &
                                   temperature, &
                                   name="temperature", &
                                   rc=rc)

  32.3.2 Create a LocStream with internally allocated memory

   The following is an example of creating a LocStream object. After
   creation, key data is internally allocated, the pointer is retrieved,
   and the data is set. A Field is also created on the LocStream to hold
   data (temperature) at each location.

   !-------------------------------------------------------------------
   ! Get parallel information. Here petCount is the total number of
   ! running PETs, and localPet is the number of this particular PET.
   !-------------------------------------------------------------------
   call ESMF_VMGet(vm, localPet=localPet, petCount=petCount, rc=rc)

   numLocations = 20

   !-------------------------------------------------------------------
   ! Create the LocStream:  Allocate space for the LocStream object,
   ! define the number and distribution of the locations.
   !-------------------------------------------------------------------
   locstream=ESMF_LocStreamCreate(name="Temperature Measurements",   &
                                  localCount=numLocations, &
                                  coordSys=ESMF_COORDSYS_SPH_DEG,   &
                                  rc=rc)

   !-------------------------------------------------------------------
   ! Add key data (internally allocating memory).
   !-------------------------------------------------------------------
   call ESMF_LocStreamAddKey(locstream,                    &
                             keyName="ESMF:Lat",           &
                             KeyTypeKind=ESMF_TYPEKIND_R8, &
                             keyUnits="Degrees",           &
                             keyLongName="Latitude", rc=rc)

   call ESMF_LocStreamAddKey(locstream,                    &
                             keyName="ESMF:Lon",           &
                             KeyTypeKind=ESMF_TYPEKIND_R8, &
                             keyUnits="Degrees",           &
                             keyLongName="Longitude", rc=rc)

   !-------------------------------------------------------------------
   ! Get key data.
   !-------------------------------------------------------------------
   call ESMF_LocStreamGetKey(locstream,                    &
                             keyName="ESMF:Lat",           &
                             farray=lat,                   &
                             rc=rc)

   call ESMF_LocStreamGetKey(locstream,                    &
                             keyName="ESMF:Lon",           &
                             farray=lon,                   &
                             rc=rc)

   !-------------------------------------------------------------------
   ! Set example location information. Locations on a PET are wrapped
   ! around sphere. Each PET occupies a different latitude ranging
   ! from +50.0 to -50.0.
   !-------------------------------------------------------------------
   do i=1,numLocations
      lon(i)=360.0*i/numLocations
      lat(i)=100*REAL(localPet,ESMF_KIND_R8)/REAL(petCount,ESMF_KIND_R8)-50.0
   enddo


   !-------------------------------------------------------------------
   ! Allocate and set example Field data
   !-------------------------------------------------------------------
   allocate(temperature(numLocations))
   do i=1,numLocations
      temperature(i)= 300 - abs(lat(i))
   enddo

   !-------------------------------------------------------------------
   ! Create a Field on the Location Stream. In this case the
   ! Field is created from a user array, but any of the other
   ! Field create methods (e.g. from ArraySpec) would also apply.
   !-------------------------------------------------------------------
   field_temperature=ESMF_FieldCreate(locstream,   &
                                 temperature, &
                                 name="temperature", &
                                 rc=rc)

  32.3.3 Create a LocStream with a distribution based on a Grid

   The following is an example of using the LocStream create from
   background Grid capability. Using this capability, the newly created
   LocStream is a copy of the old LocStream, but with a new distribution.
   The new LocStream is distributed such that if the coordinates of a
   location in the LocStream lie within a Grid cell, then that location is
   put on the same PET as the Grid cell.

   !-------------------------------------------------------------------
   ! Get parallel information. Here petCount is the total number of
   ! running PETs, and localPet is the number of this particular PET.
   !-------------------------------------------------------------------
   call ESMF_VMGet(vm, localPet=localPet, petCount=petCount, rc=rc)

   !-------------------------------------------------------------------
   ! Create the LocStream:  Allocate space for the LocStream object,
   ! define the number and distribution of the locations.
   !-------------------------------------------------------------------
   numLocations = 20
   locstream=ESMF_LocStreamCreate(name="Temperature Measurements",   &
                                  localCount=numLocations, &
                                  coordSys=ESMF_COORDSYS_SPH_DEG,   &
                                  rc=rc)

   !-------------------------------------------------------------------
   ! Add key data (internally allocating memory).
   !-------------------------------------------------------------------
   call ESMF_LocStreamAddKey(locstream,                    &
                             keyName="ESMF:Lon",           &
                             KeyTypeKind=ESMF_TYPEKIND_R8, &
                             keyUnits="Degrees",           &
                             keyLongName="Longitude", rc=rc)

   call ESMF_LocStreamAddKey(locstream,                    &
                             keyName="ESMF:Lat",           &
                             KeyTypeKind=ESMF_TYPEKIND_R8, &
                             keyUnits="Degrees",           &
                             keyLongName="Latitude", rc=rc)

   !-------------------------------------------------------------------
   ! Get Fortran arrays which hold the key data, so that it can be set.
   !-------------------------------------------------------------------
   call ESMF_LocStreamGetKey(locstream,                    &
                             keyName="ESMF:Lon",           &
                             farray=lon,                   &
                             rc=rc)

   call ESMF_LocStreamGetKey(locstream,                    &
                             keyName="ESMF:Lat",           &
                             farray=lat,                   &
                             rc=rc)

   !-------------------------------------------------------------------
   ! Set example location information. Locations on a PET are wrapped
   ! around sphere. Each PET occupies a different latitude ranging
   ! from +50.0 to -50.0.
   !-------------------------------------------------------------------
   do i=1,numLocations
      lon(i)=360.0*i/numLocations
      lat(i)=100*REAL(localPet,ESMF_KIND_R8)/REAL(petCount,ESMF_KIND_R8)-50.0
   enddo

   !-------------------------------------------------------------------
   ! Create a Grid to use as the background. The Grid is
   ! GridLonSize by GridLatSize with the default distribution
   ! (The first dimension split across the PETs). The coordinate range
   ! is  0 to 360 in longitude and -90 to 90 in latitude. Note that we
   ! use indexflag=ESMF_INDEX_GLOBAL for the Grid creation. At this time
   ! this is required for a Grid to be usable as a background Grid.
   ! Note that here the points are treated as cartesian.
   !-------------------------------------------------------------------
   grid=ESMF_GridCreateNoPeriDim(maxIndex=(/GridLonSize,GridLatSize/), &
                                 coordSys=ESMF_COORDSYS_SPH_DEG,       &
                                 indexflag=ESMF_INDEX_GLOBAL,          &
                                 rc=rc)

   !-------------------------------------------------------------------
   ! Allocate the corner stagger location in which to put the coordinates.
   ! (The corner stagger must be used for the Grid to be usable as a
   !  background Grid.)
   !-------------------------------------------------------------------
   call ESMF_GridAddCoord(grid, staggerloc=ESMF_STAGGERLOC_CORNER, rc=rc)

   !-------------------------------------------------------------------
   ! Get access to the Fortran array pointers that hold the Grid
   ! coordinate information and then set the coordinates to be uniformly
   ! distributed around the globe.
   !-------------------------------------------------------------------
   call ESMF_GridGetCoord(grid,                                  &
                          staggerLoc=ESMF_STAGGERLOC_CORNER,     &
                          coordDim=1, computationalLBound=clbnd, &
                          computationalUBound=cubnd,             &
                          farrayPtr=farrayPtrLonC, rc=rc)

   call ESMF_GridGetCoord(grid,                                  &
                         staggerLoc=ESMF_STAGGERLOC_CORNER,      &
                          coordDim=2, farrayPtr=farrayPtrLatC, rc=rc)

   do i1=clbnd(1),cubnd(1)
   do i2=clbnd(2),cubnd(2)
      ! Set Grid longitude coordinates as 0 to 360
      farrayPtrLonC(i1,i2) = REAL(i1-1)*360.0/REAL(GridLonSize)

      ! Set Grid latitude coordinates as -90 to 90
      farrayPtrLatC(i1,i2) = -90. + REAL(i2-1)*180.0/REAL(GridLatSize) + &
                                      0.5*180.0/REAL(GridLatSize)
   enddo
   enddo


   !-------------------------------------------------------------------
   ! Create newLocstream on the background Grid using the
   ! "Lon" and "Lat" keys as the coordinates for the entries in
   ! locstream. The entries in newLocstream with coordinates (lon,lat)
   ! are on the same PET as the piece of grid which contains (lon,lat).
   !-------------------------------------------------------------------
   newLocstream=ESMF_LocStreamCreate(locstream, &
                  background=grid, rc=rc)


   !-------------------------------------------------------------------
   ! A Field can now be created on newLocstream and
   ! ESMF_FieldRedist() can be used to move data between Fields built
   ! on locstream and Fields built on newLocstream.
   !-------------------------------------------------------------------

  32.3.4 Regridding from a Grid to a LocStream

   The following is an example of how a LocStream object can be used in
   regridding.

   !-------------------------------------------------------------------
   ! Create a global Grid to use as the regridding source. The Grid is
   ! GridLonSize by GridLatSize with the default distribution
   ! (The first dimension split across the PETs). The coordinate range
   ! is  0 to 360 in longitude and -90 to 90 in latitude. Note that we
   ! use indexflag=ESMF_INDEX_GLOBAL for the Grid creation to calculate
   ! coordinates across PETs.
   !-------------------------------------------------------------------
   grid=ESMF_GridCreate1PeriDim(maxIndex=(/GridLonSize,GridLatSize/), &
                                coordSys=ESMF_COORDSYS_SPH_DEG,       &
                                indexflag=ESMF_INDEX_GLOBAL,          &
                                rc=rc)

   !-------------------------------------------------------------------
   ! Allocate the center stagger location in which to put the coordinates.
   !-------------------------------------------------------------------
   call ESMF_GridAddCoord(grid, staggerloc=ESMF_STAGGERLOC_CENTER, rc=rc)

   !-------------------------------------------------------------------
   ! Get access to the Fortran array pointers that hold the Grid
   ! coordinate information.
   !-------------------------------------------------------------------
   ! Longitudes
   call ESMF_GridGetCoord(grid,                                  &
                          staggerLoc=ESMF_STAGGERLOC_CENTER,     &
                          coordDim=1, computationalLBound=clbnd, &
                          computationalUBound=cubnd,             &
                          farrayPtr=farrayPtrLonC, rc=rc)

   ! Latitudes
   call ESMF_GridGetCoord(grid,                                  &
                          staggerLoc=ESMF_STAGGERLOC_CENTER,     &
                          coordDim=2, computationalLBound=clbnd, &
                          computationalUBound=cubnd,             &
                          farrayPtr=farrayPtrLatC, rc=rc)

   !-------------------------------------------------------------------
   ! Create a source Field to hold the data to be regridded to the
   ! destination
   !-------------------------------------------------------------------
   srcField = ESMF_FieldCreate(grid, typekind=ESMF_TYPEKIND_R8,   &
                               staggerloc=ESMF_STAGGERLOC_CENTER, &
                               name="source", rc=rc)

   !-------------------------------------------------------------------
   ! Set the Grid coordinates to be uniformly distributed around the globe.
   !-------------------------------------------------------------------
   do i1=clbnd(1),cubnd(1)
   do i2=clbnd(2),cubnd(2)
      ! Set Grid longitude coordinates as 0 to 360
      farrayPtrLonC(i1,i2) = REAL(i1-1)*360.0/REAL(GridLonSize)

      ! Set Grid latitude coordinates as -90 to 90
      farrayPtrLatC(i1,i2) = -90. + REAL(i2-1)*180.0/REAL(GridLatSize) + &
                                       0.5*180.0/REAL(GridLatSize)

   enddo
   enddo

   !-------------------------------------------------------------------
   ! Set the number of points the destination LocStream will have
   ! depending on the PET.
   !-------------------------------------------------------------------
   if (petCount .eq. 1) then
     numLocationsOnThisPet=7
   else
     if (localpet .eq. 0) then
       numLocationsOnThisPet=2
     else if (localpet .eq. 1) then
       numLocationsOnThisPet=2
     else if (localpet .eq. 2) then
       numLocationsOnThisPet=2
     else if (localpet .eq. 3) then
       numLocationsOnThisPet=1
     endif
   endif

   !-------------------------------------------------------------------
   ! Create the LocStream:  Allocate space for the LocStream object,
   ! define the number of locations on this PET.
   !-------------------------------------------------------------------
   locstream=ESMF_LocStreamCreate(name="Test Data",                 &
                                  localCount=numLocationsOnThisPet, &
                                  coordSys=ESMF_COORDSYS_SPH_DEG,   &
                                  rc=rc)

   !-------------------------------------------------------------------
   ! Add key data to LocStream(internally allocating memory).
   !-------------------------------------------------------------------
   call ESMF_LocStreamAddKey(locstream,                    &
                             keyName="ESMF:Lat",           &
                             KeyTypeKind=ESMF_TYPEKIND_R8, &
                             keyUnits="degrees",           &
                             keyLongName="Latitude", rc=rc)

   call ESMF_LocStreamAddKey(locstream,                    &
                             keyName="ESMF:Lon",           &
                             KeyTypeKind=ESMF_TYPEKIND_R8, &
                             keyUnits="degrees",           &
                             keyLongName="Longitude", rc=rc)

   !-------------------------------------------------------------------
   ! Get access to the Fortran array pointers that hold the key data.
   !-------------------------------------------------------------------
   ! Longitudes
   call ESMF_LocStreamGetKey(locstream,           &
                             keyName="ESMF:Lon",  &
                             farray=lonArray,     &
                             rc=rc)

   ! Latitudes
   call ESMF_LocStreamGetKey(locstream,           &
                             keyName="ESMF:Lat",  &
                             farray=latArray,     &
                             rc=rc)

   !-------------------------------------------------------------------
   ! Set coordinates in key arrays depending on the PET.
   ! For this example use an arbitrary set of points around globe.
   !-------------------------------------------------------------------
   if (petCount .eq. 1) then
     latArray = (/-87.75, -56.25, -26.5, 0.0, 26.5, 56.25, 87.75 /)
     lonArray = (/51.4, 102.8, 154.2, 205.6, 257.0, 308.4, 359.8 /)
   else
     if (localpet .eq. 0) then
       latArray = (/ -87.75, -56.25 /)
       lonArray = (/ 51.4, 102.8 /)
     else if (localpet .eq.1) then
       latArray = (/ -26.5, 0.0 /)
       lonArray = (/ 154.2, 205.6 /)
     else if (localpet .eq.2) then
       latArray = (/ 26.5, 56.25 /)
       lonArray = (/ 257.0, 308.4 /)
     else if (localpet .eq.3) then
       latArray = (/ 87.75 /)
       lonArray = (/ 359.8 /)
     endif
   endif

   !-------------------------------------------------------------------
   ! Create the destination Field on the LocStream to hold the
   ! result of the regridding.
   !-------------------------------------------------------------------
   dstField = ESMF_FieldCreate(locstream, typekind=ESMF_TYPEKIND_R8, &
                               name="dest", rc=rc)

   !-------------------------------------------------------------------
   ! Calculate the RouteHandle that represents the regridding from
   ! the source to destination Field using the Bilinear regridding method.
   !-------------------------------------------------------------------
   call ESMF_FieldRegridStore( srcField=srcField,                       &
                               dstField=dstField,                       &
                               routeHandle=routeHandle,                 &
                               regridmethod=ESMF_REGRIDMETHOD_BILINEAR, &
                               rc=rc)

   !-------------------------------------------------------------------
   ! Regrid from srcField to dstField
   !-------------------------------------------------------------------
   ! Can loop here regridding from srcField to dstField as src data changes
   ! do i=1,...

        ! (Put data into srcField)

        !-------------------------------------------------------------------
        ! Use the RouteHandle to regrid data from srcField to dstField.
        !-------------------------------------------------------------------
        call ESMF_FieldRegrid(srcField, dstField, routeHandle, rc=rc)

        ! (Can now use the data in dstField)

   ! enddo

   !-------------------------------------------------------------------
   ! Now that we are done, release the RouteHandle freeing its memory.
   !-------------------------------------------------------------------
   call ESMF_FieldRegridRelease(routeHandle, rc=rc)

32.4 Class API

  32.4.1 ESMF_LocStreamAssignment(=) - LocStream assignment

   INTERFACE:
     interface assignment(=)
     locstream1 = locstream2

   ARGUMENTS:
     type(ESMF_LocStream) :: locstream1
     type(ESMF_LocStream) :: locstream2

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Assign locstream1 as an alias to the same ESMF LocStream object in
   memory as locstream2. If locstream2 is invalid, then locstream1 will be
   equally invalid after the assignment.

   The arguments are:

   locstream1
          The ESMF_LocStream object on the left hand side of the
          assignment.

   locstream2
          The ESMF_LocStream object on the right hand side of the
          assignment.

  32.4.2 ESMF_LocStreamOperator(==) - LocStream equality operator

   INTERFACE:
   interface operator(==)
     if (locstream1 == locstream2) then ... endif
               OR
     result = (locstream1 == locstream2)

   RETURN VALUE:
     logical :: result

   ARGUMENTS:
     type(ESMF_LocStream), intent(in) :: locstream1
     type(ESMF_LocStream), intent(in) :: locstream2

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Test whether locstream1 and locstream2 are valid aliases to the same
   ESMF LocStream object in memory. For a more general comparison of two
   ESMF LocStreams, going beyond the simple alias test, the
   ESMF_LocStreamMatch() function (not yet implemented) must be used.

   The arguments are:

   locstream1
          The ESMF_LocStream object on the left hand side of the equality
          operation.

   locstream2
          The ESMF_LocStream object on the right hand side of the equality
          operation.

  32.4.3 ESMF_LocStreamOperator(/=) - LocStream not equal operator

   INTERFACE:
   interface operator(/=)
     if (locstream1 /= locstream2) then ... endif
               OR
     result = (locstream1 /= locstream2)

   RETURN VALUE:
     logical :: result

   ARGUMENTS:
     type(ESMF_LocStream), intent(in) :: locstream1
     type(ESMF_LocStream), intent(in) :: locstream2

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Test whether locstream1 and locstream2 are not valid aliases to the
   same ESMF LocStream object in memory. For a more general comparison of
   two ESMF LocStreams, going beyond the simple alias test, the
   ESMF_LocStreamMatch() function (not yet implemented) must be used.

   The arguments are:

   locstream1
          The ESMF_LocStream object on the left hand side of the
          non-equality operation.

   locstream2
          The ESMF_LocStream object on the right hand side of the
          non-equality operation.

