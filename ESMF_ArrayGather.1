  28.5.17 ESMF_ArrayGather - Gather a Fortran array from an ESMF_Array

   INTERFACE:
   subroutine ESMF_ArrayGather(array, farray, rootPet, tile, vm, rc)

   ARGUMENTS:
   type(ESMF_Array), intent(in) :: array
   <type>(ESMF_KIND_<kind>), intent(out), target :: farray(<rank>)
   integer, intent(in) :: rootPet
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   integer, intent(in), optional :: tile
   type(ESMF_VM), intent(in), optional :: vm
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Gather the data of an ESMF_Array object into the farray located on
   rootPET. A single DistGrid tile of array must be gathered into farray.
   The optional tile argument allows selection of the tile. For Arrays
   defined on a single tile DistGrid the default selection (tile 1) will
   be correct. The shape of farray must match the shape of the tile in
   Array.

   If the Array contains replicating DistGrid dimensions data will be
   gathered from the numerically higher DEs. Replicated data elements in
   numerically lower DEs will be ignored.

   This version of the interface implements the PET-based blocking
   paradigm: Each PET of the VM must issue this call exactly once for all
   of its DEs. The call will block until all PET-local data objects are
   accessible.

   The arguments are:

   array
          The ESMF_Array object from which data will be gathered.

   {farray}
          The Fortran array into which to gather data. Only root must
          provide a valid farray, the other PETs may treat farray as an
          optional argument.

   rootPet
          PET that holds the valid destination array, i.e. farray.

   [tile]
          The DistGrid tile in array from which to gather farray. By
          default farray will be gathered from tile 1.

   [vm]
          Optional ESMF_VM object of the current context. Providing the VM
          of the current context will lower the method's overhead.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

