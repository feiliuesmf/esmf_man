  21.7.15 ESMF_StateRemove - Remove an item from a State - (DEPRECATED METHOD)

   INTERFACE:
   ! Private name; call using ESMF_StateRemove ()
   subroutine ESMF_StateRemoveOneItem (state, itemName, &
       relaxedFlag, rc)

   ARGUMENTS:
     type(ESMF_State), intent(inout) :: state
     character(*), intent(in) :: itemName
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     logical, intent(in), optional :: relaxedFlag
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * DEPRECATED METHOD as of ESMF 5.3.1. Please use ESMF_StateRemove,
       section [304]21.7.16 instead. Rationale: The list version is
       consistent with other ESMF container operations which use lists.

   DESCRIPTION:

   Remove an existing reference to an item from a State.

   The arguments are:

   state
          The ESMF_State within which itemName will be removed.

   itemName
          The name of the item to be removed. This is a reference only.
          The item itself is unchanged.

          If the state contains nested ESMF_States, the itemName argument
          may specify a fully qualified name to remove the desired item
          with a single call. This is performed using the "/" character to
          separate the names of the intermediate State names leading to
          the desired item. (E.g., itemName="state1/state12/item".

          Since an item could potentially be referenced by multiple
          containers, it remains the responsibility of the user to manage
          its destruction when it is no longer in use.

   [relaxedflag]
          A setting of .true. indicates a relaxed definition of "remove",
          where it is not an error if itemName is not present in the
          state. For .false. this is treated as an error condition. The
          default setting is .false..

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  21.7.16 ESMF_StateRemove - Remove a list of items from a State

   INTERFACE:
   ! Private name; call using ESMF_StateRemove ()
   subroutine ESMF_StateRemoveList (state, itemNameList, relaxedFlag, rc)

   ARGUMENTS:
     type(ESMF_State), intent(inout) :: state
     character(*), intent(in) :: itemNameList(:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     logical, intent(in), optional :: relaxedFlag
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.3.1. If code using this interface compiles with any version of
       ESMF starting with 5.3.1, then it will compile with the current
       version.

   DESCRIPTION:

   Remove existing references to items from a State.

   The arguments are:

   state
          The ESMF_State within which itemName will be removed.

   itemNameList
          The name of the items to be removed. This is a reference only.
          The items themselves are unchanged.

          If the state contains nested ESMF_States, the itemName arguments
          may specify fully qualified names to remove the desired items
          with a single call. This is performed using the "/" character to
          separate the names of the intermediate State names leading to
          the desired items. (E.g., itemName="state1/state12/item".

          Since items could potentially be referenced by multiple
          containers, it remains the responsibility of the user to manage
          their destruction when they are no longer in use.

   [relaxedflag]
          A setting of .true. indicates a relaxed definition of "remove",
          where it is not an error if an item in the itemNameList is not
          present in the state. For .false. this is treated as an error
          condition. The default setting is .false..

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

