  37.5.3 ESMF_RouteHandleDestroy - Release resources associated with a
  RouteHandle

   INTERFACE:
   subroutine ESMF_RouteHandleDestroy(routehandle, &
     noGarbage, rc)

   ARGUMENTS:
     type(ESMF_RouteHandle), intent(inout)          :: routehandle
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     logical,                intent(in),   optional :: noGarbage
     integer,                intent(out),  optional :: rc

   DESCRIPTION:

   Destroys an ESMF_RouteHandle, releasing the resources associated with
   the object.

   The arguments are:

   routehandle
          The ESMF_RouteHandle to be destroyed.

   [noGarbage]
          If set to .TRUE. the object will be fully destroyed and removed
          from the ESMF garbage collection system. Note however that under
          this condition ESMF cannot protect against accessing the
          destroyed object through dangling aliases - a situation which
          may lead to hard to debug application crashes.

          It is generally recommended to leave the noGarbage argument set
          to .FALSE. (the default), and to take advantage of the ESMF
          garbage collection system which will prevent problems with
          dangling aliases or incorrect sequences of destroy calls.
          However this level of support requires that a small remnant of
          the object is kept in memory past the destroy call. This can
          lead to an unexpected increase in memory consumption over the
          course of execution in applications that use temporary ESMF
          objects. For situations where the repeated creation and
          destruction of temporary objects leads to memory issues, it is
          recommended to call with noGarbage set to .TRUE., fully removing
          the entire temporary object from memory.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

