  26.6.5 ESMF_FieldCreate - Create a Field from Geom and typekind

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
 function ESMF_FieldCreateGBTKR(geom, typekind, &
      gridToFieldMap, ungriddedLBound, ungriddedUBound, &
      totalLWidth, totalUWidth, pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateGBTKR

   ARGUMENTS:
     type(ESMF_Geom), intent(in) :: geom
     type(ESMF_TypeKind_Flag),intent(in) :: typekind
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     integer, intent(in), optional :: totalLWidth(:)
     integer, intent(in), optional :: totalUWidth(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        8.1.0
                Added argument pinflag to provide access to DE sharing
                between PETs.

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [809]26.3.4.

   The arguments are:

   geom
          ESMF_Geom object.

   typekind
          The typekind of the Field. See section [810]54.59 for a list of
          valid typekind options.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the Grid
          dimCount then the default gridToFieldMap will contain zeros for
          the rightmost entries. A zero entry in the gridToFieldMap
          indicates that the particular Grid dimension will be replicating
          the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should be max( totalLWidth
          + totalUWidth + computationalCount, exclusiveCount ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should max( totalLWidth +
          totalUWidth + computationalCount, exclusiveCount ).

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [811]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.6 ESMF_FieldCreate - Create a Field from Geom and ArraySpec

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateGBArraySpec(geom, arrayspec, gridToFieldMap, &
     ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, &
     pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateGBArraySpec

   ARGUMENTS:
     type(ESMF_Geom) :: geom
     type(ESMF_ArraySpec), intent(in) :: arrayspec
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     integer, intent(in), optional :: totalLWidth(:)
     integer, intent(in), optional :: totalUWidth(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [812]26.3.5.

   The arguments are:

   geom
          ESMF_Geom object.

   arrayspec
          Data type and kind specification.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should be max( totalLWidth
          + totalUWidth + computationalCount, exclusiveCount ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should max( totalLWidth +
          totalUWidth + computationalCount, exclusiveCount ).

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [813]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.7 ESMF_FieldCreate - Create a Field from Fortran array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateGBData<rank><type><kind>(geom, &
   farray, indexflag, datacopyflag, gridToFieldMap, ungriddedLBound, &
   ungriddedUBound, totalLWidth, totalUWidth, name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateGBData<rank><type><kind>

   ARGUMENTS:
   type(ESMF_Geom) :: geom
   <type> (ESMF_KIND_<kind>), dimension(<rank>), target :: farray
   type(ESMF_Index_Flag), intent(in) :: indexflag
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: ungriddedLBound(:)
   integer, intent(in), optional :: ungriddedUBound(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data array and ESMF_Geom. The
   Fortran data pointer inside ESMF_Field can be queried but deallocating
   the retrieved data pointer is not allowed. The arguments are:

   geom
          ESMF_Geom object. The dimCount of the Geom must be smaller than
          or equal to the rank of the farray.

   farray
          Native Fortran data array to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farray.

   indexflag
          Indicate how DE-local indices are defined. See section
          [814]54.27 for a list of valid indexflag options.

   [datacopyflag]
          Whether to copy the contents of the farray or reference it
          directly. For valid values see [815]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the farray by specifying the appropriate farray dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the farray in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          farray rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total farray dimensions less the total
          (distributed + undistributed) dimensions in the grid. Ungridded
          dimensions must be in the same order they are stored in the
          farray. Permutations of the order of dimensions are handled via
          individual communication methods. For example, an undistributed
          dimension can be remapped to a distributed dimension as part of
          the ESMF_ArrayRedist() operation.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          farray.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          farray.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farray.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the farray. That is, for
          each gridded dimension the farray size should be max(
          totalLWidth + totalUWidth + computationalCount, exclusiveCount
          ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farray.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the farray. That is, for
          each gridded dimension the farray size should max( totalLWidth +
          totalUWidth + computationalCount, exclusiveCount ).

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.8 ESMF_FieldCreate - Create a Field from Fortran array pointer

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateGBDataPtr<rank><type><kind>(geom, &
   farrayPtr, datacopyflag, gridToFieldMap, &
   totalLWidth, totalUWidth, name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateGBDataPtr<rank><type><kind>

   ARGUMENTS:
   type(ESMF_Geom) :: geom
   <type> (ESMF_KIND_<kind>), dimension(<rank>), pointer :: farrayPtr
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data pointer and ESMF_Geom. The
   Fortran data pointer inside ESMF_Field can be queried and deallocated
   when datacopyflag is ESMF_DATACOPY_REFERENCE. Note that the
   ESMF_FieldDestroy call does not deallocate the Fortran data pointer in
   this case. This gives user more flexibility over memory management.

   The arguments are:

   geom
          ESMF_Geom object. The dimCount of the Geom must be smaller than
          or equal to the rank of the farrayPtr.

   farrayPtr
          Native Fortran data pointer to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farrayPtr.

   [datacopyflag]
          Whether to copy the contents of the farrayPtr or reference it
          directly. For valid values see [816]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the farrayPtr by specifying the appropriate farrayPtr dimension
          index. The default is to map all of the grid's dimensions
          against the lowest dimensions of the farrayPtr in sequence, i.e.
          gridToFieldMap = (/1,2,3,.../). The values of all gridToFieldMap
          entries must be greater than or equal to one and smaller than or
          equal to the farrayPtr rank. It is erroneous to specify the same
          gridToFieldMap entry multiple times. The total ungridded
          dimensions in the field are the total farrayPtr dimensions less
          the total (distributed + undistributed) dimensions in the grid.
          Ungridded dimensions must be in the same order they are stored
          in the farrayPtr. Permutations of the order of dimensions are
          handled via individual communication methods. For example, an
          undistributed dimension can be remapped to a distributed
          dimension as part of the ESMF_ArrayRedist() operation.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farrayPtr.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the farrayPtr. That is,
          for each gridded dimension the farrayPtr size should be max(
          totalLWidth + totalUWidth + computationalCount, exclusiveCount
          ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farrayPtr.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the farrayPtr. That is,
          for each gridded dimension the farrayPtr size should max(
          totalLWidth + totalUWidth + computationalCount, exclusiveCount
          ).

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.9 ESMF_FieldCreate - Create a Field from Grid and typekind

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateGridTKR(grid, typekind, &
     indexflag, staggerloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     totalLWidth, totalUWidth, pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateGridTKR

   ARGUMENTS:
     type(ESMF_Grid), intent(in) :: grid
     type(ESMF_TypeKind_Flag),intent(in) :: typekind
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_Index_Flag), intent(in), optional :: indexflag
     type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     integer, intent(in), optional :: totalLWidth(:)
     integer, intent(in), optional :: totalUWidth(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        8.1.0
                Added argument pinflag to provide access to DE sharing
                between PETs.

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [817]26.3.4.

   The arguments are:

   grid
          ESMF_Grid object.

   typekind
          The typekind of the Field. See section [818]54.59 for a list of
          valid typekind options.

   [indexflag]
          Indicate how DE-local indices are defined. By default each DE's
          exclusive region is placed to start at the local index space
          origin, i.e. (1, 1, ..., 1). Alternatively the DE-local index
          space can be aligned with the global index space, if a global
          index space is well defined by the associated Grid. See section
          [819]54.27 for a list of valid indexflag options. The default
          indexflag value is the one stored in then ESMF_Grid object.
          Currently it is erroneous to specify an indexflag different from
          the one stored in the ESMF_Grid object. The default value is
          ESMF_INDEX_DELOCAL

   [staggerloc]
          Stagger location of data in grid cells. For valid predefined
          values see section [820]31.2.6. To create a custom stagger
          location see section [821]31.3.25. The default value is
          ESMF_STAGGERLOC_CENTER.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the Grid
          dimCount then the default gridToFieldMap will contain zeros for
          the rightmost entries. A zero entry in the gridToFieldMap
          indicates that the particular Grid dimension will be replicating
          the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should be max( totalLWidth
          + totalUWidth + computationalCount, exclusiveCount ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should max( totalLWidth +
          totalUWidth + computationalCount, exclusiveCount ).

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [822]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.10 ESMF_FieldCreate - Create a Field from Grid and ArraySpec

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateGridArraySpec(grid, arrayspec, &
     indexflag, staggerloc, gridToFieldMap, ungriddedLBound, &
     ungriddedUBound, totalLWidth, totalUWidth, pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateGridArraySpec

   ARGUMENTS:
     type(ESMF_Grid), intent(in) :: grid
     type(ESMF_ArraySpec), intent(in) :: arrayspec
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_Index_Flag), intent(in), optional :: indexflag
     type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     integer, intent(in), optional :: totalLWidth(:)
     integer, intent(in), optional :: totalUWidth(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        8.1.0
                Added argument pinflag to provide access to DE sharing
                between PETs.

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [823]26.3.5.

   The arguments are:

   grid
          ESMF_Grid object.

   arrayspec
          Data type and kind specification.

   [indexflag]
          Indicate how DE-local indices are defined. By default each DE's
          exclusive region is placed to start at the local index space
          origin, i.e. (1, 1, ..., 1). Alternatively the DE-local index
          space can be aligned with the global index space, if a global
          index space is well defined by the associated Grid. See section
          [824]54.27 for a list of valid indexflag options. The default
          indexflag value is the one stored in then ESMF_Grid object.
          Currently it is erroneous to specify an indexflag different from
          the one stored in the ESMF_Grid object.The default value is
          ESMF_INDEX_DELOCAL

   [staggerloc]
          Stagger location of data in grid cells. For valid predefined
          values see section [825]31.2.6. To create a custom stagger
          location see section [826]31.3.25. The default value is
          ESMF_STAGGERLOC_CENTER.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the Grid
          dimCount then the default gridToFieldMap will contain zeros for
          the rightmost entries. A zero entry in the gridToFieldMap
          indicates that the particular Grid dimension will be replicating
          the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should be max( totalLWidth
          + totalUWidth + computationalCount, exclusiveCount ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should max( totalLWidth +
          totalUWidth + computationalCount, exclusiveCount ).

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [827]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.11 ESMF_FieldCreate - Create a Field from Grid and Array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateGridArray(grid, array, datacopyflag, &
     staggerloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     totalLWidth, totalUWidth, name, vm, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateGridArray

   ARGUMENTS:
     type(ESMF_Grid), intent(in) :: grid
     type(ESMF_Array), intent(in) :: array
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
     type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     integer, intent(in), optional :: totalLWidth(:)
     integer, intent(in), optional :: totalUWidth(:)
     character (len = *), intent(in), optional :: name
     type(ESMF_VM), intent(in), optional :: vm
     integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        8.0.0
                Added argument vm to support object creation on a
                different VM than that of the current context.

   DESCRIPTION:

   Create an ESMF_Field. This version of creation assumes the data exists
   already and is being passed in through an ESMF_Array. For an example
   and associated documentation using this method see section [828]26.3.6.

   The arguments are:

   grid
          ESMF_Grid object.

   array
          ESMF_Array object.

   [datacopyflag]
          Indicates whether to copy the contents of the array or reference
          it directly. For valid values see [829]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [staggerloc]
          Stagger location of data in grid cells. For valid predefined
          values see section [830]31.2.6. To create a custom stagger
          location see section [831]31.3.25. The default value is
          ESMF_STAGGERLOC_CENTER.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the Grid
          dimCount then the default gridToFieldMap will contain zeros for
          the rightmost entries. A zero entry in the gridToFieldMap
          indicates that the particular Grid dimension will be replicating
          the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should be max( totalLWidth
          + totalUWidth + computationalCount, exclusiveCount ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the field.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the field. That is, for
          each gridded dimension the field size should max( totalLWidth +
          totalUWidth + computationalCount, exclusiveCount ).

   [name]
          Field name.

   [vm]
          If present, the Field object is constructed on the specified
          ESMF_VM object. The default is to construct on the VM of the
          current component context.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.12 ESMF_FieldCreate - Create a Field from Grid and Fortran array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateGridData<rank><type><kind>(grid, &
   farray, indexflag, datacopyflag, staggerloc, &
   gridToFieldMap, ungriddedLBound, ungriddedUBound, &
   totalLWidth, totalUWidth, name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateGridData<rank><type><kind>

   ARGUMENTS:
   type(ESMF_Grid), intent(in) :: grid
   <type> (ESMF_KIND_<kind>),intent(in), target :: farray(<rank>)
   type(ESMF_Index_Flag), intent(in) :: indexflag
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: ungriddedLBound(:)
   integer, intent(in), optional :: ungriddedUBound(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data array and ESMF_Grid. The
   Fortran data pointer inside ESMF_Field can be queried but deallocating
   the retrieved data pointer is not allowed. For examples and associated
   documentation regarding this method see section [832]26.3.11,
   [833]26.3.13, [834]26.3.14, [835]26.3.15, and [836]26.3.9.

   The arguments are:

   grid
          ESMF_Grid object.

   farray
          Native Fortran data array to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farray.

   indexflag
          Indicate how DE-local indices are defined. See section
          [837]54.27 for a list of valid indexflag options. Currently it
          is erroneous to specify an indexflag different from the one
          stored in the ESMF_Grid object.

   [datacopyflag]
          Whether to copy the contents of the farray or reference it
          directly. For valid values see [838]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [staggerloc]
          Stagger location of data in grid cells. For valid predefined
          values see section [839]31.2.6. To create a custom stagger
          location see section [840]31.3.25. The default value is
          ESMF_STAGGERLOC_CENTER.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the farray by specifying the appropriate farray dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the farray in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          farray rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total farray dimensions less the total
          (distributed + undistributed) dimensions in the grid. Ungridded
          dimensions must be in the same order they are stored in the
          farray. Permutations of the order of dimensions are handled via
          individual communication methods. For example, an undistributed
          dimension can be remapped to a distributed dimension as part of
          the ESMF_ArrayRedist() operation. If the Field dimCount is less
          than the Grid dimCount then the default gridToFieldMap will
          contain zeros for the rightmost entries. A zero entry in the
          gridToFieldMap indicates that the particular Grid dimension will
          be replicating the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          farray.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          farray.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farray.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the farray. That is, for
          each gridded dimension the farray size should be max(
          totalLWidth + totalUWidth + computationalCount, exclusiveCount
          ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farray.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the farray. That is, for
          each gridded dimension the farray size should max( totalLWidth +
          totalUWidth + computationalCount, exclusiveCount ).

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.13 ESMF_FieldCreate - Create a Field from Grid and Fortran array pointer

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateGridDataPtr<rank><type><kind>(grid, &
   farrayPtr, datacopyflag, staggerloc, gridToFieldMap, &
   totalLWidth, totalUWidth, name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateGridDataPtr<rank><type><kind>

   ARGUMENTS:
   type(ESMF_Grid), intent(in) :: grid
   <type> (ESMF_KIND_<kind>), pointer :: farrayPtr(<rank>)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: totalLWidth(:)
   integer, intent(in), optional :: totalUWidth(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data pointer and ESMF_Grid. The
   Fortran data pointer inside ESMF_Field can be queried and deallocated
   when datacopyflag is ESMF_DATACOPY_REFERENCE. Note that the
   ESMF_FieldDestroy call does not deallocate the Fortran data pointer in
   this case. This gives user more flexibility over memory management.

   For examples and associated documentation regarding this method see
   section [841]26.3.12, [842]26.3.13, [843]26.3.14, [844]26.3.15, and
   [845]26.3.9.

   The arguments are:

   grid
          ESMF_Grid object.

   farrayPtr
          Native Fortran data pointer to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farrayPtr.

   [datacopyflag]
          Whether to copy the contents of the farrayPtr or reference it
          directly. For valid values see [846]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [staggerloc]
          Stagger location of data in grid cells. For valid predefined
          values see section [847]31.2.6. To create a custom stagger
          location see section [848]31.3.25. The default value is
          ESMF_STAGGERLOC_CENTER.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the farrayPtr by specifying the appropriate farrayPtr dimension
          index. The default is to map all of the grid's dimensions
          against the lowest dimensions of the farrayPtr in sequence, i.e.
          gridToFieldMap = (/1,2,3,.../). The values of all gridToFieldMap
          entries must be greater than or equal to one and smaller than or
          equal to the farrayPtr rank. It is erroneous to specify the same
          gridToFieldMap entry multiple times. The total ungridded
          dimensions in the field are the total farrayPtr dimensions less
          the total (distributed + undistributed) dimensions in the grid.
          Ungridded dimensions must be in the same order they are stored
          in the farrayPtr. Permutations of the order of dimensions are
          handled via individual communication methods. For example, an
          undistributed dimension can be remapped to a distributed
          dimension as part of the ESMF_ArrayRedist() operation. If the
          Field dimCount is less than the Grid dimCount then the default
          gridToFieldMap will contain zeros for the rightmost entries. A
          zero entry in the gridToFieldMap indicates that the particular
          Grid dimension will be replicating the Field across the DEs
          along this direction.

   [totalLWidth]
          Lower bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farrayPtr.
          Values default to 0. If values for totalLWidth are specified
          they must be reflected in the size of the farrayPtr. That is,
          for each gridded dimension the farrayPtr size should be max(
          totalLWidth + totalUWidth + computationalCount, exclusiveCount
          ).

   [totalUWidth]
          Upper bound of halo region. The size of this array is the number
          of gridded dimensions in the Field. However, ordering of the
          elements needs to be the same as they appear in the farrayPtr.
          Values default to 0. If values for totalUWidth are specified
          they must be reflected in the size of the farrayPtr. That is,
          for each gridded dimension the farrayPtr size should max(
          totalLWidth + totalUWidth + computationalCount, exclusiveCount
          ).

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.14 ESMF_FieldCreate - Create a Field from LocStream and typekind

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateLSTKR(locstream, typekind, &
     gridToFieldMap, ungriddedLBound, ungriddedUBound, pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateLSTKR

   ARGUMENTS:
     type(ESMF_LocStream), intent(in) :: locstream
     type(ESMF_TypeKind_Flag),intent(in) :: typekind
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [849]26.3.16.

   The arguments are:

   locstream
          ESMF_LocStream object.

   typekind
          The typekind of the Field. See section [850]54.59 for a list of
          valid typekind options.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the
          LocStream dimCount then the default gridToFieldMap will contain
          zeros for the rightmost entries. A zero entry in the
          gridToFieldMap indicates that the particular LocStream dimension
          will be replicating the Field across the DEs along this
          direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [851]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.15 ESMF_FieldCreate - Create a Field from LocStream and ArraySpec

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateLSArraySpec(locstream, arrayspec, &
     gridToFieldMap, ungriddedLBound, ungriddedUBound, pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateLSArraySpec

   ARGUMENTS:
     type(ESMF_LocStream), intent(in) :: locstream
     type(ESMF_ArraySpec), intent(in) :: arrayspec
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [852]26.3.17.

   The arguments are:

   locstream
          ESMF_LocStream object.

   arrayspec
          Data type and kind specification.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the
          LocStream dimCount then the default gridToFieldMap will contain
          zeros for the rightmost entries. A zero entry in the
          gridToFieldMap indicates that the particular LocStream dimension
          will be replicating the Field across the DEs along this
          direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [853]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.16 ESMF_FieldCreate - Create a Field from LocStream and Array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateLSArray(locstream, array, &
     datacopyflag, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateLSArray

   ARGUMENTS:
     type(ESMF_LocStream), intent(in) :: locstream
     type(ESMF_Array), intent(in) :: array
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     character (len = *), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field. This version of creation assumes the data exists
   already and is being passed in through an ESMF_Array. For an example
   and associated documentation using this method see section [854]26.3.6.

   The arguments are:

   locstream
          ESMF_LocStream object.

   array
          ESMF_Array object.

   [datacopyflag]
          Indicates whether to copy the contents of the array or reference
          it directly. For valid values see [855]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the
          LocStream dimCount then the default gridToFieldMap will contain
          zeros for the rightmost entries. A zero entry in the
          gridToFieldMap indicates that the particular LocStream dimension
          will be replicating the Field across the DEs along this
          direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.17 ESMF_FieldCreate - Create a Field from LocStream and Fortran array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateLSData<rank><type><kind>(locstream, farray, &
   indexflag, datacopyflag, gridToFieldMap, ungriddedLBound, &
   ungriddedUBound, name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateLSData<rank><type><kind>

   ARGUMENTS:
   type(ESMF_LocStream), intent(in) :: locstream
   <type> (ESMF_KIND_<kind>),intent(in), target :: farray(<rank>)
   type(ESMF_Index_Flag), intent(in) :: indexflag
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: ungriddedLBound(:)
   integer, intent(in), optional :: ungriddedUBound(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data array and ESMF_LocStream. The
   Fortran data pointer inside ESMF_Field can be queried but deallocating
   the retrieved data pointer is not allowed.

   The arguments are:

   locstream
          ESMF_LocStream object.

   farray
          Native Fortran data array to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farray.

   indexflag
          Indicate how DE-local indices are defined. See section
          [856]54.27 for a list of valid indexflag options.

   [datacopyflag]
          Whether to copy the contents of the farray or reference
          directly. For valid values see [857]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [gridToFieldMap]
          List with number of elements equal to the locstream's dimCount.
          The list elements map each dimension of the locstream to a
          dimension in the farray by specifying the appropriate farray
          dimension index. The default is to map all of the locstream's
          dimensions against the lowest dimensions of the farray in
          sequence, i.e. gridToFieldMap = (/1,2,3,.../). The values of all
          gridToFieldMap entries must be greater than or equal to one and
          smaller than or equal to the farray rank. It is erroneous to
          specify the same gridToFieldMap entry multiple times. The total
          ungridded dimensions in the field are the total farray
          dimensions less the total (distributed + undistributed)
          dimensions in the locstream. Unlocstreamded dimensions must be
          in the same order they are stored in the farray. Permutations of
          the order of dimensions are handled via individual communication
          methods. For example, an undistributed dimension can be remapped
          to a distributed dimension as part of the ESMF_ArrayRedist()
          operation. If the Field dimCount is less than the LocStream
          dimCount then the default gridToFieldMap will contain zeros for
          the rightmost entries. A zero entry in the gridToFieldMap
          indicates that the particular LocStream dimension will be
          replicating the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than locstream dimension count, both ungriddedLBound
          and ungriddedUBound must be specified. When both are specified
          the values are checked for consistency. Note that the the
          ordering of these ungridded dimensions is the same as their
          order in the farray.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than locstream dimension count, both ungriddedLBound
          and ungriddedUBound must be specified. When both are specified
          the values are checked for consistency. Note that the the
          ordering of these ungridded dimensions is the same as their
          order in the farray.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.18 ESMF_FieldCreate - Create a Field from LocStream and Fortran array
  pointer

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateLSDataPtr<rank><type><kind>(locstream, &
   farrayPtr, datacopyflag, gridToFieldMap, &
   name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateLSDataPtr<rank><type><kind>

   ARGUMENTS:
   type(ESMF_LocStream), intent(in) :: locstream
   <type> (ESMF_KIND_<kind>),pointer :: farrayPtr(<rank>)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   integer, intent(in), optional :: gridToFieldMap(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data pointer and ESMF_LocStream.
   The Fortran data pointer inside ESMF_Field can be queried and
   deallocated when datacopyflag is ESMF_DATACOPY_REFERENCE. Note that the
   ESMF_FieldDestroy call does not deallocate the Fortran data pointer in
   this case. This gives user more flexibility over memory management.

   The arguments are:

   locstream
          ESMF_LocStream object.

   farrayPtr
          Native Fortran data pointer to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farrayPtr.

   [datacopyflag]
          Whether to copy the contents of the farrayPtr or reference it
          directly. For valid values see [858]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [gridToFieldMap]
          List with number of elements equal to the locstream's dimCount.
          The list elements map each dimension of the locstream to a
          dimension in the farrayPtr by specifying the appropriate
          farrayPtr dimension index. The default is to map all of the
          locstream's dimensions against the lowest dimensions of the
          farrayPtr in sequence, i.e. gridToFieldMap = (/1,2,3,.../). The
          values of all gridToFieldMap entries must be greater than or
          equal to one and smaller than or equal to the farrayPtr rank. It
          is erroneous to specify the same gridToFieldMap entry multiple
          times. The total ungridded dimensions in the field are the total
          farrayPtr dimensions less the total (distributed +
          undistributed) dimensions in the locstream. Unlocstreamded
          dimensions must be in the same order they are stored in the
          farrayPtr. Permutations of the order of dimensions are handled
          via individual communication methods. For example, an
          undistributed dimension can be remapped to a distributed
          dimension as part of the ESMF_ArrayRedist() operation. If the
          Field dimCount is less than the LocStream dimCount then the
          default gridToFieldMap will contain zeros for the rightmost
          entries. A zero entry in the gridToFieldMap indicates that the
          particular LocStream dimension will be replicating the Field
          across the DEs along this direction.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.19 ESMF_FieldCreate - Create a Field from Mesh and typekind

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateMeshTKR(mesh, typekind, indexflag, &
     meshloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateMeshTKR

   ARGUMENTS:
     type(ESMF_Mesh), intent(in) :: mesh
     type(ESMF_TypeKind_Flag), intent(in) :: typekind
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_Index_Flag), intent(in), optional :: indexflag
     type(ESMF_MeshLoc), intent(in), optional :: meshloc
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [859]26.3.18.

   The arguments are:

   mesh
          ESMF_Mesh object.

   typekind
          The typekind of the Field. See section [860]54.59 for a list of
          valid typekind options.

   [indexflag]
          Indicate how DE-local indices are defined. See section
          [861]54.27 for a list of valid indexflag options.

   [meshloc]
          The part of the Mesh on which to build the Field. For valid
          predefined values see Section [862]54.39. If not set, defaults
          to ESMF_MESHLOC_NODE.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the Mesh
          dimCount then the default gridToFieldMap will contain zeros for
          the rightmost entries. A zero entry in the gridToFieldMap
          indicates that the particular Mesh dimension will be replicating
          the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [863]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.20 ESMF_FieldCreate - Create a Field from Mesh and ArraySpec

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateMeshArraySpec(mesh, arrayspec, &
     indexflag, meshloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateMeshArraySpec

   ARGUMENTS:
     type(ESMF_Mesh), intent(in) :: mesh
     type(ESMF_ArraySpec), intent(in) :: arrayspec
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_Index_Flag),intent(in), optional :: indexflag
     type(ESMF_MeshLoc), intent(in), optional :: meshloc
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [864]26.3.19 and [865]26.3.21.

   The arguments are:

   mesh
          ESMF_Mesh object.

   arrayspec
          Data type and kind specification.

   [indexflag]
          Indicate how DE-local indices are defined. See section
          [866]54.27 for a list of valid indexflag options.

   [meshloc]
          The part of the Mesh on which to build the Field. For valid
          predefined values see Section [867]54.39. If not set, defaults
          to ESMF_MESHLOC_NODE.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the Mesh
          dimCount then the default gridToFieldMap will contain zeros for
          the rightmost entries. A zero entry in the gridToFieldMap
          indicates that the particular Mesh dimension will be replicating
          the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [868]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.21 ESMF_FieldCreate - Create a Field from Mesh and Array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateMeshArray(mesh, array, &
     datacopyflag, meshloc, &
     gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     name, vm, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateMeshArray

   ARGUMENTS:
     type(ESMF_Mesh), intent(in) :: mesh
     type(ESMF_Array), intent(in) :: array
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
     type(ESMF_MeshLoc), intent(in), optional :: meshloc
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     character (len = *), intent(in), optional :: name
     type(ESMF_VM), intent(in), optional :: vm
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field. This version of creation assumes the data exists
   already and is being passed in through an ESMF_Array. For an example
   and associated documentation using this method see section
   [869]26.3.20.

   The arguments are:

   mesh
          ESMF_Mesh object.

   array
          ESMF_Array object.

   [datacopyflag]
          Indicates whether to copy the contents of the array or reference
          it directly. For valid values see [870]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [meshloc]
          The part of the Mesh on which to build the Field. For valid
          predefined values see Section [871]54.39. If not set, defaults
          to ESMF_MESHLOC_NODE.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the Mesh
          dimCount then the default gridToFieldMap will contain zeros for
          the rightmost entries. A zero entry in the gridToFieldMap
          indicates that the particular Mesh dimension will be replicating
          the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [name]
          Field name.

   [vm]
          If present, the Field object is constructed on the specified
          ESMF_VM object. The default is to construct on the VM of the
          current component context.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.22 ESMF_FieldCreate - Create a Field from Mesh and Fortran array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateMeshData<rank><type><kind>(mesh, &
   farray, indexflag, datacopyflag, meshloc, &
   gridToFieldMap, ungriddedLBound, ungriddedUBound, name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateMeshData<rank><type><kind>

   ARGUMENTS:
   type(ESMF_Mesh), intent(in) :: mesh
   <type> (ESMF_KIND_<kind>),intent(in), target :: farray(<rank>)
   type(ESMF_Index_Flag), intent(in) :: indexflag
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   type(ESMF_MeshLoc), intent(in), optional :: meshloc
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: ungriddedLBound(:)
   integer, intent(in), optional :: ungriddedUBound(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data array and ESMF_Mesh. The
   Fortran data pointer inside ESMF_Field can be queried but deallocating
   the retrieved data pointer is not allowed.

   The arguments are:

   mesh
          ESMF_Mesh object.

   farray
          Native Fortran data array to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farray.

   indexflag
          Indicate how DE-local indices are defined. See section
          [872]54.27 for a list of valid indexflag options.

   [datacopyflag]
          Whether to copy the contents of the farray or reference it
          directly. For valid values see [873]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [meshloc]
          The part of the Mesh on which to build the Field. For valid
          predefined values see Section [874]54.39. If not set, defaults
          to ESMF_MESHLOC_NODE.

   [gridToFieldMap]
          List with number of elements equal to the mesh's dimCount. The
          list elements map each dimension of the mesh to a dimension in
          the farray by specifying the appropriate farray dimension index.
          The default is to map all of the mesh's dimensions against the
          lowest dimensions of the farray in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          farray rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total farray dimensions less the total
          (distributed + undistributed) dimensions in the mesh. Unmeshded
          dimensions must be in the same order they are stored in the
          farray. Permutations of the order of dimensions are handled via
          individual communication methods. For example, an undistributed
          dimension can be remapped to a distributed dimension as part of
          the ESMF_ArrayRedist() operation. If the Field dimCount is less
          than the Mesh dimCount then the default gridToFieldMap will
          contain zeros for the rightmost entries. A zero entry in the
          gridToFieldMap indicates that the particular Mesh dimension will
          be replicating the Field across the DEs along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than mesh dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          farray.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than mesh dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          farray.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.23 ESMF_FieldCreate - Create a Field from Mesh and Fortran array pointer

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateMeshDataPtr<rank><type><kind>(mesh, &
   farrayPtr, datacopyflag, meshloc, gridToFieldMap, &
   name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateMeshDataPtr<rank><type><kind>

   ARGUMENTS:
   type(ESMF_Mesh), intent(in) :: mesh
   <type> (ESMF_KIND_<kind>),pointer :: farrayPtr(<rank>)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   type(ESMF_MeshLoc), intent(in), optional :: meshloc
   integer, intent(in), optional :: gridToFieldMap(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data pointer and ESMF_Mesh. The
   Fortran data pointer inside ESMF_Field can be queried and deallocated
   when datacopyflag is ESMF_DATACOPY_REFERENCE. Note that the
   ESMF_FieldDestroy call does not deallocate the Fortran data pointer in
   this case. This gives user more flexibility over memory management.

   The arguments are:

   mesh
          ESMF_Mesh object.

   farrayPtr
          Native Fortran data pointer to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farrayPtr.

   [datacopyflag]
          Whether to copy the contents of the farrayPtr or reference it
          directly. For valid values see [875]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [meshloc]
          The part of the Mesh on which to build the Field. For valid
          predefined values see Section [876]54.39. If not set, defaults
          to ESMF_MESHLOC_NODE.

   [gridToFieldMap]
          List with number of elements equal to the mesh's dimCount. The
          list elements map each dimension of the mesh to a dimension in
          the farrayPtr by specifying the appropriate farrayPtr dimension
          index. The default is to map all of the mesh's dimensions
          against the lowest dimensions of the farrayPtr in sequence, i.e.
          gridToFieldMap = (/1,2,3,.../). The values of all gridToFieldMap
          entries must be greater than or equal to one and smaller than or
          equal to the farrayPtr rank. It is erroneous to specify the same
          gridToFieldMap entry multiple times. The total ungridded
          dimensions in the field are the total farrayPtr dimensions less
          the total (distributed + undistributed) dimensions in the mesh.
          Unmeshded dimensions must be in the same order they are stored
          in the farrayPtr. Permutations of the order of dimensions are
          handled via individual communication methods. For example, an
          undistributed dimension can be remapped to a distributed
          dimension as part of the ESMF_ArrayRedist() operation. If the
          Field dimCount is less than the Mesh dimCount then the default
          gridToFieldMap will contain zeros for the rightmost entries. A
          zero entry in the gridToFieldMap indicates that the particular
          Mesh dimension will be replicating the Field across the DEs
          along this direction.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.24 ESMF_FieldCreate - Create a Field from XGrid and typekind

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateXGTKR(xgrid, typekind, xgridside, &
     gridindex, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateXGTKR

   ARGUMENTS:
     type(ESMF_XGrid), intent(in) :: xgrid
     type(ESMF_TypeKind_Flag), intent(in) :: typekind
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside
     integer, intent(in), optional :: gridindex
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [877]26.3.16.

   The arguments are:

   xgrid
          ESMF_XGrid object.

   typekind
          The typekind of the Field. See section [878]54.59 for a list of
          valid typekind options.

   [xgridside]
          Which side of the XGrid to create the Field on (either
          ESMF_XGRIDSIDE_A, ESMF_XGRIDSIDE_B, or ESMF_XGRIDSIDE_BALANCED).
          If not passed in then defaults to ESMF_XGRIDSIDE_BALANCED.

   [gridindex]
          If xgridSide is ESMF_XGRIDSIDE_A or ESMF_XGRIDSIDE_B then this
          index tells which Grid on that side to create the Field on. If
          not provided, defaults to 1.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the
          XGrid dimCount then the default gridToFieldMap will contain
          zeros for the rightmost entries. A zero entry in the
          gridToFieldMap indicates that the particular XGrid dimension
          will be replicating the Field across the DEs along this
          direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [879]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.25 ESMF_FieldCreate - Create a Field from XGrid and ArraySpec

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateXGArraySpec(xgrid, arrayspec, &
     xgridside, gridindex, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     pinflag, name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateXGArraySpec

   ARGUMENTS:
     type(ESMF_XGrid), intent(in) :: xgrid
     type(ESMF_ArraySpec), intent(in) :: arrayspec
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_XGridSide_Flag), intent(in), optional :: xgridSide
     integer, intent(in), optional :: gridIndex
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     type(ESMF_Pin_Flag), intent(in), optional :: pinflag
     character (len=*), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field and allocate space internally for an ESMF_Array.
   Return a new ESMF_Field. For an example and associated documentation
   using this method see section [880]26.3.17.

   The arguments are:

   xgrid
          ESMF_XGrid object.

   arrayspec
          Data type and kind specification.

   [xgridside]
          Which side of the XGrid to create the Field on (either
          ESMF_XGRIDSIDE_A, ESMF_XGRIDSIDE_B, or ESMF_XGRIDSIDE_BALANCED).
          If not passed in then defaults to ESMF_XGRIDSIDE_BALANCED.

   [gridindex]
          If xgridside is ESMF_XGRIDSIDE_A or ESMF_XGRIDSIDE_B then this
          index tells which Grid on that side to create the Field on. If
          not provided, defaults to 1.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the
          XGrid dimCount then the default gridToFieldMap will contain
          zeros for the rightmost entries. A zero entry in the
          gridToFieldMap indicates that the particular XGrid dimension
          will be replicating the Field across the DEs along this
          direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [pinflag]
          Specify which type of resource DEs are pinned to. See section
          [881]50.2.1 for a list of valid pinning options. The default is
          to pin DEs to PETs, i.e. only the PET on which a DE was created
          considers the DE as local.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.26 ESMF_FieldCreate - Create a Field from XGrid and Array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateXGArray(xgrid, array, &
     datacopyflag, xgridside, gridindex, &
     gridToFieldMap, ungriddedLBound, ungriddedUBound, &
     name, rc)

   RETURN VALUE:
     type(ESMF_Field) :: ESMF_FieldCreateXGArray

   ARGUMENTS:
     type(ESMF_XGrid), intent(in) :: xgrid
     type(ESMF_Array), intent(in) :: array
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
     type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside
     integer, intent(in), optional :: gridindex
     integer, intent(in), optional :: gridToFieldMap(:)
     integer, intent(in), optional :: ungriddedLBound(:)
     integer, intent(in), optional :: ungriddedUBound(:)
     character (len = *), intent(in), optional :: name
     integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field. This version of creation assumes the data exists
   already and is being passed in through an ESMF_Array. For an example
   and associated documentation using this method see section [882]26.3.6.

   The arguments are:

   xgrid
          ESMF_XGrid object.

   array
          ESMF_Array object.

   [datacopyflag]
          Indicates whether to copy the contents of the array or reference
          it directly. For valid values see [883]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [xgridside]
          Which side of the XGrid to create the Field on (either
          ESMF_XGRIDSIDE_A, ESMF_XGRIDSIDE_B, or ESMF_XGRIDSIDE_BALANCED).
          If not passed in then defaults to ESMF_XGRIDSIDE_BALANCED.

   [gridindex]
          If xgridSide is ESMF_XGRIDSIDE_A or ESMF_XGRIDSIDE_B then this
          index tells which Grid on that side to create the Field on. If
          not provided, defaults to 1.

   [gridToFieldMap]
          List with number of elements equal to the grid's dimCount. The
          list elements map each dimension of the grid to a dimension in
          the field by specifying the appropriate field dimension index.
          The default is to map all of the grid's dimensions against the
          lowest dimensions of the field in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          field rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total field dimensions less the dimensions in the
          grid. Ungridded dimensions must be in the same order they are
          stored in the field. If the Field dimCount is less than the
          XGrid dimCount then the default gridToFieldMap will contain
          zeros for the rightmost entries. A zero entry in the
          gridToFieldMap indicates that the particular XGrid dimension
          will be replicating the Field across the DEs along this
          direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than grid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          field.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.27 ESMF_FieldCreate - Create a Field from XGrid and Fortran array

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateXGData<rank><type><kind>(xgrid, &
   farray, indexflag, datacopyflag, xgridside, gridindex, &
   gridToFieldMap, ungriddedLBound, ungriddedUBound, name,&
   rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateXGData<rank><type><kind>

   ARGUMENTS:
   type(ESMF_XGrid), intent(in) :: xgrid
   <type> (ESMF_KIND_<kind>), intent(in), target :: farray(<rank>)
   type(ESMF_Index_Flag), intent(in) :: indexflag
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside
   integer, intent(in), optional :: gridindex
   integer, intent(in), optional :: gridToFieldMap(:)
   integer, intent(in), optional :: ungriddedLBound(:)
   integer, intent(in), optional :: ungriddedUBound(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data array and ESMF_Xgrid. The
   Fortran data pointer inside ESMF_Field can be queried but deallocating
   the retrieved data pointer is not allowed.

   The arguments are:

   xgrid
          ESMF_XGrid object.

   farray
          Native Fortran data array to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farray.

   indexflag
          Indicate how DE-local indices are defined. See section
          [884]54.27 for a list of valid indexflag options.

   [datacopyflag]
          Whether to copy the contents of the farray or reference
          directly. For valid values see [885]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [xgridside]
          Which side of the XGrid to create the Field on (either
          ESMF_XGRIDSIDE_A, ESMF_XGRIDSIDE_B, or ESMF_XGRIDSIDE_BALANCED).
          If not passed in then defaults to ESMF_XGRIDSIDE_BALANCED.

   [gridindex]
          If xgridside is ESMF_XGRIDSIDE_A or ESMF_XGRIDSIDE_B then this
          index tells which Grid on that side to create the Field on. If
          not provided, defaults to 1.

   [gridToFieldMap]
          List with number of elements equal to the xgrid's dimCount. The
          list elements map each dimension of the xgrid to a dimension in
          the farray by specifying the appropriate farray dimension index.
          The default is to map all of the xgrid's dimensions against the
          lowest dimensions of the farray in sequence, i.e. gridToFieldMap
          = (/1,2,3,.../). The values of all gridToFieldMap entries must
          be greater than or equal to one and smaller than or equal to the
          farray rank. It is erroneous to specify the same gridToFieldMap
          entry multiple times. The total ungridded dimensions in the
          field are the total farray dimensions less the total
          (distributed + undistributed) dimensions in the xgrid.
          Unxgridded dimensions must be in the same order they are stored
          in the farray. Permutations of the order of dimensions are
          handled via individual communication methods. For example, an
          undistributed dimension can be remapped to a distributed
          dimension as part of the ESMF_ArrayRedist() operation. If the
          Field dimCount is less than the Xgrid dimCount then the default
          gridToFieldMap will contain zeros for the rightmost entries. A
          zero entry in the gridToFieldMap indicates that the particular
          Xgrid dimension will be replicating the Field across the DEs
          along this direction.

   [ungriddedLBound]
          Lower bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedLBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than xgrid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          farray.

   [ungriddedUBound]
          Upper bounds of the ungridded dimensions of the field. The
          number of elements in the ungriddedUBound is equal to the number
          of ungridded dimensions in the field. All ungridded dimensions
          of the field are also undistributed. When field dimension count
          is greater than xgrid dimension count, both ungriddedLBound and
          ungriddedUBound must be specified. When both are specified the
          values are checked for consistency. Note that the the ordering
          of these ungridded dimensions is the same as their order in the
          farray.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.28 ESMF_FieldCreate - Create a Field from XGrid and Fortran array pointer

   INTERFACE:
   ! Private name; call using ESMF_FieldCreate()
   function ESMF_FieldCreateXGDataPtr<rank><type><kind>(xgrid, farrayPtr, &
   datacopyflag, xgridside, &
   gridindex, gridToFieldMap, name, rc)

   RETURN VALUE:
   type(ESMF_Field) :: ESMF_FieldCreateXGDataPtr<rank><type><kind>

   ARGUMENTS:
   type(ESMF_XGrid), intent(in) :: xgrid
   <type> (ESMF_KIND_<kind>), pointer :: farrayPtr(<rank>)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
   type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
   type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside
   integer, intent(in), optional :: gridindex
   integer, intent(in), optional :: gridToFieldMap(:)
   character (len=*), intent(in), optional :: name
   integer, intent(out), optional :: rc

   DESCRIPTION:

   Create an ESMF_Field from a Fortran data pointer and ESMF_Xgrid. The
   Fortran data pointer inside ESMF_Field can be queried and deallocated
   when datacopyflag is ESMF_DATACOPY_REFERENCE. Note that the
   ESMF_FieldDestroy call does not deallocate the Fortran data pointer in
   this case. This gives user more flexibility over memory management.

   The arguments are:

   xgrid
          ESMF_XGrid object.

   farrayPtr
          Native Fortran data pointer to be copied/referenced in the Field
          The Field dimension (dimCount) will be the same as the dimCount
          for the farrayPtr.

   [datacopyflag]
          Whether to copy the contents of the farrayPtr or reference it
          directly. For valid values see [886]54.12. The default is
          ESMF_DATACOPY_REFERENCE.

   [xgridside]
          Which side of the XGrid to create the Field on (either
          ESMF_XGRIDSIDE_A, ESMF_XGRIDSIDE_B, or ESMF_XGRIDSIDE_BALANCED).
          If not passed in then defaults to ESMF_XGRIDSIDE_BALANCED.

   [gridindex]
          If xgridside is ESMF_XGRIDSIDE_A or ESMF_XGRIDSIDE_B then this
          index tells which Grid on that side to create the Field on. If
          not provided, defaults to 1.

   [gridToFieldMap]
          List with number of elements equal to the xgrid's dimCount. The
          list elements map each dimension of the xgrid to a dimension in
          the farrayPtr by specifying the appropriate farrayPtr dimension
          index. The default is to map all of the xgrid's dimensions
          against the lowest dimensions of the farrayPtr in sequence, i.e.
          gridToFieldMap = (/1,2,3,.../). The values of all gridToFieldMap
          entries must be greater than or equal to one and smaller than or
          equal to the farrayPtr rank. It is erroneous to specify the same
          gridToFieldMap entry multiple times. The total ungridded
          dimensions in the field are the total farrayPtr dimensions less
          the total (distributed + undistributed) dimensions in the xgrid.
          Unxgridded dimensions must be in the same order they are stored
          in the farrayPtr. Permutations of the order of dimensions are
          handled via individual communication methods. For example, an
          undistributed dimension can be remapped to a distributed
          dimension as part of the ESMF_ArrayRedist() operation. If the
          Field dimCount is less than the Xgrid dimCount then the default
          gridToFieldMap will contain zeros for the rightmost entries. A
          zero entry in the gridToFieldMap indicates that the particular
          Xgrid dimension will be replicating the Field across the DEs
          along this direction.

   [name]
          Field name.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

