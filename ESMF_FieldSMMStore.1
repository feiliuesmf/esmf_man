  26.6.75 ESMF_FieldSMMStore - Precompute Field sparse matrix multiplication
  with local factors

   INTERFACE:
   ! Private name; call using ESMF_FieldSMMStore()
   subroutine ESMF_FieldSMMStore<type><kind>(srcField, dstField, &
          routehandle, factorList, factorIndexList, &
          ignoreUnmatchedIndices, srcTermProcessing, pipelineDepth, rc)

   ARGUMENTS:
     type(ESMF_Field),         intent(in)              :: srcField
     type(ESMF_Field),         intent(inout)           :: dstField
     type(ESMF_RouteHandle),   intent(inout)           :: routehandle
     <type>(ESMF_KIND_<kind>), intent(in)              :: factorList(:)
     integer,                  intent(in),             :: factorIndexList(:,:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     logical,                  intent(in),    optional :: ignoreUnmatchedIndices
     integer,                  intent(inout), optional :: srcTermProcessing
     integer,                  intent(inout), optional :: pipeLineDepth
     integer,                  intent(out),   optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        6.1.0
                Added arguments srcTermProcessing, pipelineDepth The two
                arguments srcTermProcessing and pipelineDepth provide
                access to the tuning parameters affecting the sparse
                matrix execution.

        7.0.0
                Added argument transposeRoutehandle to allow a handle to
                the transposed matrix operation to be returned.
                Added argument ignoreUnmatchedIndices to support sparse
                matrices that contain elements with indices that do not
                have a match within the source or destination Array.

        7.1.0r
                Removed argument transposeRoutehandle and provide it via
                interface overloading instead. This allows argument
                srcField to stay strictly intent(in) for this entry point.

   DESCRIPTION:

   Store a Field sparse matrix multiplication operation from srcField to
   dstField. PETs that specify non-zero matrix coefficients must use the
   <type><kind> overloaded interface and provide the factorList and
   factorIndexList arguments. Providing factorList and factorIndexList
   arguments with size(factorList) = (/0/) and size(factorIndexList) =
   (/2,0/) or (/4,0/) indicates that a PET does not provide matrix
   elements. Alternatively, PETs that do not provide matrix elements may
   also call into the overloaded interface without factorList and
   factorIndexList arguments.

   Both srcField and dstField are interpreted as sequentialized vectors.
   The sequence is defined by the order of DistGrid dimensions and the
   order of tiles within the DistGrid or by user-supplied arbitrary
   sequence indices. See section [1009]28.2.18 for details on the
   definition of sequence indices. SMM corresponds to an identity mapping
   of the source Field vector to the destination Field vector.

   Source and destination Fields may be of different <type><kind>. Further
   source and destination Fields may differ in shape, however, the number
   of elements must match.

   It is erroneous to specify the identical Field object for srcField and
   dstField arguments.

   The routine returns an ESMF_RouteHandle that can be used to call
   ESMF_FieldSMM() on any pair of Fields that matches srcField and
   dstField in type, kind, and memory layout of the gridded dimensions.
   However, the size, number, and index order of ungridded dimensions may
   be different. See section [1010]37.2.5 for a more detailed discussion
   of RouteHandle reusability.

   This method is overloaded for:
   ESMF_TYPEKIND_I4, ESMF_TYPEKIND_I8,
   ESMF_TYPEKIND_R4, ESMF_TYPEKIND_R8.

   This call is collective across the current VM.

   For examples and associated documentation regarding this method see
   Section [1011]26.3.33.

   The arguments are:

   srcField
          ESMF_Field with source data.

   dstField
          ESMF_Field with destination data. The data in this Field may be
          destroyed by this call.

   routehandle
          Handle to the precomputed Route.

   factorList
          List of non-zero coefficients.

   factorIndexList
          Pairs of sequence indices for the factors stored in factorList.

          The second dimension of factorIndexList steps through the list
          of pairs, i.e. size(factorIndexList,2) == size(factorList). The
          first dimension of factorIndexList is either of size 2 or size
          4. The second dimension of factorIndexList steps through the
          list of

          In the size 2 format factorIndexList(1,:) specifies the sequence
          index of the source element in the srcField while
          factorIndexList(2,:) specifies the sequence index of the
          destination element in dstField. For this format to be a valid
          option source and destination Fields must have matching number
          of tensor elements (the product of the sizes of all Field tensor
          dimensions). Under this condition an identity matrix can be
          applied within the space of tensor elements for each sparse
          matrix factor.

          The size 4 format is more general and does not require a
          matching tensor element count. Here the factorIndexList(1,:)
          specifies the sequence index while factorIndexList(2,:)
          specifies the tensor sequence index of the source element in the
          srcField. Further factorIndexList(3,:) specifies the sequence
          index and factorIndexList(4,:) specifies the tensor sequence
          index of the destination element in the dstField.

          See section [1012]28.2.18 for details on the definition of Field
          sequence indices and tensor sequence indices.

   [ignoreUnmatchedIndices]
          A logical flag that affects the behavior for when sequence
          indices in the sparse matrix are encountered that do not have a
          match on the srcField or dstField side. The default setting is
          .false., indicating that it is an error when such a situation is
          encountered. Setting ignoreUnmatchedIndices to .true. ignores
          entries with unmatched indices.

   [srcTermProcessing]
          The srcTermProcessing parameter controls how many source terms,
          located on the same PET and summing into the same destination
          element, are summed into partial sums on the source PET before
          being transferred to the destination PET. A value of 0 indicates
          that the entire arithmetic is done on the destination PET;
          source elements are neither multiplied by their factors nor
          added into partial sums before being sent off by the source PET.
          A value of 1 indicates that source elements are multiplied by
          their factors on the source side before being sent to the
          destination PET. Larger values of srcTermProcessing indicate the
          maximum number of terms in the partial sums on the source side.

          Note that partial sums may lead to bit-for-bit differences in
          the results. See section [1013]37.2.1 for an in-depth discussion
          of all bit-for-bit reproducibility aspects related to
          route-based communication methods.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the srcTermProcessing parameter. The intent on the
          srcTermProcessing argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the
          srcTermProcessing parameter, and the auto-tuning phase is
          skipped. In this case the srcTermProcessing argument is not
          modified on return. If the provided argument is $< 0$ , the
          srcTermProcessing parameter is determined internally using the
          auto-tuning scheme. In this case the srcTermProcessing argument
          is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional srcTermProcessing
          argument is omitted.

   [pipelineDepth]
          The pipelineDepth parameter controls how many messages a PET may
          have outstanding during a sparse matrix exchange. Larger values
          of pipelineDepth typically lead to better performance. However,
          on some systems too large a value may lead to performance
          degradation, or runtime errors.

          Note that the pipeline depth has no effect on the bit-for-bit
          reproducibility of the results. However, it may affect the
          performance reproducibility of the exchange.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the pipelineDepth parameter. The intent on the pipelineDepth
          argument is "inout" in order to support both overriding and
          accessing the auto-tuning parameter. If an argument $>= 0$ is
          specified, it is used for the pipelineDepth parameter, and the
          auto-tuning phase is skipped. In this case the pipelineDepth
          argument is not modified on return. If the provided argument is
          $< 0$ , the pipelineDepth parameter is determined internally
          using the auto-tuning scheme. In this case the pipelineDepth
          argument is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional pipelineDepth argument
          is omitted.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.76 ESMF_FieldSMMStore - Precompute Field sparse matrix multiplication and
  transpose with local factors

   INTERFACE:
   ! Private name; call using ESMF_FieldSMMStore()
   subroutine ESMF_FieldSMMStore<type><kind>TR(srcField, dstField, &
          routehandle, transposeRoutehandle, factorList, factorIndexList, &
          ignoreUnmatchedIndices, srcTermProcessing, &
          pipelineDepth, rc)

   ARGUMENTS:
     type(ESMF_Field),         intent(inout)           :: srcField
     type(ESMF_Field),         intent(inout)           :: dstField
     type(ESMF_RouteHandle),   intent(inout)           :: routehandle
     type(ESMF_RouteHandle),   intent(inout)           :: transposeRoutehandle
     <type>(ESMF_KIND_<kind>), intent(in)              :: factorList(:)
     integer,                  intent(in),             :: factorIndexList(:,:)
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
     logical,                  intent(in),    optional :: ignoreUnmatchedIndices
     integer,                  intent(inout), optional :: srcTermProcessing
     integer,                  intent(inout), optional :: pipeLineDepth
     integer,                  intent(out),   optional :: rc

   DESCRIPTION:

   Store a Field sparse matrix multiplication operation from srcField to
   dstField. PETs that specify non-zero matrix coefficients must use the
   <type><kind> overloaded interface and provide the factorList and
   factorIndexList arguments. Providing factorList and factorIndexList
   arguments with size(factorList) = (/0/) and size(factorIndexList) =
   (/2,0/) or (/4,0/) indicates that a PET does not provide matrix
   elements. Alternatively, PETs that do not provide matrix elements may
   also call into the overloaded interface without factorList and
   factorIndexList arguments.

   Both srcField and dstField are interpreted as sequentialized vectors.
   The sequence is defined by the order of DistGrid dimensions and the
   order of tiles within the DistGrid or by user-supplied arbitrary
   sequence indices. See section [1014]28.2.18 for details on the
   definition of sequence indices. SMM corresponds to an identity mapping
   of the source Field vector to the destination Field vector.

   Source and destination Fields may be of different <type><kind>. Further
   source and destination Fields may differ in shape, however, the number
   of elements must match.

   It is erroneous to specify the identical Field object for srcField and
   dstField arguments.

   The routine returns an ESMF_RouteHandle that can be used to call
   ESMF_FieldSMM() on any pair of Fields that matches srcField and
   dstField in type, kind, and memory layout of the gridded dimensions.
   However, the size, number, and index order of ungridded dimensions may
   be different. See section [1015]37.2.5 for a more detailed discussion
   of RouteHandle reusability.

   This method is overloaded for:
   ESMF_TYPEKIND_I4, ESMF_TYPEKIND_I8,
   ESMF_TYPEKIND_R4, ESMF_TYPEKIND_R8.

   This call is collective across the current VM.

   For examples and associated documentation regarding this method see
   Section [1016]26.3.33.

   The arguments are:

   srcField
          ESMF_Field with source data. The data in this Array may be
          destroyed by this call.

   dstField
          ESMF_Field with destination data. The data in this Field may be
          destroyed by this call.

   routehandle
          Handle to the precomputed Route.

   transposeRoutehandle
          A handle to the transposed matrix operation is returned. The
          transposed operation goes from dstArray to srcArray.

   factorList
          List of non-zero coefficients.

   factorIndexList
          Pairs of sequence indices for the factors stored in factorList.

          The second dimension of factorIndexList steps through the list
          of pairs, i.e. size(factorIndexList,2) == size(factorList). The
          first dimension of factorIndexList is either of size 2 or size
          4. The second dimension of factorIndexList steps through the
          list of

          In the size 2 format factorIndexList(1,:) specifies the sequence
          index of the source element in the srcField while
          factorIndexList(2,:) specifies the sequence index of the
          destination element in dstField. For this format to be a valid
          option source and destination Fields must have matching number
          of tensor elements (the product of the sizes of all Field tensor
          dimensions). Under this condition an identity matrix can be
          applied within the space of tensor elements for each sparse
          matrix factor.

          The size 4 format is more general and does not require a
          matching tensor element count. Here the factorIndexList(1,:)
          specifies the sequence index while factorIndexList(2,:)
          specifies the tensor sequence index of the source element in the
          srcField. Further factorIndexList(3,:) specifies the sequence
          index and factorIndexList(4,:) specifies the tensor sequence
          index of the destination element in the dstField.

          See section [1017]28.2.18 for details on the definition of Field
          sequence indices and tensor sequence indices.

   [ignoreUnmatchedIndices]
          A logical flag that affects the behavior for when sequence
          indices in the sparse matrix are encountered that do not have a
          match on the srcField or dstField side. The default setting is
          .false., indicating that it is an error when such a situation is
          encountered. Setting ignoreUnmatchedIndices to .true. ignores
          entries with unmatched indices.

   [srcTermProcessing]
          The srcTermProcessing parameter controls how many source terms,
          located on the same PET and summing into the same destination
          element, are summed into partial sums on the source PET before
          being transferred to the destination PET. A value of 0 indicates
          that the entire arithmetic is done on the destination PET;
          source elements are neither multiplied by their factors nor
          added into partial sums before being sent off by the source PET.
          A value of 1 indicates that source elements are multiplied by
          their factors on the source side before being sent to the
          destination PET. Larger values of srcTermProcessing indicate the
          maximum number of terms in the partial sums on the source side.

          Note that partial sums may lead to bit-for-bit differences in
          the results. See section [1018]37.2.1 for an in-depth discussion
          of all bit-for-bit reproducibility aspects related to
          route-based communication methods.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the srcTermProcessing parameter. The intent on the
          srcTermProcessing argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the
          srcTermProcessing parameter, and the auto-tuning phase is
          skipped. In this case the srcTermProcessing argument is not
          modified on return. If the provided argument is $< 0$ , the
          srcTermProcessing parameter is determined internally using the
          auto-tuning scheme. In this case the srcTermProcessing argument
          is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional srcTermProcessing
          argument is omitted.

   [pipelineDepth]
          The pipelineDepth parameter controls how many messages a PET may
          have outstanding during a sparse matrix exchange. Larger values
          of pipelineDepth typically lead to better performance. However,
          on some systems too large a value may lead to performance
          degradation, or runtime errors.

          Note that the pipeline depth has no effect on the bit-for-bit
          reproducibility of the results. However, it may affect the
          performance reproducibility of the exchange.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the pipelineDepth parameter. The intent on the pipelineDepth
          argument is "inout" in order to support both overriding and
          accessing the auto-tuning parameter. If an argument $>= 0$ is
          specified, it is used for the pipelineDepth parameter, and the
          auto-tuning phase is skipped. In this case the pipelineDepth
          argument is not modified on return. If the provided argument is
          $< 0$ , the pipelineDepth parameter is determined internally
          using the auto-tuning scheme. In this case the pipelineDepth
          argument is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional pipelineDepth argument
          is omitted.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.77 ESMF_FieldSMMStore - Precompute Field sparse matrix multiplication
  without local factors

   INTERFACE:
   ! Private name; call using ESMF_FieldSMMStore()
     subroutine ESMF_FieldSMMStoreNF(srcField, dstField, &
         routehandle, ignoreUnmatchedIndices, &
         srcTermProcessing, pipelineDepth, rc)

   ARGUMENTS:
         type(ESMF_Field),       intent(in)              :: srcField
         type(ESMF_Field),       intent(inout)           :: dstField
         type(ESMF_RouteHandle), intent(inout)           :: routehandle
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
         logical,                intent(in),    optional :: ignoreUnmatchedIndic
es
         integer,                intent(inout), optional :: srcTermProcessing
         integer,                intent(inout), optional :: pipeLineDepth
         integer,                intent(out),   optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.
     * This interface was modified since ESMF version 5.2.0r. The fact
       that code using this interface compiles with the current ESMF
       version does not guarantee that it compiles with previous versions
       of this interface. If user code compatibility with version 5.2.0r
       is desired then care must be taken to limit the use of this
       interface to features that were available in the 5.2.0r release.
       Changes made after the 5.2.0r release:

        6.1.0
                Added arguments srcTermProcessing, pipelineDepth The two
                arguments srcTermProcessing and pipelineDepth provide
                access to the tuning parameters affecting the sparse
                matrix execution.

        7.0.0
                Added argument transposeRoutehandle to allow a handle to
                the transposed matrix operation to be returned.
                Added argument ignoreUnmatchedIndices to support sparse
                matrices that contain elements with indices that do not
                have a match within the source or destination Array.

        7.1.0r
                Removed argument transposeRoutehandle and provide it via
                interface overloading instead. This allows argument
                srcField to stay strictly intent(in) for this entry point.

   DESCRIPTION:

   Store a Field sparse matrix multiplication operation from srcField to
   dstField. PETs that specify non-zero matrix coefficients must use the
   <type><kind> overloaded interface and provide the factorList and
   factorIndexList arguments. Providing factorList and factorIndexList
   arguments with size(factorList) = (/0/) and size(factorIndexList) =
   (/2,0/) or (/4,0/) indicates that a PET does not provide matrix
   elements. Alternatively, PETs that do not provide matrix elements may
   also call into the overloaded interface without factorList and
   factorIndexList arguments.

   Both srcField and dstField are interpreted as sequentialized vectors.
   The sequence is defined by the order of DistGrid dimensions and the
   order of tiles within the DistGrid or by user-supplied arbitrary
   sequence indices. See section [1019]28.2.18 for details on the
   definition of sequence indices. SMM corresponds to an identity mapping
   of the source Field vector to the destination Field vector.

   Source and destination Fields may be of different <type><kind>. Further
   source and destination Fields may differ in shape, however, the number
   of elements must match.

   It is erroneous to specify the identical Field object for srcField and
   dstField arguments.

   The routine returns an ESMF_RouteHandle that can be used to call
   ESMF_FieldSMM() on any pair of Fields that matches srcField and
   dstField in type, kind, and memory layout of the gridded dimensions.
   However, the size, number, and index order of ungridded dimensions may
   be different. See section [1020]37.2.5 for a more detailed discussion
   of RouteHandle reusability.

   This method is overloaded for:
   ESMF_TYPEKIND_I4, ESMF_TYPEKIND_I8,
   ESMF_TYPEKIND_R4, ESMF_TYPEKIND_R8.

   This call is collective across the current VM.

   For examples and associated documentation regarding this method see
   Section [1021]26.3.33.

   The arguments are:

   srcField
          ESMF_Field with source data.

   dstField
          ESMF_Field with destination data. The data in this Field may be
          destroyed by this call.

   routehandle
          Handle to the precomputed Route.

   [ignoreUnmatchedIndices]
          A logical flag that affects the behavior for when sequence
          indices in the sparse matrix are encountered that do not have a
          match on the srcField or dstField side. The default setting is
          .false., indicating that it is an error when such a situation is
          encountered. Setting ignoreUnmatchedIndices to .true. ignores
          entries with unmatched indices.

   [srcTermProcessing]
          The srcTermProcessing parameter controls how many source terms,
          located on the same PET and summing into the same destination
          element, are summed into partial sums on the source PET before
          being transferred to the destination PET. A value of 0 indicates
          that the entire arithmetic is done on the destination PET;
          source elements are neither multiplied by their factors nor
          added into partial sums before being sent off by the source PET.
          A value of 1 indicates that source elements are multiplied by
          their factors on the source side before being sent to the
          destination PET. Larger values of srcTermProcessing indicate the
          maximum number of terms in the partial sums on the source side.

          Note that partial sums may lead to bit-for-bit differences in
          the results. See section [1022]37.2.1 for an in-depth discussion
          of all bit-for-bit reproducibility aspects related to
          route-based communication methods.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the srcTermProcessing parameter. The intent on the
          srcTermProcessing argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the
          srcTermProcessing parameter, and the auto-tuning phase is
          skipped. In this case the srcTermProcessing argument is not
          modified on return. If the provided argument is $< 0$ , the
          srcTermProcessing parameter is determined internally using the
          auto-tuning scheme. In this case the srcTermProcessing argument
          is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional srcTermProcessing
          argument is omitted.

   [pipelineDepth]
          The pipelineDepth parameter controls how many messages a PET may
          have outstanding during a sparse matrix exchange. Larger values
          of pipelineDepth typically lead to better performance. However,
          on some systems too large a value may lead to performance
          degradation, or runtime errors.

          Note that the pipeline depth has no effect on the bit-for-bit
          reproducibility of the results. However, it may affect the
          performance reproducibility of the exchange.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the pipelineDepth parameter. The intent on the pipelineDepth
          argument is "inout" in order to support both overriding and
          accessing the auto-tuning parameter. If an argument $>= 0$ is
          specified, it is used for the pipelineDepth parameter, and the
          auto-tuning phase is skipped. In this case the pipelineDepth
          argument is not modified on return. If the provided argument is
          $< 0$ , the pipelineDepth parameter is determined internally
          using the auto-tuning scheme. In this case the pipelineDepth
          argument is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional pipelineDepth argument
          is omitted.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.78 ESMF_FieldSMMStore - Precompute Field sparse matrix multiplication and
  transpose without local factors

   INTERFACE:
   ! Private name; call using ESMF_FieldSMMStore()
     subroutine ESMF_FieldSMMStoreNFTR(srcField, dstField, &
         routehandle, transposeRoutehandle, ignoreUnmatchedIndices, &
         srcTermProcessing, pipelineDepth, rc)

   ARGUMENTS:
         type(ESMF_Field),       intent(inout)           :: srcField
         type(ESMF_Field),       intent(inout)           :: dstField
         type(ESMF_RouteHandle), intent(inout)           :: routehandle
         type(ESMF_RouteHandle), intent(inout)           :: transposeRoutehandle
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
         logical,                intent(in),    optional :: ignoreUnmatchedIndic
es
         integer,                intent(inout), optional :: srcTermProcessing
         integer,                intent(inout), optional :: pipeLineDepth
         integer,                intent(out),   optional :: rc

   DESCRIPTION:

   Store a Field sparse matrix multiplication operation from srcField to
   dstField. PETs that specify non-zero matrix coefficients must use the
   <type><kind> overloaded interface and provide the factorList and
   factorIndexList arguments. Providing factorList and factorIndexList
   arguments with size(factorList) = (/0/) and size(factorIndexList) =
   (/2,0/) or (/4,0/) indicates that a PET does not provide matrix
   elements. Alternatively, PETs that do not provide matrix elements may
   also call into the overloaded interface without factorList and
   factorIndexList arguments.

   Both srcField and dstField are interpreted as sequentialized vectors.
   The sequence is defined by the order of DistGrid dimensions and the
   order of tiles within the DistGrid or by user-supplied arbitrary
   sequence indices. See section [1023]28.2.18 for details on the
   definition of sequence indices. SMM corresponds to an identity mapping
   of the source Field vector to the destination Field vector.

   Source and destination Fields may be of different <type><kind>. Further
   source and destination Fields may differ in shape, however, the number
   of elements must match.

   It is erroneous to specify the identical Field object for srcField and
   dstField arguments.

   The routine returns an ESMF_RouteHandle that can be used to call
   ESMF_FieldSMM() on any pair of Fields that matches srcField and
   dstField in type, kind, and memory layout of the gridded dimensions.
   However, the size, number, and index order of ungridded dimensions may
   be different. See section [1024]37.2.5 for a more detailed discussion
   of RouteHandle reusability.

   This method is overloaded for:
   ESMF_TYPEKIND_I4, ESMF_TYPEKIND_I8,
   ESMF_TYPEKIND_R4, ESMF_TYPEKIND_R8.

   This call is collective across the current VM.

   For examples and associated documentation regarding this method see
   Section [1025]26.3.33.

   The arguments are:

   srcField
          ESMF_Field with source data. The data in this Field may be
          destroyed by this call.

   dstField
          ESMF_Field with destination data. The data in this Field may be
          destroyed by this call.

   routehandle
          Handle to the precomputed Route.

   transposeRoutehandle
          A handle to the transposed matrix operation is returned. The
          transposed operation goes from dstArray to srcArray.

   [ignoreUnmatchedIndices]
          A logical flag that affects the behavior for when sequence
          indices in the sparse matrix are encountered that do not have a
          match on the srcField or dstField side. The default setting is
          .false., indicating that it is an error when such a situation is
          encountered. Setting ignoreUnmatchedIndices to .true. ignores
          entries with unmatched indices.

   [srcTermProcessing]
          The srcTermProcessing parameter controls how many source terms,
          located on the same PET and summing into the same destination
          element, are summed into partial sums on the source PET before
          being transferred to the destination PET. A value of 0 indicates
          that the entire arithmetic is done on the destination PET;
          source elements are neither multiplied by their factors nor
          added into partial sums before being sent off by the source PET.
          A value of 1 indicates that source elements are multiplied by
          their factors on the source side before being sent to the
          destination PET. Larger values of srcTermProcessing indicate the
          maximum number of terms in the partial sums on the source side.

          Note that partial sums may lead to bit-for-bit differences in
          the results. See section [1026]37.2.1 for an in-depth discussion
          of all bit-for-bit reproducibility aspects related to
          route-based communication methods.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the srcTermProcessing parameter. The intent on the
          srcTermProcessing argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the
          srcTermProcessing parameter, and the auto-tuning phase is
          skipped. In this case the srcTermProcessing argument is not
          modified on return. If the provided argument is $< 0$ , the
          srcTermProcessing parameter is determined internally using the
          auto-tuning scheme. In this case the srcTermProcessing argument
          is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional srcTermProcessing
          argument is omitted.

   [pipelineDepth]
          The pipelineDepth parameter controls how many messages a PET may
          have outstanding during a sparse matrix exchange. Larger values
          of pipelineDepth typically lead to better performance. However,
          on some systems too large a value may lead to performance
          degradation, or runtime errors.

          Note that the pipeline depth has no effect on the bit-for-bit
          reproducibility of the results. However, it may affect the
          performance reproducibility of the exchange.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the pipelineDepth parameter. The intent on the pipelineDepth
          argument is "inout" in order to support both overriding and
          accessing the auto-tuning parameter. If an argument $>= 0$ is
          specified, it is used for the pipelineDepth parameter, and the
          auto-tuning phase is skipped. In this case the pipelineDepth
          argument is not modified on return. If the provided argument is
          $< 0$ , the pipelineDepth parameter is determined internally
          using the auto-tuning scheme. In this case the pipelineDepth
          argument is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional pipelineDepth argument
          is omitted.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.79 ESMF_FieldSMMStore - Precompute sparse matrix multiplication using
  factors read from file

   INTERFACE:
   ! Private name; call using ESMF_FieldSMMStore()
     subroutine ESMF_FieldSMMStoreFromFile(srcField, dstField, filename, &
       routehandle, ignoreUnmatchedIndices, &
       srcTermProcessing, pipelineDepth, rc)

   ! ARGUMENTS:
       type(ESMF_Field),       intent(in)              :: srcField
       type(ESMF_Field),       intent(inout)           :: dstField
       character(len=*),       intent(in)              :: filename
       type(ESMF_RouteHandle), intent(inout)           :: routehandle
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
       logical,                intent(in),    optional :: ignoreUnmatchedIndices
       integer,                intent(inout), optional :: srcTermProcessing
       integer,                intent(inout), optional :: pipeLineDepth
       integer,                intent(out),   optional :: rc

   DESCRIPTION:

   Compute an ESMF_RouteHandle using factors read from file.

   The arguments are:

   srcField
          ESMF_Field with source data.

   dstField
          ESMF_Field with destination data. The data in this Field may be
          destroyed by this call.

   filename
          Path to the file containing weights for creating an
          ESMF_RouteHandle. See ([1027]12.9) for a description of the
          SCRIP weight file format. Only "row", "col", and "S" variables
          are required. They must be one-dimensionsal with dimension
          "n_s".

   routehandle
          Handle to the ESMF_RouteHandle.

   [ignoreUnmatchedIndices]
          A logical flag that affects the behavior for when sequence
          indices in the sparse matrix are encountered that do not have a
          match on the srcField or dstField side. The default setting is
          .false., indicating that it is an error when such a situation is
          encountered. Setting ignoreUnmatchedIndices to .true. ignores
          entries with unmatched indices.

   [srcTermProcessing]
          The srcTermProcessing parameter controls how many source terms,
          located on the same PET and summing into the same destination
          element, are summed into partial sums on the source PET before
          being transferred to the destination PET. A value of 0 indicates
          that the entire arithmetic is done on the destination PET;
          source elements are neither multiplied by their factors nor
          added into partial sums before being sent off by the source PET.
          A value of 1 indicates that source elements are multiplied by
          their factors on the source side before being sent to the
          destination PET. Larger values of srcTermProcessing indicate the
          maximum number of terms in the partial sums on the source side.

          Note that partial sums may lead to bit-for-bit differences in
          the results. See section [1028]37.2.1 for an in-depth discussion
          of all bit-for-bit reproducibility aspects related to
          route-based communication methods.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the srcTermProcessing parameter. The intent on the
          srcTermProcessing argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the
          srcTermProcessing parameter, and the auto-tuning phase is
          skipped. In this case the srcTermProcessing argument is not
          modified on return. If the provided argument is $< 0$ , the
          srcTermProcessing parameter is determined internally using the
          auto-tuning scheme. In this case the srcTermProcessing argument
          is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional srcTermProcessing
          argument is omitted.

   [pipelineDepth]
          The pipelineDepth parameter controls how many messages a PET may
          have outstanding during a sparse matrix exchange. Larger values
          of pipelineDepth typically lead to better performance. However,
          on some systems too large a value may lead to performance
          degradation, or runtime errors.

          Note that the pipeline depth has no effect on the bit-for-bit
          reproducibility of the results. However, it may affect the
          performance reproducibility of the exchange. The
          ESMF_FieldSMMStore() method implements an auto-tuning scheme for
          the pipelineDepth parameter. The intent on the pipelineDepth
          argument is "inout" in order to support both overriding and
          accessing the auto-tuning parameter. If an argument $>= 0$ is
          specified, it is used for the pipelineDepth parameter, and the
          auto-tuning phase is skipped. In this case the pipelineDepth
          argument is not modified on return. If the provided argument is
          $< 0$ , the pipelineDepth parameter is determined internally
          using the auto-tuning scheme. In this case the pipelineDepth
          argument is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional pipelineDepth argument
          is omitted.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

  26.6.80 ESMF_FieldSMMStore - Precompute sparse matrix multiplication and
  transpose using factors read from file

   INTERFACE:
   ! Private name; call using ESMF_FieldSMMStore()
     subroutine ESMF_FieldSMMStoreFromFileTR(srcField, dstField, filename, &
       routehandle, transposeRoutehandle, &
       ignoreUnmatchedIndices, srcTermProcessing, pipelineDepth, rc)

   ! ARGUMENTS:
       type(ESMF_Field),       intent(inout)           :: srcField
       type(ESMF_Field),       intent(inout)           :: dstField
       character(len=*),       intent(in)              :: filename
       type(ESMF_RouteHandle), intent(inout)           :: routehandle
       type(ESMF_RouteHandle), intent(inout)           :: transposeRoutehandle
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
       logical,                intent(in),    optional :: ignoreUnmatchedIndices
       integer,                intent(inout), optional :: srcTermProcessing
       integer,                intent(inout), optional :: pipeLineDepth
       integer,                intent(out),   optional :: rc

   DESCRIPTION:

   Compute an ESMF_RouteHandle using factors read from file.

   The arguments are:

   srcField
          ESMF_Field with source data. The data in this Array may be
          destroyed by this call.

   dstField
          ESMF_Field with destination data. The data in this Field may be
          destroyed by this call.

   filename
          Path to the file containing weights for creating an
          ESMF_RouteHandle. See ([1029]12.9) for a description of the
          SCRIP weight file format. Only "row", "col", and "S" variables
          are required. They must be one-dimensionsal with dimension
          "n_s".

   routehandle
          Handle to the ESMF_RouteHandle.

   transposeRoutehandle
          A handle to the transposed matrix operation is returned. The
          transposed operation goes from dstArray to srcArray.

   [ignoreUnmatchedIndices]
          A logical flag that affects the behavior for when sequence
          indices in the sparse matrix are encountered that do not have a
          match on the srcField or dstField side. The default setting is
          .false., indicating that it is an error when such a situation is
          encountered. Setting ignoreUnmatchedIndices to .true. ignores
          entries with unmatched indices.

   [srcTermProcessing]
          The srcTermProcessing parameter controls how many source terms,
          located on the same PET and summing into the same destination
          element, are summed into partial sums on the source PET before
          being transferred to the destination PET. A value of 0 indicates
          that the entire arithmetic is done on the destination PET;
          source elements are neither multiplied by their factors nor
          added into partial sums before being sent off by the source PET.
          A value of 1 indicates that source elements are multiplied by
          their factors on the source side before being sent to the
          destination PET. Larger values of srcTermProcessing indicate the
          maximum number of terms in the partial sums on the source side.

          Note that partial sums may lead to bit-for-bit differences in
          the results. See section [1030]37.2.1 for an in-depth discussion
          of all bit-for-bit reproducibility aspects related to
          route-based communication methods.

          The ESMF_FieldSMMStore() method implements an auto-tuning scheme
          for the srcTermProcessing parameter. The intent on the
          srcTermProcessing argument is "inout" in order to support both
          overriding and accessing the auto-tuning parameter. If an
          argument $>= 0$ is specified, it is used for the
          srcTermProcessing parameter, and the auto-tuning phase is
          skipped. In this case the srcTermProcessing argument is not
          modified on return. If the provided argument is $< 0$ , the
          srcTermProcessing parameter is determined internally using the
          auto-tuning scheme. In this case the srcTermProcessing argument
          is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional srcTermProcessing
          argument is omitted.

   [pipelineDepth]
          The pipelineDepth parameter controls how many messages a PET may
          have outstanding during a sparse matrix exchange. Larger values
          of pipelineDepth typically lead to better performance. However,
          on some systems too large a value may lead to performance
          degradation, or runtime errors.

          Note that the pipeline depth has no effect on the bit-for-bit
          reproducibility of the results. However, it may affect the
          performance reproducibility of the exchange. The
          ESMF_FieldSMMStore() method implements an auto-tuning scheme for
          the pipelineDepth parameter. The intent on the pipelineDepth
          argument is "inout" in order to support both overriding and
          accessing the auto-tuning parameter. If an argument $>= 0$ is
          specified, it is used for the pipelineDepth parameter, and the
          auto-tuning phase is skipped. In this case the pipelineDepth
          argument is not modified on return. If the provided argument is
          $< 0$ , the pipelineDepth parameter is determined internally
          using the auto-tuning scheme. In this case the pipelineDepth
          argument is re-set to the internally determined value on return.
          Auto-tuning is also used if the optional pipelineDepth argument
          is omitted.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

