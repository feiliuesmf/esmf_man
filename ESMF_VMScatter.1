  51.6.28 ESMF_VMScatter - Scatter data across VM

   INTERFACE:
    subroutine ESMF_VMScatter(vm, sendData, recvData, count, &
      rootPet, syncflag, commhandle, rc)

   ARGUMENTS:
      type(ESMF_VM),                    intent(in)            :: vm
      <type>(ESMF_KIND_<kind>), target, intent(in)            :: sendData(:)
      <type>(ESMF_KIND_<kind>), target, intent(out)           :: recvData(:)
      integer,                          intent(in)            :: count
      integer,                          intent(in)            :: rootPet
 -- The following arguments require argument keyword syntax (e.g. rc=rc). --
      type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
      type(ESMF_CommHandle),            intent(out), optional :: commhandle
      integer,                          intent(out), optional :: rc

   STATUS:
     * This interface is backward compatible with ESMF versions starting
       at 5.2.0r. If code using this interface compiles with any version
       of ESMF starting with 5.2.0r, then it will compile with the current
       version.

   DESCRIPTION:

   Collective ESMF_VM communication call that scatters contiguous data of
   <type><kind> from rootPet across all the PETs of an ESMF_VM object.
   Every PET, including rootPet, receives a portion of the data. The count
   number of elements received by PET i originate from the sendData array
   on rootPet, starting at position i $\times$ count $+$ 1. Each PET
   stores the received contiguous data portion at the start of its
   recvData array.

   This method is overloaded for: ESMF_TYPEKIND_I4, ESMF_TYPEKIND_I8,
   ESMF_TYPEKIND_R4, ESMF_TYPEKIND_R8, ESMF_TYPEKIND_LOGICAL.

   The arguments are:

   vm
          ESMF_VM object.

   sendData
          Contiguous data array holding data to be sent. Only the sendData
          array specified by the rootPet will be used by this method.

   recvData
          Contiguous data array for data to be received. All PETs must
          specify a valid destination array large enough to accommodate
          the received data.

   count
          Number of elements to be sent from rootPet to each of the PETs.
          Must be the same on all PETs.

   rootPet
          PET that holds data that is being scattered.

   [syncflag]
          Flag indicating whether this call behaves blocking or
          non-blocking. The default is ESMF_SYNC_BLOCKING. See section
          [625]54.57 for a complete list of options.

   [commhandle]
          If present, a communication handle will be returned in case of a
          non-blocking request (see argument syncflag). The commhandle can
          be used in ESMF_VMCommWait() to block the calling PET until the
          communication call has finished PET-locally. If no commhandle
          was supplied to a non-blocking call the VM method
          ESMF_VMCommWaitAll() may be used to block on all currently
          queued communication calls of the VM context.

   [rc]
          Return code; equals ESMF_SUCCESS if there are no errors.

